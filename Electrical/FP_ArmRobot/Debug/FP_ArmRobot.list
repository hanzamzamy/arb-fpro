
FP_ArmRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800f760  0800f760  0001f760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9f8  0800f9f8  00020414  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9f8  0800f9f8  0001f9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa00  0800fa00  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa00  0800fa00  0001fa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa04  0800fa04  0001fa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  0800fa08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c84  20000414  0800fe1c  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002098  0800fe1c  00022098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001efd7  00000000  00000000  00020487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041bc  00000000  00000000  0003f45e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a10  00000000  00000000  00043620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001412  00000000  00000000  00045030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bb25  00000000  00000000  00046442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fa68  00000000  00000000  00061f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a222  00000000  00000000  000819cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b54  00000000  00000000  0011bbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00123748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000414 	.word	0x20000414
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f748 	.word	0x0800f748

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000418 	.word	0x20000418
 80001dc:	0800f748 	.word	0x0800f748

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000590:	f3bf 8f4f 	dsb	sy
}
 8000594:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <__NVIC_SystemReset+0x24>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800059e:	4904      	ldr	r1, [pc, #16]	; (80005b0 <__NVIC_SystemReset+0x24>)
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <__NVIC_SystemReset+0x28>)
 80005a2:	4313      	orrs	r3, r2
 80005a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005a6:	f3bf 8f4f 	dsb	sy
}
 80005aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <__NVIC_SystemReset+0x20>
 80005b0:	e000ed00 	.word	0xe000ed00
 80005b4:	05fa0004 	.word	0x05fa0004

080005b8 <Servo_setCCR>:
uint32_t Servo_getCCR(Servo_t *servo) {
	return *(servo->CCR);
}

// Set functions
void Servo_setCCR(Servo_t *servo, uint32_t value) {
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	uint32_t rescaled = (value * 180)
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	22b4      	movs	r2, #180	; 0xb4
 80005c6:	fb03 f202 	mul.w	r2, r3, r2
				/ (servo->maxCCR - servo->minCCR); // Linear interpolation
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	6899      	ldr	r1, [r3, #8]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	1acb      	subs	r3, r1, r3
	uint32_t rescaled = (value * 180)
 80005d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d8:	60fb      	str	r3, [r7, #12]
	servo->rotDegree = rescaled;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	701a      	strb	r2, [r3, #0]

	*(servo->CCR) = value;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <Servo_setRotation>:

void Servo_setRotation(Servo_t *servo, uint8_t degree) {
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
	uint32_t rescaled = ((CLAMPDEG(degree) * (servo->maxCCR - servo->minCCR))
				/ (180)) + servo->minCCR; // Linear interpolation
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2bb4      	cmp	r3, #180	; 0xb4
 8000608:	d80d      	bhi.n	8000626 <Servo_setRotation+0x2e>
	uint32_t rescaled = ((CLAMPDEG(degree) * (servo->maxCCR - servo->minCCR))
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	6891      	ldr	r1, [r2, #8]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	6852      	ldr	r2, [r2, #4]
 8000614:	1a8a      	subs	r2, r1, r2
 8000616:	fb02 f303 	mul.w	r3, r2, r3
				/ (180)) + servo->minCCR; // Linear interpolation
 800061a:	089b      	lsrs	r3, r3, #2
 800061c:	4a0b      	ldr	r2, [pc, #44]	; (800064c <Servo_setRotation+0x54>)
 800061e:	fba2 2303 	umull	r2, r3, r2, r3
 8000622:	089b      	lsrs	r3, r3, #2
 8000624:	e000      	b.n	8000628 <Servo_setRotation+0x30>
 8000626:	2301      	movs	r3, #1
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	6852      	ldr	r2, [r2, #4]
	uint32_t rescaled = ((CLAMPDEG(degree) * (servo->maxCCR - servo->minCCR))
 800062c:	4413      	add	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
	servo->rotDegree = degree;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	78fa      	ldrb	r2, [r7, #3]
 8000634:	701a      	strb	r2, [r3, #0]

	*(servo->CCR) = rescaled;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	601a      	str	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	16c16c17 	.word	0x16c16c17

08000650 <Servo_calibrate>:

// Utility functions
void Servo_calibrate(Servo_t *servo, uint32_t newMin, uint32_t newMax) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
	servo->minCCR = newMin;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	605a      	str	r2, [r3, #4]
	servo->maxCCR = newMax;
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	609a      	str	r2, [r3, #8]
	Servo_setRotation(servo, servo->rotDegree);
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f7ff ffc2 	bl	80005f8 <Servo_setRotation>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <Servo_Init>:

void Servo_Init(Servo_t *servo, TIM_HandleTypeDef *htim, TIM_TypeDef *TIM,
		uint8_t channel, uint32_t min, uint32_t max) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	70fb      	strb	r3, [r7, #3]
	// Assign CCR pointer and start timer PWM
	switch (channel) {
 800068a:	78fb      	ldrb	r3, [r7, #3]
 800068c:	3b01      	subs	r3, #1
 800068e:	2b03      	cmp	r3, #3
 8000690:	d832      	bhi.n	80006f8 <Servo_Init+0x7c>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <Servo_Init+0x1c>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006bd 	.word	0x080006bd
 80006a0:	080006d1 	.word	0x080006d1
 80006a4:	080006e5 	.word	0x080006e5
	case 1:
		servo->CCR = &(TIM->CCR1);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 80006b2:	2100      	movs	r1, #0
 80006b4:	68b8      	ldr	r0, [r7, #8]
 80006b6:	f004 fa6f 	bl	8004b98 <HAL_TIM_PWM_Start>
		break;
 80006ba:	e01d      	b.n	80006f8 <Servo_Init+0x7c>
	case 2:
		servo->CCR = &(TIM->CCR2);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 80006c6:	2104      	movs	r1, #4
 80006c8:	68b8      	ldr	r0, [r7, #8]
 80006ca:	f004 fa65 	bl	8004b98 <HAL_TIM_PWM_Start>
		break;
 80006ce:	e013      	b.n	80006f8 <Servo_Init+0x7c>
	case 3:
		servo->CCR = &(TIM->CCR3);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 80006da:	2108      	movs	r1, #8
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	f004 fa5b 	bl	8004b98 <HAL_TIM_PWM_Start>
		break;
 80006e2:	e009      	b.n	80006f8 <Servo_Init+0x7c>
	case 4:
		servo->CCR = &(TIM->CCR4);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	60da      	str	r2, [r3, #12]
		HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 80006ee:	210c      	movs	r1, #12
 80006f0:	68b8      	ldr	r0, [r7, #8]
 80006f2:	f004 fa51 	bl	8004b98 <HAL_TIM_PWM_Start>
		break;
 80006f6:	bf00      	nop
	}

	servo->rotDegree = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	servo->minCCR = min;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	69ba      	ldr	r2, [r7, #24]
 8000702:	605a      	str	r2, [r3, #4]
	servo->maxCCR = max;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	69fa      	ldr	r2, [r7, #28]
 8000708:	609a      	str	r2, [r3, #8]

	Servo_calibrate(servo, servo->minCCR, servo->maxCCR);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6859      	ldr	r1, [r3, #4]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	461a      	mov	r2, r3
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	f7ff ff9b 	bl	8000650 <Servo_calibrate>
}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop

08000724 <servoSelect>:
#define INC_CMD_HANDLER_H_

#include "main.h"

// Servo selector function
Servo_t* servoSelect(uint8_t ID) {
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
	// select by ID using pointer
	switch (ID) {
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b04      	cmp	r3, #4
 8000732:	d817      	bhi.n	8000764 <servoSelect+0x40>
 8000734:	a201      	add	r2, pc, #4	; (adr r2, 800073c <servoSelect+0x18>)
 8000736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800073a:	bf00      	nop
 800073c:	08000751 	.word	0x08000751
 8000740:	08000755 	.word	0x08000755
 8000744:	08000759 	.word	0x08000759
 8000748:	0800075d 	.word	0x0800075d
 800074c:	08000761 	.word	0x08000761
	case 0:
		return &grp1;
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <servoSelect+0x50>)
 8000752:	e008      	b.n	8000766 <servoSelect+0x42>
	case 1:
		return &dof1;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <servoSelect+0x54>)
 8000756:	e006      	b.n	8000766 <servoSelect+0x42>
	case 2:
		return &dof2;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <servoSelect+0x58>)
 800075a:	e004      	b.n	8000766 <servoSelect+0x42>
	case 3:
		return &dof3;
 800075c:	4b08      	ldr	r3, [pc, #32]	; (8000780 <servoSelect+0x5c>)
 800075e:	e002      	b.n	8000766 <servoSelect+0x42>
	case 4:
		return &dof4;
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <servoSelect+0x60>)
 8000762:	e000      	b.n	8000766 <servoSelect+0x42>
		break;
	default:
		return NULL;
 8000764:	2300      	movs	r3, #0
	}
}
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000554 	.word	0x20000554
 8000778:	20000514 	.word	0x20000514
 800077c:	20000524 	.word	0x20000524
 8000780:	20000534 	.word	0x20000534
 8000784:	20000544 	.word	0x20000544

08000788 <servoSet>:

/*Multi-target Servo Rotation*/
void servoSet(uint8_t servoID, uint8_t rotDeg) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	460a      	mov	r2, r1
 8000792:	71fb      	strb	r3, [r7, #7]
 8000794:	4613      	mov	r3, r2
 8000796:	71bb      	strb	r3, [r7, #6]
	Servo_t *selServo = servoSelect(servoID);
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffc2 	bl	8000724 <servoSelect>
 80007a0:	60f8      	str	r0, [r7, #12]
	if (selServo) {
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d004      	beq.n	80007b2 <servoSet+0x2a>
		Servo_setRotation(selServo, rotDeg);
 80007a8:	79bb      	ldrb	r3, [r7, #6]
 80007aa:	4619      	mov	r1, r3
 80007ac:	68f8      	ldr	r0, [r7, #12]
 80007ae:	f7ff ff23 	bl	80005f8 <Servo_setRotation>
	}
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <servoWrite>:

/*Multi-target Servo CCR Write*/
void servoWrite(uint8_t servoID, uint32_t value) {
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b084      	sub	sp, #16
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	6039      	str	r1, [r7, #0]
 80007c4:	71fb      	strb	r3, [r7, #7]
	Servo_t *selServo = servoSelect(servoID);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffab 	bl	8000724 <servoSelect>
 80007ce:	60f8      	str	r0, [r7, #12]
	if (selServo) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d003      	beq.n	80007de <servoWrite+0x24>
		Servo_setCCR(selServo, value);
 80007d6:	6839      	ldr	r1, [r7, #0]
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f7ff feed 	bl	80005b8 <Servo_setCCR>
	}
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <servoCal>:

/*Multi-target Servo Calibration*/
void servoCal(uint8_t servoID, uint32_t min, uint32_t max) {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
	Servo_t *selServo = servoSelect(servoID);
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff94 	bl	8000724 <servoSelect>
 80007fc:	6178      	str	r0, [r7, #20]
	if (selServo) {
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d004      	beq.n	800080e <servoCal+0x28>
		Servo_calibrate(selServo, min, max);
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	68b9      	ldr	r1, [r7, #8]
 8000808:	6978      	ldr	r0, [r7, #20]
 800080a:	f7ff ff21 	bl	8000650 <Servo_calibrate>
	}
}
 800080e:	bf00      	nop
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <parseCommand>:

/*Command Parser*/
void parseCommand(char *arg) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b090      	sub	sp, #64	; 0x40
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	char cmd, tgt[6], *token;
	uint8_t parSize = 0, tgtSize;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint32_t params[10];

	// Get command
	token = strtok(arg, " ");
 8000826:	4983      	ldr	r1, [pc, #524]	; (8000a34 <parseCommand+0x21c>)
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f00d fed7 	bl	800e5dc <strtok>
 800082e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (token == NULL)
 8000830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 80f1 	beq.w	8000a1a <parseCommand+0x202>
		return;
	cmd = token[0];
 8000838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// Get target
	token = strtok(NULL, " ");
 8000840:	497c      	ldr	r1, [pc, #496]	; (8000a34 <parseCommand+0x21c>)
 8000842:	2000      	movs	r0, #0
 8000844:	f00d feca 	bl	800e5dc <strtok>
 8000848:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (token == NULL)
 800084a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800084c:	2b00      	cmp	r3, #0
 800084e:	f000 80e6 	beq.w	8000a1e <parseCommand+0x206>
		return;
	strncpy(tgt, token, 6);
 8000852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000856:	2206      	movs	r2, #6
 8000858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800085a:	4618      	mov	r0, r3
 800085c:	f00d feab 	bl	800e5b6 <strncpy>
	tgtSize = strlen(tgt);
 8000860:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fcbb 	bl	80001e0 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	// Get parameters
	token = strtok(NULL, " ");
 8000870:	4970      	ldr	r1, [pc, #448]	; (8000a34 <parseCommand+0x21c>)
 8000872:	2000      	movs	r0, #0
 8000874:	f00d feb2 	bl	800e5dc <strtok>
 8000878:	63f8      	str	r0, [r7, #60]	; 0x3c
	while (token != NULL) {
 800087a:	e014      	b.n	80008a6 <parseCommand+0x8e>
		params[parSize] = atoi(token);
 800087c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800087e:	f00d fcc9 	bl	800e214 <atoi>
 8000882:	4602      	mov	r2, r0
 8000884:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	3340      	adds	r3, #64	; 0x40
 800088c:	443b      	add	r3, r7
 800088e:	f843 2c38 	str.w	r2, [r3, #-56]
		token = strtok(NULL, " ");
 8000892:	4968      	ldr	r1, [pc, #416]	; (8000a34 <parseCommand+0x21c>)
 8000894:	2000      	movs	r0, #0
 8000896:	f00d fea1 	bl	800e5dc <strtok>
 800089a:	63f8      	str	r0, [r7, #60]	; 0x3c
		parSize++;
 800089c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80008a0:	3301      	adds	r3, #1
 80008a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	while (token != NULL) {
 80008a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1e7      	bne.n	800087c <parseCommand+0x64>
	}

	// Command execution branch
	switch (cmd) {
 80008ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008b0:	3b43      	subs	r3, #67	; 0x43
 80008b2:	2b10      	cmp	r3, #16
 80008b4:	f200 80ba 	bhi.w	8000a2c <parseCommand+0x214>
 80008b8:	a201      	add	r2, pc, #4	; (adr r2, 80008c0 <parseCommand+0xa8>)
 80008ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008be:	bf00      	nop
 80008c0:	08000905 	.word	0x08000905
 80008c4:	08000a2d 	.word	0x08000a2d
 80008c8:	08000a2d 	.word	0x08000a2d
 80008cc:	08000a2d 	.word	0x08000a2d
 80008d0:	08000a2d 	.word	0x08000a2d
 80008d4:	08000a2d 	.word	0x08000a2d
 80008d8:	08000a2d 	.word	0x08000a2d
 80008dc:	08000a2d 	.word	0x08000a2d
 80008e0:	08000a2d 	.word	0x08000a2d
 80008e4:	08000a0f 	.word	0x08000a0f
 80008e8:	08000a2d 	.word	0x08000a2d
 80008ec:	08000a2d 	.word	0x08000a2d
 80008f0:	08000a2d 	.word	0x08000a2d
 80008f4:	08000a2d 	.word	0x08000a2d
 80008f8:	08000a2d 	.word	0x08000a2d
 80008fc:	08000969 	.word	0x08000969
 8000900:	080009bb 	.word	0x080009bb
	case 'C': //  Calibrate servo
		if (2 * tgtSize == parSize) {
 8000904:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000908:	005a      	lsls	r2, r3, #1
 800090a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800090e:	429a      	cmp	r2, r3
 8000910:	f040 8087 	bne.w	8000a22 <parseCommand+0x20a>
			for (uint8_t i = 0; i < tgtSize; i += 2) {
 8000914:	2300      	movs	r3, #0
 8000916:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800091a:	e01e      	b.n	800095a <parseCommand+0x142>
				servoCal(tgt[i] - '0', params[i], params[i + 1]);
 800091c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000920:	3340      	adds	r3, #64	; 0x40
 8000922:	443b      	add	r3, r7
 8000924:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000928:	3b30      	subs	r3, #48	; 0x30
 800092a:	b2d8      	uxtb	r0, r3
 800092c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	3340      	adds	r3, #64	; 0x40
 8000934:	443b      	add	r3, r7
 8000936:	f853 1c38 	ldr.w	r1, [r3, #-56]
 800093a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800093e:	3301      	adds	r3, #1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	3340      	adds	r3, #64	; 0x40
 8000944:	443b      	add	r3, r7
 8000946:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800094a:	461a      	mov	r2, r3
 800094c:	f7ff ff4b 	bl	80007e6 <servoCal>
			for (uint8_t i = 0; i < tgtSize; i += 2) {
 8000950:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000954:	3302      	adds	r3, #2
 8000956:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800095a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800095e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000962:	429a      	cmp	r2, r3
 8000964:	d3da      	bcc.n	800091c <parseCommand+0x104>
			}
		}
		break;
 8000966:	e05c      	b.n	8000a22 <parseCommand+0x20a>
	case 'R': // Set servo by CCR value
		if (tgtSize == parSize) {
 8000968:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800096c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000970:	429a      	cmp	r2, r3
 8000972:	d158      	bne.n	8000a26 <parseCommand+0x20e>
			for (uint8_t i = 0; i < tgtSize; i++) {
 8000974:	2300      	movs	r3, #0
 8000976:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800097a:	e017      	b.n	80009ac <parseCommand+0x194>
				servoWrite(tgt[i] - '0', params[i]);
 800097c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000980:	3340      	adds	r3, #64	; 0x40
 8000982:	443b      	add	r3, r7
 8000984:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000988:	3b30      	subs	r3, #48	; 0x30
 800098a:	b2da      	uxtb	r2, r3
 800098c:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	3340      	adds	r3, #64	; 0x40
 8000994:	443b      	add	r3, r7
 8000996:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800099a:	4619      	mov	r1, r3
 800099c:	4610      	mov	r0, r2
 800099e:	f7ff ff0c 	bl	80007ba <servoWrite>
			for (uint8_t i = 0; i < tgtSize; i++) {
 80009a2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80009a6:	3301      	adds	r3, #1
 80009a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80009ac:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 80009b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3e1      	bcc.n	800097c <parseCommand+0x164>
			}
		}
		break;
 80009b8:	e035      	b.n	8000a26 <parseCommand+0x20e>
	case 'S': // Set servo by angle
		if (tgtSize == parSize) {
 80009ba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80009be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d131      	bne.n	8000a2a <parseCommand+0x212>
			for (uint8_t i = 0; i < tgtSize; i++) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80009cc:	e018      	b.n	8000a00 <parseCommand+0x1e8>
				servoSet(tgt[i] - '0', params[i]);
 80009ce:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80009d2:	3340      	adds	r3, #64	; 0x40
 80009d4:	443b      	add	r3, r7
 80009d6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80009da:	3b30      	subs	r3, #48	; 0x30
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	3340      	adds	r3, #64	; 0x40
 80009e6:	443b      	add	r3, r7
 80009e8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4619      	mov	r1, r3
 80009f0:	4610      	mov	r0, r2
 80009f2:	f7ff fec9 	bl	8000788 <servoSet>
			for (uint8_t i = 0; i < tgtSize; i++) {
 80009f6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80009fa:	3301      	adds	r3, #1
 80009fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8000a00:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000a04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d3e0      	bcc.n	80009ce <parseCommand+0x1b6>
			}
		}
		break;
 8000a0c:	e00d      	b.n	8000a2a <parseCommand+0x212>
	case 'L': // Request log
		process.transmit = 1;
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <parseCommand+0x220>)
 8000a10:	7b93      	ldrb	r3, [r2, #14]
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	7393      	strb	r3, [r2, #14]
		break;
 8000a18:	e008      	b.n	8000a2c <parseCommand+0x214>
		return;
 8000a1a:	bf00      	nop
 8000a1c:	e006      	b.n	8000a2c <parseCommand+0x214>
		return;
 8000a1e:	bf00      	nop
 8000a20:	e004      	b.n	8000a2c <parseCommand+0x214>
		break;
 8000a22:	bf00      	nop
 8000a24:	e002      	b.n	8000a2c <parseCommand+0x214>
		break;
 8000a26:	bf00      	nop
 8000a28:	e000      	b.n	8000a2c <parseCommand+0x214>
		break;
 8000a2a:	bf00      	nop
//
//			Servo_setCCR(&dof1, process.currentCCR);
//		}
//		break;
	}
}
 8000a2c:	3740      	adds	r7, #64	; 0x40
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	0800f760 	.word	0x0800f760
 8000a38:	20000564 	.word	0x20000564

08000a3c <HAL_GPIO_EXTI_Callback>:
void Actuator_Init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
	process.sensor = 1; // New sample ready to process
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x20>)
 8000a48:	7b93      	ldrb	r3, [r2, #14]
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	7393      	strb	r3, [r2, #14]

	//Custom_DAQ();
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	20000564 	.word	0x20000564

08000a60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a62:	b097      	sub	sp, #92	; 0x5c
 8000a64:	af0a      	add	r7, sp, #40	; 0x28
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a66:	f000 fe03 	bl	8001670 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a6a:	f000 f8c3 	bl	8000bf4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a6e:	f000 fa67 	bl	8000f40 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000a72:	f000 f959 	bl	8000d28 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000a76:	f000 f9ed 	bl	8000e54 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 8000a7a:	f00c fea1 	bl	800d7c0 <MX_USB_DEVICE_Init>
	MX_I2C1_Init();
 8000a7e:	f000 f925 	bl	8000ccc <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000); // Just small delay before using I2C. Fix HAL_BUSY
 8000a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a86:	f000 fe65 	bl	8001754 <HAL_Delay>
	Sensor_Init();
 8000a8a:	f000 fadf 	bl	800104c <Sensor_Init>
	Actuator_Init();
 8000a8e:	f000 fb45 	bl	800111c <Actuator_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// Post-Sensor Interrupt Action
		if (process.sensor) {
 8000a92:	4b4b      	ldr	r3, [pc, #300]	; (8000bc0 <main+0x160>)
 8000a94:	7b9b      	ldrb	r3, [r3, #14]
 8000a96:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d034      	beq.n	8000b0a <main+0xaa>
			process.sensor = 0;
 8000aa0:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <main+0x160>)
 8000aa2:	7b93      	ldrb	r3, [r2, #14]
 8000aa4:	f36f 0341 	bfc	r3, #1, #1
 8000aa8:	7393      	strb	r3, [r2, #14]
			VL53L0X_RangingMeasurementData_t range;
			VL53L0X_GetRangingMeasurementData(&tof, &range); // Retrieve data from device
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4844      	ldr	r0, [pc, #272]	; (8000bc4 <main+0x164>)
 8000ab2:	f007 fb2b 	bl	800810c <VL53L0X_GetRangingMeasurementData>
			if (range.RangeStatus != 4) { // Data validity check
 8000ab6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d009      	beq.n	8000ad2 <main+0x72>
				rangeData = range; // Data OK. Copy
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <main+0x168>)
 8000ac0:	461d      	mov	r5, r3
 8000ac2:	f107 0410 	add.w	r4, r7, #16
 8000ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ace:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			}

			// Device interrupt mask must reset after reading for future interrupt event
			uint8_t n = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while (VL53L0X_ClearInterruptMask(&tof, 0) != VL53L0X_ERROR_NONE) {
 8000ad8:	e010      	b.n	8000afc <main+0x9c>
				// If so many fail attempts, reset device back to boot state
				if (n == 16) {
 8000ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ade:	2b10      	cmp	r3, #16
 8000ae0:	d107      	bne.n	8000af2 <main+0x92>
					if (VL53L0X_ResetDevice(&tof) == VL53L0X_ERROR_NONE) {
 8000ae2:	4838      	ldr	r0, [pc, #224]	; (8000bc4 <main+0x164>)
 8000ae4:	f006 fc1c 	bl	8007320 <VL53L0X_ResetDevice>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <main+0x92>
						Sensor_Init(); // Re-init sensor
 8000aee:	f000 faad 	bl	800104c <Sensor_Init>
					}
				}
				n++;
 8000af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000af6:	3301      	adds	r3, #1
 8000af8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			while (VL53L0X_ClearInterruptMask(&tof, 0) != VL53L0X_ERROR_NONE) {
 8000afc:	2100      	movs	r1, #0
 8000afe:	4831      	ldr	r0, [pc, #196]	; (8000bc4 <main+0x164>)
 8000b00:	f007 fdb0 	bl	8008664 <VL53L0X_ClearInterruptMask>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1e7      	bne.n	8000ada <main+0x7a>
			}
		}

		// Post-USB CDC Interrupt Action
		if (process.computer) {
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <main+0x160>)
 8000b0c:	7b9b      	ldrb	r3, [r3, #14]
 8000b0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0bc      	beq.n	8000a92 <main+0x32>
			process.computer = 0;
 8000b18:	4a29      	ldr	r2, [pc, #164]	; (8000bc0 <main+0x160>)
 8000b1a:	7b93      	ldrb	r3, [r2, #14]
 8000b1c:	f36f 0300 	bfc	r3, #0, #1
 8000b20:	7393      	strb	r3, [r2, #14]
			parseCommand(rxBuff); // Parse and execute designed command
 8000b22:	482a      	ldr	r0, [pc, #168]	; (8000bcc <main+0x16c>)
 8000b24:	f7ff fe78 	bl	8000818 <parseCommand>
			if (process.transmit) { // Should log send?
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <main+0x160>)
 8000b2a:	7b9b      	ldrb	r3, [r3, #14]
 8000b2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d0ad      	beq.n	8000a92 <main+0x32>
				process.transmit = 0;
 8000b36:	4a22      	ldr	r2, [pc, #136]	; (8000bc0 <main+0x160>)
 8000b38:	7b93      	ldrb	r3, [r2, #14]
 8000b3a:	f36f 0382 	bfc	r3, #2, #1
 8000b3e:	7393      	strb	r3, [r2, #14]
				snprintf(txBuff, BUFLEN, "DIST:%u ROT0:%u RAW0:%lu"
						" ROT1:%u RAW1:%lu ROT2:%u RAW2:%lu"
						" ROT3:%u RAW3:%lu ROT4:%u RAW4:%lu\n",
						rangeData.RangeMilliMeter, grp1.rotDegree,
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <main+0x168>)
 8000b42:	891b      	ldrh	r3, [r3, #8]
				snprintf(txBuff, BUFLEN, "DIST:%u ROT0:%u RAW0:%lu"
 8000b44:	469c      	mov	ip, r3
						rangeData.RangeMilliMeter, grp1.rotDegree,
 8000b46:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <main+0x170>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
				snprintf(txBuff, BUFLEN, "DIST:%u ROT0:%u RAW0:%lu"
 8000b4a:	461d      	mov	r5, r3
						htim3.Instance->CCR3, dof1.rotDegree,
 8000b4c:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <main+0x174>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <main+0x178>)
 8000b54:	7812      	ldrb	r2, [r2, #0]
				snprintf(txBuff, BUFLEN, "DIST:%u ROT0:%u RAW0:%lu"
 8000b56:	4616      	mov	r6, r2
						htim2.Instance->CCR1, dof2.rotDegree,
 8000b58:	4a20      	ldr	r2, [pc, #128]	; (8000bdc <main+0x17c>)
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b5e:	4920      	ldr	r1, [pc, #128]	; (8000be0 <main+0x180>)
 8000b60:	7809      	ldrb	r1, [r1, #0]
				snprintf(txBuff, BUFLEN, "DIST:%u ROT0:%u RAW0:%lu"
 8000b62:	60f9      	str	r1, [r7, #12]
						htim2.Instance->CCR2, dof3.rotDegree,
 8000b64:	491d      	ldr	r1, [pc, #116]	; (8000bdc <main+0x17c>)
 8000b66:	6809      	ldr	r1, [r1, #0]
 8000b68:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8000b6a:	481e      	ldr	r0, [pc, #120]	; (8000be4 <main+0x184>)
 8000b6c:	7800      	ldrb	r0, [r0, #0]
				snprintf(txBuff, BUFLEN, "DIST:%u ROT0:%u RAW0:%lu"
 8000b6e:	60b8      	str	r0, [r7, #8]
						htim2.Instance->CCR3, dof4.rotDegree,
 8000b70:	481a      	ldr	r0, [pc, #104]	; (8000bdc <main+0x17c>)
 8000b72:	6800      	ldr	r0, [r0, #0]
 8000b74:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000b76:	4c1c      	ldr	r4, [pc, #112]	; (8000be8 <main+0x188>)
 8000b78:	7824      	ldrb	r4, [r4, #0]
				snprintf(txBuff, BUFLEN, "DIST:%u ROT0:%u RAW0:%lu"
 8000b7a:	607c      	str	r4, [r7, #4]
						htim2.Instance->CCR4);
 8000b7c:	4c17      	ldr	r4, [pc, #92]	; (8000bdc <main+0x17c>)
 8000b7e:	6824      	ldr	r4, [r4, #0]
 8000b80:	6c24      	ldr	r4, [r4, #64]	; 0x40
				snprintf(txBuff, BUFLEN, "DIST:%u ROT0:%u RAW0:%lu"
 8000b82:	9409      	str	r4, [sp, #36]	; 0x24
 8000b84:	687c      	ldr	r4, [r7, #4]
 8000b86:	9408      	str	r4, [sp, #32]
 8000b88:	9007      	str	r0, [sp, #28]
 8000b8a:	68b8      	ldr	r0, [r7, #8]
 8000b8c:	9006      	str	r0, [sp, #24]
 8000b8e:	9105      	str	r1, [sp, #20]
 8000b90:	68f9      	ldr	r1, [r7, #12]
 8000b92:	9104      	str	r1, [sp, #16]
 8000b94:	9203      	str	r2, [sp, #12]
 8000b96:	9602      	str	r6, [sp, #8]
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	9500      	str	r5, [sp, #0]
 8000b9c:	4663      	mov	r3, ip
 8000b9e:	4a13      	ldr	r2, [pc, #76]	; (8000bec <main+0x18c>)
 8000ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba4:	4812      	ldr	r0, [pc, #72]	; (8000bf0 <main+0x190>)
 8000ba6:	f00d fc87 	bl	800e4b8 <sniprintf>
				CDC_Transmit_FS((uint8_t*) txBuff, strlen(txBuff)); // Send log
 8000baa:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <main+0x190>)
 8000bac:	f7ff fb18 	bl	80001e0 <strlen>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480e      	ldr	r0, [pc, #56]	; (8000bf0 <main+0x190>)
 8000bb8:	f00c feda 	bl	800d970 <CDC_Transmit_FS>
		if (process.sensor) {
 8000bbc:	e769      	b.n	8000a92 <main+0x32>
 8000bbe:	bf00      	nop
 8000bc0:	20000564 	.word	0x20000564
 8000bc4:	20000974 	.word	0x20000974
 8000bc8:	20000b04 	.word	0x20000b04
 8000bcc:	20000574 	.word	0x20000574
 8000bd0:	20000554 	.word	0x20000554
 8000bd4:	200004cc 	.word	0x200004cc
 8000bd8:	20000514 	.word	0x20000514
 8000bdc:	20000484 	.word	0x20000484
 8000be0:	20000524 	.word	0x20000524
 8000be4:	20000534 	.word	0x20000534
 8000be8:	20000544 	.word	0x20000544
 8000bec:	0800f764 	.word	0x0800f764
 8000bf0:	20000774 	.word	0x20000774

08000bf4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	; 0x50
 8000bf8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000bfa:	f107 0320 	add.w	r3, r7, #32
 8000bfe:	2230      	movs	r2, #48	; 0x30
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00d fccf 	bl	800e5a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <SystemClock_Config+0xd0>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <SystemClock_Config+0xd0>)
 8000c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <SystemClock_Config+0xd0>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <SystemClock_Config+0xd4>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c40:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <SystemClock_Config+0xd4>)
 8000c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c46:	6013      	str	r3, [r2, #0]
 8000c48:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <SystemClock_Config+0xd4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000c68:	2319      	movs	r3, #25
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000c6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c70:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c72:	2304      	movs	r3, #4
 8000c74:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c76:	2307      	movs	r3, #7
 8000c78:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 fa9e 	bl	80041c0 <HAL_RCC_OscConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0x9a>
		Error_Handler();
 8000c8a:	f000 fa9d 	bl	80011c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000c8e:	230f      	movs	r3, #15
 8000c90:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c92:	2302      	movs	r3, #2
 8000c94:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fd00 	bl	80046b0 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0xc6>
		Error_Handler();
 8000cb6:	f000 fa87 	bl	80011c8 <Error_Handler>
	}
}
 8000cba:	bf00      	nop
 8000cbc:	3750      	adds	r7, #80	; 0x50
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40007000 	.word	0x40007000

08000ccc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cd2:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <MX_I2C1_Init+0x54>)
 8000cd4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cd8:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_I2C1_Init+0x58>)
 8000cda:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cee:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_I2C1_Init+0x50>)
 8000d0a:	f001 f80f 	bl	8001d2c <HAL_I2C_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000d14:	f000 fa58 	bl	80011c8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000430 	.word	0x20000430
 8000d20:	40005400 	.word	0x40005400
 8000d24:	000186a0 	.word	0x000186a0

08000d28 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
 8000d54:	615a      	str	r2, [r3, #20]
 8000d56:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d58:	4b3d      	ldr	r3, [pc, #244]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000d5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 42 - 1;
 8000d60:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000d62:	2229      	movs	r2, #41	; 0x29
 8000d64:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 40000 - 1;
 8000d6c:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000d6e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000d72:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d80:	4833      	ldr	r0, [pc, #204]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000d82:	f003 fe61 	bl	8004a48 <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x68>
		Error_Handler();
 8000d8c:	f000 fa1c 	bl	80011c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482c      	ldr	r0, [pc, #176]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000d9e:	f004 f86d 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x84>
		Error_Handler();
 8000da8:	f000 fa0e 	bl	80011c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000dac:	4828      	ldr	r0, [pc, #160]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000dae:	f003 fe9a 	bl	8004ae6 <HAL_TIM_PWM_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x94>
		Error_Handler();
 8000db8:	f000 fa06 	bl	80011c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000dc4:	f107 0320 	add.w	r3, r7, #32
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4821      	ldr	r0, [pc, #132]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000dcc:	f004 fbf6 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8000dd6:	f000 f9f7 	bl	80011c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dda:	2360      	movs	r3, #96	; 0x60
 8000ddc:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4817      	ldr	r0, [pc, #92]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000df2:	f003 ff81 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000dfc:	f000 f9e4 	bl	80011c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2204      	movs	r2, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4812      	ldr	r0, [pc, #72]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000e08:	f003 ff76 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000e12:	f000 f9d9 	bl	80011c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2208      	movs	r2, #8
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480c      	ldr	r0, [pc, #48]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000e1e:	f003 ff6b 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM2_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 8000e28:	f000 f9ce 	bl	80011c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	220c      	movs	r2, #12
 8000e30:	4619      	mov	r1, r3
 8000e32:	4807      	ldr	r0, [pc, #28]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000e34:	f003 ff60 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 8000e3e:	f000 f9c3 	bl	80011c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000e42:	4803      	ldr	r0, [pc, #12]	; (8000e50 <MX_TIM2_Init+0x128>)
 8000e44:	f000 fa76 	bl	8001334 <HAL_TIM_MspPostInit>

}
 8000e48:	bf00      	nop
 8000e4a:	3738      	adds	r7, #56	; 0x38
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000484 	.word	0x20000484

08000e54 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	; 0x38
 8000e58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000e86:	4a2d      	ldr	r2, [pc, #180]	; (8000f3c <MX_TIM3_Init+0xe8>)
 8000e88:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 42 - 1;
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000e8c:	2229      	movs	r2, #41	; 0x29
 8000e8e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 40000 - 1;
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000e98:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000e9c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000eaa:	4823      	ldr	r0, [pc, #140]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000eac:	f003 fdcc 	bl	8004a48 <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0x66>
		Error_Handler();
 8000eb6:	f000 f987 	bl	80011c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481c      	ldr	r0, [pc, #112]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000ec8:	f003 ffd8 	bl	8004e7c <HAL_TIM_ConfigClockSource>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x82>
		Error_Handler();
 8000ed2:	f000 f979 	bl	80011c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000ed6:	4818      	ldr	r0, [pc, #96]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000ed8:	f003 fe05 	bl	8004ae6 <HAL_TIM_PWM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM3_Init+0x92>
		Error_Handler();
 8000ee2:	f000 f971 	bl	80011c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000ef6:	f004 fb61 	bl	80055bc <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000f00:	f000 f962 	bl	80011c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f04:	2360      	movs	r3, #96	; 0x60
 8000f06:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2208      	movs	r2, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000f1c:	f003 feec 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8000f26:	f000 f94f 	bl	80011c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000f2a:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_TIM3_Init+0xe4>)
 8000f2c:	f000 fa02 	bl	8001334 <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3738      	adds	r7, #56	; 0x38
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200004cc 	.word	0x200004cc
 8000f3c:	40000400 	.word	0x40000400

08000f40 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	; 0x28
 8000f44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b39      	ldr	r3, [pc, #228]	; (8001040 <MX_GPIO_Init+0x100>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a38      	ldr	r2, [pc, #224]	; (8001040 <MX_GPIO_Init+0x100>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <MX_GPIO_Init+0x100>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b32      	ldr	r3, [pc, #200]	; (8001040 <MX_GPIO_Init+0x100>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a31      	ldr	r2, [pc, #196]	; (8001040 <MX_GPIO_Init+0x100>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <MX_GPIO_Init+0x100>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <MX_GPIO_Init+0x100>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a2a      	ldr	r2, [pc, #168]	; (8001040 <MX_GPIO_Init+0x100>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <MX_GPIO_Init+0x100>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_GPIO_Init+0x100>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a23      	ldr	r2, [pc, #140]	; (8001040 <MX_GPIO_Init+0x100>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_GPIO_Init+0x100>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fcc:	481d      	ldr	r0, [pc, #116]	; (8001044 <MX_GPIO_Init+0x104>)
 8000fce:	f000 fe7b 	bl	8001cc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(VL_SHT_GPIO_Port, VL_SHT_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd8:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_GPIO_Init+0x108>)
 8000fda:	f000 fe75 	bl	8001cc8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4813      	ldr	r0, [pc, #76]	; (8001044 <MX_GPIO_Init+0x104>)
 8000ff8:	f000 fce2 	bl	80019c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : VL_INT_Pin */
	GPIO_InitStruct.Pin = VL_INT_Pin;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001002:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001006:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(VL_INT_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_GPIO_Init+0x108>)
 8001014:	f000 fcd4 	bl	80019c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : VL_SHT_Pin */
	GPIO_InitStruct.Pin = VL_SHT_Pin;
 8001018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800101c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(VL_SHT_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_GPIO_Init+0x108>)
 8001032:	f000 fcc5 	bl	80019c0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800
 8001048:	40020400 	.word	0x40020400

0800104c <Sensor_Init>:

/* USER CODE BEGIN 4 */
void Sensor_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af02      	add	r7, sp, #8
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
// Long Range Profile
	FixPoint1616_t signalLimit = (FixPoint1616_t) (0.25 * 65536);
 8001052:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001056:	617b      	str	r3, [r7, #20]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t) (32 * 65536);
 8001058:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800105c:	613b      	str	r3, [r7, #16]
	uint32_t timingBudget = 20000;
 800105e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001062:	60fb      	str	r3, [r7, #12]
	//uint8_t preRangeVcselPeriod = 18;
	//uint8_t finalRangeVcselPeriod = 14;

	// Not used by library
	tof.I2cHandle = &hi2c1;
 8001064:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <Sensor_Init+0xc8>)
 8001066:	4a2c      	ldr	r2, [pc, #176]	; (8001118 <Sensor_Init+0xcc>)
 8001068:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	tof.I2cDevAddr = 0x52;
 800106c:	4b29      	ldr	r3, [pc, #164]	; (8001114 <Sensor_Init+0xc8>)
 800106e:	2252      	movs	r2, #82	; 0x52
 8001070:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	tof.comms_type = 1;
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <Sensor_Init+0xc8>)
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2174 	strb.w	r2, [r3, #372]	; 0x174
	tof.comms_speed_khz = 100;
 800107c:	4b25      	ldr	r3, [pc, #148]	; (8001114 <Sensor_Init+0xc8>)
 800107e:	2264      	movs	r2, #100	; 0x64
 8001080:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176

	// Init and calibration
	VL53L0X_DataInit(&tof);
 8001084:	4823      	ldr	r0, [pc, #140]	; (8001114 <Sensor_Init+0xc8>)
 8001086:	f005 fe5b 	bl	8006d40 <VL53L0X_DataInit>
	VL53L0X_StaticInit(&tof);
 800108a:	4822      	ldr	r0, [pc, #136]	; (8001114 <Sensor_Init+0xc8>)
 800108c:	f005 ffce 	bl	800702c <VL53L0X_StaticInit>
	VL53L0X_PerformRefSpadManagement(&tof, &refSpadCount, &isApertureSpads);
 8001090:	1cfa      	adds	r2, r7, #3
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	481f      	ldr	r0, [pc, #124]	; (8001114 <Sensor_Init+0xc8>)
 8001098:	f007 fb49 	bl	800872e <VL53L0X_PerformRefSpadManagement>
	VL53L0X_PerformRefCalibration(&tof, &VhvSettings, &PhaseCal);
 800109c:	f107 020a 	add.w	r2, r7, #10
 80010a0:	f107 030b 	add.w	r3, r7, #11
 80010a4:	4619      	mov	r1, r3
 80010a6:	481b      	ldr	r0, [pc, #108]	; (8001114 <Sensor_Init+0xc8>)
 80010a8:	f006 feb4 	bl	8007e14 <VL53L0X_PerformRefCalibration>

	// Parameter adjustment
	VL53L0X_SetLimitCheckEnable(&tof,
 80010ac:	2201      	movs	r2, #1
 80010ae:	2100      	movs	r1, #0
 80010b0:	4818      	ldr	r0, [pc, #96]	; (8001114 <Sensor_Init+0xc8>)
 80010b2:	f006 fca9 	bl	8007a08 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
	VL53L0X_SetLimitCheckEnable(&tof,
 80010b6:	2201      	movs	r2, #1
 80010b8:	2101      	movs	r1, #1
 80010ba:	4816      	ldr	r0, [pc, #88]	; (8001114 <Sensor_Init+0xc8>)
 80010bc:	f006 fca4 	bl	8007a08 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
	VL53L0X_SetLimitCheckValue(&tof,
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	2101      	movs	r1, #1
 80010c4:	4813      	ldr	r0, [pc, #76]	; (8001114 <Sensor_Init+0xc8>)
 80010c6:	f006 fd4f 	bl	8007b68 <VL53L0X_SetLimitCheckValue>
	VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
	VL53L0X_SetLimitCheckValue(&tof,
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	2100      	movs	r1, #0
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <Sensor_Init+0xc8>)
 80010d0:	f006 fd4a 	bl	8007b68 <VL53L0X_SetLimitCheckValue>
	VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&tof, timingBudget);
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	480f      	ldr	r0, [pc, #60]	; (8001114 <Sensor_Init+0xc8>)
 80010d8:	f006 fa52 	bl	8007580 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
//	VL53L0X_SetVcselPulsePeriod(&tof, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
//			preRangeVcselPeriod);
//	VL53L0X_SetVcselPulsePeriod(&tof, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
//			finalRangeVcselPeriod);
	VL53L0X_SetGpioConfig(&tof, 0, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
 80010dc:	2301      	movs	r3, #1
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	2304      	movs	r3, #4
 80010e2:	2201      	movs	r2, #1
 80010e4:	2100      	movs	r1, #0
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <Sensor_Init+0xc8>)
 80010e8:	f007 f964 	bl	80083b4 <VL53L0X_SetGpioConfig>
	VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY,
	VL53L0X_INTERRUPTPOLARITY_HIGH);
	VL53L0X_SetDeviceMode(&tof, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80010ec:	2101      	movs	r1, #1
 80010ee:	4809      	ldr	r0, [pc, #36]	; (8001114 <Sensor_Init+0xc8>)
 80010f0:	f006 f9e8 	bl	80074c4 <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(&tof);
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <Sensor_Init+0xc8>)
 80010f6:	f006 ff09 	bl	8007f0c <VL53L0X_StartMeasurement>

	// Activate STM interrupt
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2017      	movs	r0, #23
 8001100:	f000 fc27 	bl	8001952 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001104:	2017      	movs	r0, #23
 8001106:	f000 fc40 	bl	800198a <HAL_NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000974 	.word	0x20000974
 8001118:	20000430 	.word	0x20000430

0800111c <Actuator_Init>:

void Actuator_Init(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af02      	add	r7, sp, #8
	// Init all servos
	Servo_Init(&dof1, &htim2, TIM2, 1, 1000, 4999);
 8001122:	f241 3387 	movw	r3, #4999	; 0x1387
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001134:	491c      	ldr	r1, [pc, #112]	; (80011a8 <Actuator_Init+0x8c>)
 8001136:	481d      	ldr	r0, [pc, #116]	; (80011ac <Actuator_Init+0x90>)
 8001138:	f7ff faa0 	bl	800067c <Servo_Init>
	Servo_Init(&dof2, &htim2, TIM2, 2, 1000, 4999);
 800113c:	f241 3387 	movw	r3, #4999	; 0x1387
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2302      	movs	r3, #2
 800114a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114e:	4916      	ldr	r1, [pc, #88]	; (80011a8 <Actuator_Init+0x8c>)
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <Actuator_Init+0x94>)
 8001152:	f7ff fa93 	bl	800067c <Servo_Init>
	Servo_Init(&dof3, &htim2, TIM2, 3, 1000, 4999);
 8001156:	f241 3387 	movw	r3, #4999	; 0x1387
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2303      	movs	r3, #3
 8001164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001168:	490f      	ldr	r1, [pc, #60]	; (80011a8 <Actuator_Init+0x8c>)
 800116a:	4812      	ldr	r0, [pc, #72]	; (80011b4 <Actuator_Init+0x98>)
 800116c:	f7ff fa86 	bl	800067c <Servo_Init>
	Servo_Init(&dof4, &htim2, TIM2, 4, 1000, 4999);
 8001170:	f241 3387 	movw	r3, #4999	; 0x1387
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2304      	movs	r3, #4
 800117e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001182:	4909      	ldr	r1, [pc, #36]	; (80011a8 <Actuator_Init+0x8c>)
 8001184:	480c      	ldr	r0, [pc, #48]	; (80011b8 <Actuator_Init+0x9c>)
 8001186:	f7ff fa79 	bl	800067c <Servo_Init>
	Servo_Init(&grp1, &htim3, TIM3, 3, 1000, 4999);
 800118a:	f241 3387 	movw	r3, #4999	; 0x1387
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2303      	movs	r3, #3
 8001198:	4a08      	ldr	r2, [pc, #32]	; (80011bc <Actuator_Init+0xa0>)
 800119a:	4909      	ldr	r1, [pc, #36]	; (80011c0 <Actuator_Init+0xa4>)
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <Actuator_Init+0xa8>)
 800119e:	f7ff fa6d 	bl	800067c <Servo_Init>
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000484 	.word	0x20000484
 80011ac:	20000514 	.word	0x20000514
 80011b0:	20000524 	.word	0x20000524
 80011b4:	20000534 	.word	0x20000534
 80011b8:	20000544 	.word	0x20000544
 80011bc:	40000400 	.word	0x40000400
 80011c0:	200004cc 	.word	0x200004cc
 80011c4:	20000554 	.word	0x20000554

080011c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d2:	4804      	ldr	r0, [pc, #16]	; (80011e4 <Error_Handler+0x1c>)
 80011d4:	f000 fd78 	bl	8001cc8 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 80011d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011dc:	f000 faba 	bl	8001754 <HAL_Delay>
	NVIC_SystemReset(); // Reset MCU
 80011e0:	f7ff f9d4 	bl	800058c <__NVIC_SystemReset>
 80011e4:	40020800 	.word	0x40020800

080011e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a0f      	ldr	r2, [pc, #60]	; (8001234 <HAL_MspInit+0x4c>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <HAL_MspInit+0x4c>)
 8001214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800

08001238 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_I2C_MspInit+0x84>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d12b      	bne.n	80012b2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001276:	23c0      	movs	r3, #192	; 0xc0
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800127a:	2312      	movs	r3, #18
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001286:	2304      	movs	r3, #4
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <HAL_I2C_MspInit+0x8c>)
 8001292:	f000 fb95 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 80012a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_I2C_MspInit+0x88>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	; 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40005400 	.word	0x40005400
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40020400 	.word	0x40020400

080012c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d8:	d10e      	bne.n	80012f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_TIM_Base_MspInit+0x64>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <HAL_TIM_Base_MspInit+0x64>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_TIM_Base_MspInit+0x64>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012f6:	e012      	b.n	800131e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x68>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10d      	bne.n	800131e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_TIM_Base_MspInit+0x64>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_TIM_Base_MspInit+0x64>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_TIM_Base_MspInit+0x64>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40000400 	.word	0x40000400

08001334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d11e      	bne.n	8001394 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = DOF_1_Pin|DOF_2_Pin|DOF_3_Pin|DOF_4_Pin;
 8001372:	230f      	movs	r3, #15
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137e:	2302      	movs	r3, #2
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4816      	ldr	r0, [pc, #88]	; (80013e8 <HAL_TIM_MspPostInit+0xb4>)
 800138e:	f000 fb17 	bl	80019c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001392:	e022      	b.n	80013da <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_TIM_MspPostInit+0xb8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d11d      	bne.n	80013da <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_MspPostInit+0xb0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GRP_1_Pin;
 80013ba:	2301      	movs	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c6:	2302      	movs	r3, #2
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ca:	2302      	movs	r3, #2
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GRP_1_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	4806      	ldr	r0, [pc, #24]	; (80013f0 <HAL_TIM_MspPostInit+0xbc>)
 80013d6:	f000 faf3 	bl	80019c0 <HAL_GPIO_Init>
}
 80013da:	bf00      	nop
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40000400 	.word	0x40000400
 80013f0:	40020400 	.word	0x40020400

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f968 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(VL_INT_Pin);
 800144c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001450:	f000 fc54 	bl	8001cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <OTG_FS_IRQHandler+0x10>)
 800145e:	f001 fda3 	bl	8002fa8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001848 	.word	0x20001848

0800146c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return 1;
 8001470:	2301      	movs	r3, #1
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <_kill>:

int _kill(int pid, int sig)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001486:	f00d f94b 	bl	800e720 <__errno>
 800148a:	4603      	mov	r3, r0
 800148c:	2216      	movs	r2, #22
 800148e:	601a      	str	r2, [r3, #0]
  return -1;
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <_exit>:

void _exit (int status)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffe7 	bl	800147c <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ae:	e7fe      	b.n	80014ae <_exit+0x12>

080014b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	e00a      	b.n	80014d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014c2:	f3af 8000 	nop.w
 80014c6:	4601      	mov	r1, r0
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	1c5a      	adds	r2, r3, #1
 80014cc:	60ba      	str	r2, [r7, #8]
 80014ce:	b2ca      	uxtb	r2, r1
 80014d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf0      	blt.n	80014c2 <_read+0x12>
  }

  return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b086      	sub	sp, #24
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	60f8      	str	r0, [r7, #12]
 80014f2:	60b9      	str	r1, [r7, #8]
 80014f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	e009      	b.n	8001510 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf1      	blt.n	80014fc <_write+0x12>
  }
  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_close>:

int _close(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154a:	605a      	str	r2, [r3, #4]
  return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f00d f8b0 	bl	800e720 <__errno>
 80015c0:	4603      	mov	r3, r0
 80015c2:	220c      	movs	r2, #12
 80015c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20010000 	.word	0x20010000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	20000b20 	.word	0x20000b20
 80015f4:	20002098 	.word	0x20002098

080015f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <SystemInit+0x20>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <SystemInit+0x20>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800161c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001654 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001620:	f7ff ffea 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001626:	490d      	ldr	r1, [pc, #52]	; (800165c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800163c:	4c0a      	ldr	r4, [pc, #40]	; (8001668 <LoopFillZerobss+0x22>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800164a:	f00d f86f 	bl	800e72c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164e:	f7ff fa07 	bl	8000a60 <main>
  bx  lr    
 8001652:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001654:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800165c:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8001660:	0800fa08 	.word	0x0800fa08
  ldr r2, =_sbss
 8001664:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8001668:	20002098 	.word	0x20002098

0800166c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800166c:	e7fe      	b.n	800166c <ADC_IRQHandler>
	...

08001670 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <HAL_Init+0x40>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0d      	ldr	r2, [pc, #52]	; (80016b0 <HAL_Init+0x40>)
 800167a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001680:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0a      	ldr	r2, [pc, #40]	; (80016b0 <HAL_Init+0x40>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168c:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a07      	ldr	r2, [pc, #28]	; (80016b0 <HAL_Init+0x40>)
 8001692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001696:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001698:	2003      	movs	r0, #3
 800169a:	f000 f94f 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169e:	200f      	movs	r0, #15
 80016a0:	f000 f808 	bl	80016b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a4:	f7ff fda0 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023c00 	.word	0x40023c00

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f967 	bl	80019a6 <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 f92f 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000000 	.word	0x20000000
 800170c:	20000008 	.word	0x20000008
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000008 	.word	0x20000008
 8001738:	20000b24 	.word	0x20000b24

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000b24 	.word	0x20000b24

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000008 	.word	0x20000008

0800179c <__NVIC_SetPriorityGrouping>:
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	; (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff8e 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff29 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff3e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff8e 	bl	8001890 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5d 	bl	800183c <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff31 	bl	8001800 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
 80019da:	e159      	b.n	8001c90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019dc:	2201      	movs	r2, #1
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	f040 8148 	bne.w	8001c8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d005      	beq.n	8001a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d130      	bne.n	8001a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	68da      	ldr	r2, [r3, #12]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a48:	2201      	movs	r2, #1
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 0201 	and.w	r2, r3, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d017      	beq.n	8001ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d123      	bne.n	8001b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	220f      	movs	r2, #15
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	4013      	ands	r3, r2
 8001ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	08da      	lsrs	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3208      	adds	r2, #8
 8001afe:	69b9      	ldr	r1, [r7, #24]
 8001b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	2203      	movs	r2, #3
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 0203 	and.w	r2, r3, #3
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a2 	beq.w	8001c8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b57      	ldr	r3, [pc, #348]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4a56      	ldr	r2, [pc, #344]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	; 0x44
 8001b56:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b62:	4a52      	ldr	r2, [pc, #328]	; (8001cac <HAL_GPIO_Init+0x2ec>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a49      	ldr	r2, [pc, #292]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d019      	beq.n	8001bc2 <HAL_GPIO_Init+0x202>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a48      	ldr	r2, [pc, #288]	; (8001cb4 <HAL_GPIO_Init+0x2f4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d013      	beq.n	8001bbe <HAL_GPIO_Init+0x1fe>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a47      	ldr	r2, [pc, #284]	; (8001cb8 <HAL_GPIO_Init+0x2f8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d00d      	beq.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a46      	ldr	r2, [pc, #280]	; (8001cbc <HAL_GPIO_Init+0x2fc>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d007      	beq.n	8001bb6 <HAL_GPIO_Init+0x1f6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a45      	ldr	r2, [pc, #276]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d101      	bne.n	8001bb2 <HAL_GPIO_Init+0x1f2>
 8001bae:	2304      	movs	r3, #4
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x204>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd4:	4935      	ldr	r1, [pc, #212]	; (8001cac <HAL_GPIO_Init+0x2ec>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be2:	4b38      	ldr	r3, [pc, #224]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c06:	4a2f      	ldr	r2, [pc, #188]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c30:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c5a:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c84:	4a0f      	ldr	r2, [pc, #60]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f aea2 	bls.w	80019dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40013c00 	.word	0x40013c00

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce4:	e003      	b.n	8001cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	619a      	str	r2, [r3, #24]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fe8e 	bl	8000a3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40013c00 	.word	0x40013c00

08001d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e12b      	b.n	8001f96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fa70 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2224      	movs	r2, #36	; 0x24
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d90:	f002 fe46 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 8001d94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a81      	ldr	r2, [pc, #516]	; (8001fa0 <HAL_I2C_Init+0x274>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d807      	bhi.n	8001db0 <HAL_I2C_Init+0x84>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4a80      	ldr	r2, [pc, #512]	; (8001fa4 <HAL_I2C_Init+0x278>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	bf94      	ite	ls
 8001da8:	2301      	movls	r3, #1
 8001daa:	2300      	movhi	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e006      	b.n	8001dbe <HAL_I2C_Init+0x92>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a7d      	ldr	r2, [pc, #500]	; (8001fa8 <HAL_I2C_Init+0x27c>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	bf94      	ite	ls
 8001db8:	2301      	movls	r3, #1
 8001dba:	2300      	movhi	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0e7      	b.n	8001f96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4a78      	ldr	r2, [pc, #480]	; (8001fac <HAL_I2C_Init+0x280>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9b      	lsrs	r3, r3, #18
 8001dd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4a6a      	ldr	r2, [pc, #424]	; (8001fa0 <HAL_I2C_Init+0x274>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d802      	bhi.n	8001e00 <HAL_I2C_Init+0xd4>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	e009      	b.n	8001e14 <HAL_I2C_Init+0xe8>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	4a69      	ldr	r2, [pc, #420]	; (8001fb0 <HAL_I2C_Init+0x284>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	3301      	adds	r3, #1
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	495c      	ldr	r1, [pc, #368]	; (8001fa0 <HAL_I2C_Init+0x274>)
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d819      	bhi.n	8001e68 <HAL_I2C_Init+0x13c>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1e59      	subs	r1, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e42:	1c59      	adds	r1, r3, #1
 8001e44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e48:	400b      	ands	r3, r1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_I2C_Init+0x138>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1e59      	subs	r1, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e62:	e051      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001e64:	2304      	movs	r3, #4
 8001e66:	e04f      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d111      	bne.n	8001e94 <HAL_I2C_Init+0x168>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1e58      	subs	r0, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	440b      	add	r3, r1
 8001e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e012      	b.n	8001eba <HAL_I2C_Init+0x18e>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1e58      	subs	r0, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	0099      	lsls	r1, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_Init+0x196>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e022      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_I2C_Init+0x1bc>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1e58      	subs	r0, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	440b      	add	r3, r1
 8001ed8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001edc:	3301      	adds	r3, #1
 8001ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee6:	e00f      	b.n	8001f08 <HAL_I2C_Init+0x1dc>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1e58      	subs	r0, r3, #1
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	0099      	lsls	r1, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	6809      	ldr	r1, [r1, #0]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69da      	ldr	r2, [r3, #28]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6911      	ldr	r1, [r2, #16]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	68d2      	ldr	r2, [r2, #12]
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	000186a0 	.word	0x000186a0
 8001fa4:	001e847f 	.word	0x001e847f
 8001fa8:	003d08ff 	.word	0x003d08ff
 8001fac:	431bde83 	.word	0x431bde83
 8001fb0:	10624dd3 	.word	0x10624dd3

08001fb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	817b      	strh	r3, [r7, #10]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff fbb8 	bl	800173c <HAL_GetTick>
 8001fcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	f040 80e0 	bne.w	800219c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2319      	movs	r3, #25
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4970      	ldr	r1, [pc, #448]	; (80021a8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f000 fc64 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e0d3      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_I2C_Master_Transmit+0x50>
 8002000:	2302      	movs	r3, #2
 8002002:	e0cc      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b01      	cmp	r3, #1
 8002018:	d007      	beq.n	800202a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002038:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2221      	movs	r2, #33	; 0x21
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2210      	movs	r2, #16
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	893a      	ldrh	r2, [r7, #8]
 800205a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a50      	ldr	r2, [pc, #320]	; (80021ac <HAL_I2C_Master_Transmit+0x1f8>)
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800206c:	8979      	ldrh	r1, [r7, #10]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	6a3a      	ldr	r2, [r7, #32]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 face 	bl	8002614 <I2C_MasterRequestWrite>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e08d      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002098:	e066      	b.n	8002168 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	6a39      	ldr	r1, [r7, #32]
 800209e:	68f8      	ldr	r0, [r7, #12]
 80020a0:	f000 fd22 	bl	8002ae8 <I2C_WaitOnTXEFlagUntilTimeout>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d107      	bne.n	80020c2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	781a      	ldrb	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b04      	cmp	r3, #4
 8002102:	d11b      	bne.n	800213c <HAL_I2C_Master_Transmit+0x188>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d017      	beq.n	800213c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	6a39      	ldr	r1, [r7, #32]
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fd19 	bl	8002b78 <I2C_WaitOnBTFFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00d      	beq.n	8002168 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2b04      	cmp	r3, #4
 8002152:	d107      	bne.n	8002164 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002162:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e01a      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	2b00      	cmp	r3, #0
 800216e:	d194      	bne.n	800209a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800217e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e000      	b.n	800219e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800219c:	2302      	movs	r3, #2
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	00100002 	.word	0x00100002
 80021ac:	ffff0000 	.word	0xffff0000

080021b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08c      	sub	sp, #48	; 0x30
 80021b4:	af02      	add	r7, sp, #8
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	461a      	mov	r2, r3
 80021bc:	460b      	mov	r3, r1
 80021be:	817b      	strh	r3, [r7, #10]
 80021c0:	4613      	mov	r3, r2
 80021c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff faba 	bl	800173c <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	f040 8217 	bne.w	8002606 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2319      	movs	r3, #25
 80021de:	2201      	movs	r2, #1
 80021e0:	497c      	ldr	r1, [pc, #496]	; (80023d4 <HAL_I2C_Master_Receive+0x224>)
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fb66 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80021ee:	2302      	movs	r3, #2
 80021f0:	e20a      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_I2C_Master_Receive+0x50>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e203      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d007      	beq.n	8002226 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f042 0201 	orr.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2222      	movs	r2, #34	; 0x22
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2210      	movs	r2, #16
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	893a      	ldrh	r2, [r7, #8]
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4a5c      	ldr	r2, [pc, #368]	; (80023d8 <HAL_I2C_Master_Receive+0x228>)
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002268:	8979      	ldrh	r1, [r7, #10]
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 fa52 	bl	8002718 <I2C_MasterRequestRead>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1c4      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d113      	bne.n	80022ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	623b      	str	r3, [r7, #32]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	623b      	str	r3, [r7, #32]
 800229a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e198      	b.n	80025e0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d11b      	bne.n	80022ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	61fb      	str	r3, [r7, #28]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	e178      	b.n	80025e0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d11b      	bne.n	800232e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002304:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	61bb      	str	r3, [r7, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	e158      	b.n	80025e0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800233c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002354:	e144      	b.n	80025e0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	2b03      	cmp	r3, #3
 800235c:	f200 80f1 	bhi.w	8002542 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002364:	2b01      	cmp	r3, #1
 8002366:	d123      	bne.n	80023b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fc4b 	bl	8002c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e145      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023ae:	e117      	b.n	80025e0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d14e      	bne.n	8002456 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023be:	2200      	movs	r2, #0
 80023c0:	4906      	ldr	r1, [pc, #24]	; (80023dc <HAL_I2C_Master_Receive+0x22c>)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fa76 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d008      	beq.n	80023e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e11a      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
 80023d2:	bf00      	nop
 80023d4:	00100002 	.word	0x00100002
 80023d8:	ffff0000 	.word	0xffff0000
 80023dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691a      	ldr	r2, [r3, #16]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002454:	e0c4      	b.n	80025e0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245c:	2200      	movs	r2, #0
 800245e:	496c      	ldr	r1, [pc, #432]	; (8002610 <HAL_I2C_Master_Receive+0x460>)
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fa27 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0cb      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	2200      	movs	r2, #0
 80024ba:	4955      	ldr	r1, [pc, #340]	; (8002610 <HAL_I2C_Master_Receive+0x460>)
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f9f9 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e09d      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002540:	e04e      	b.n	80025e0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fb5e 	bl	8002c08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e058      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b04      	cmp	r3, #4
 8002594:	d124      	bne.n	80025e0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259a:	2b03      	cmp	r3, #3
 800259c:	d107      	bne.n	80025ae <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f47f aeb6 	bne.w	8002356 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	e000      	b.n	8002608 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002606:	2302      	movs	r3, #2
  }
}
 8002608:	4618      	mov	r0, r3
 800260a:	3728      	adds	r7, #40	; 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	00010004 	.word	0x00010004

08002614 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	460b      	mov	r3, r1
 8002622:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d006      	beq.n	800263e <I2C_MasterRequestWrite+0x2a>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d003      	beq.n	800263e <I2C_MasterRequestWrite+0x2a>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800263c:	d108      	bne.n	8002650 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e00b      	b.n	8002668 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	2b12      	cmp	r3, #18
 8002656:	d107      	bne.n	8002668 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f91d 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00d      	beq.n	800269c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268e:	d103      	bne.n	8002698 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e035      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a4:	d108      	bne.n	80026b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026a6:	897b      	ldrh	r3, [r7, #10]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026b4:	611a      	str	r2, [r3, #16]
 80026b6:	e01b      	b.n	80026f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026b8:	897b      	ldrh	r3, [r7, #10]
 80026ba:	11db      	asrs	r3, r3, #7
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	f003 0306 	and.w	r3, r3, #6
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f063 030f 	orn	r3, r3, #15
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	490e      	ldr	r1, [pc, #56]	; (8002710 <I2C_MasterRequestWrite+0xfc>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f966 	bl	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e010      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <I2C_MasterRequestWrite+0x100>)
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 f956 	bl	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010008 	.word	0x00010008
 8002714:	00010002 	.word	0x00010002

08002718 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	460b      	mov	r3, r1
 8002726:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d006      	beq.n	8002752 <I2C_MasterRequestRead+0x3a>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d003      	beq.n	8002752 <I2C_MasterRequestRead+0x3a>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002750:	d108      	bne.n	8002764 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e00b      	b.n	800277c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	2b11      	cmp	r3, #17
 800276a:	d107      	bne.n	800277c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f893 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00d      	beq.n	80027b0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a2:	d103      	bne.n	80027ac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e079      	b.n	80028a4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027b8:	d108      	bne.n	80027cc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027ba:	897b      	ldrh	r3, [r7, #10]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	e05f      	b.n	800288c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	11db      	asrs	r3, r3, #7
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	f003 0306 	and.w	r3, r3, #6
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f063 030f 	orn	r3, r3, #15
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	4930      	ldr	r1, [pc, #192]	; (80028ac <I2C_MasterRequestRead+0x194>)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8dc 	bl	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e054      	b.n	80028a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4929      	ldr	r1, [pc, #164]	; (80028b0 <I2C_MasterRequestRead+0x198>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 f8cc 	bl	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e044      	b.n	80028a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f831 	bl	80028b4 <I2C_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002866:	d103      	bne.n	8002870 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800286e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e017      	b.n	80028a4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002874:	897b      	ldrh	r3, [r7, #10]
 8002876:	11db      	asrs	r3, r3, #7
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f003 0306 	and.w	r3, r3, #6
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f063 030e 	orn	r3, r3, #14
 8002884:	b2da      	uxtb	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4907      	ldr	r1, [pc, #28]	; (80028b0 <I2C_MasterRequestRead+0x198>)
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f888 	bl	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	00010008 	.word	0x00010008
 80028b0:	00010002 	.word	0x00010002

080028b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c4:	e048      	b.n	8002958 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d044      	beq.n	8002958 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ce:	f7fe ff35 	bl	800173c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d139      	bne.n	8002958 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0c1b      	lsrs	r3, r3, #16
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d10d      	bne.n	800290a <I2C_WaitOnFlagUntilTimeout+0x56>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	43da      	mvns	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4013      	ands	r3, r2
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bf0c      	ite	eq
 8002900:	2301      	moveq	r3, #1
 8002902:	2300      	movne	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	e00c      	b.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x70>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	43da      	mvns	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4013      	ands	r3, r2
 8002916:	b29b      	uxth	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	429a      	cmp	r2, r3
 8002928:	d116      	bne.n	8002958 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2220      	movs	r2, #32
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e023      	b.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	0c1b      	lsrs	r3, r3, #16
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10d      	bne.n	800297e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	43da      	mvns	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	4013      	ands	r3, r2
 800296e:	b29b      	uxth	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	461a      	mov	r2, r3
 800297c:	e00c      	b.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	43da      	mvns	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	429a      	cmp	r2, r3
 800299c:	d093      	beq.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029b6:	e071      	b.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c6:	d123      	bne.n	8002a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f043 0204 	orr.w	r2, r3, #4
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e067      	b.n	8002ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d041      	beq.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7fe fe90 	bl	800173c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d136      	bne.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d10c      	bne.n	8002a52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	e00b      	b.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	43da      	mvns	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	bf14      	ite	ne
 8002a64:	2301      	movne	r3, #1
 8002a66:	2300      	moveq	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e021      	b.n	8002ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	0c1b      	lsrs	r3, r3, #16
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d10c      	bne.n	8002ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e00b      	b.n	8002ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4013      	ands	r3, r2
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bf14      	ite	ne
 8002ad2:	2301      	movne	r3, #1
 8002ad4:	2300      	moveq	r3, #0
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f47f af6d 	bne.w	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002af4:	e034      	b.n	8002b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f8e3 	bl	8002cc2 <I2C_IsAcknowledgeFailed>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e034      	b.n	8002b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d028      	beq.n	8002b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b0e:	f7fe fe15 	bl	800173c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d302      	bcc.n	8002b24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11d      	bne.n	8002b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b80      	cmp	r3, #128	; 0x80
 8002b30:	d016      	beq.n	8002b60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e007      	b.n	8002b70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b80      	cmp	r3, #128	; 0x80
 8002b6c:	d1c3      	bne.n	8002af6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b84:	e034      	b.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f89b 	bl	8002cc2 <I2C_IsAcknowledgeFailed>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e034      	b.n	8002c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9c:	d028      	beq.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9e:	f7fe fdcd 	bl	800173c <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d302      	bcc.n	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11d      	bne.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d016      	beq.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e007      	b.n	8002c00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d1c3      	bne.n	8002b86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c14:	e049      	b.n	8002caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d119      	bne.n	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0210 	mvn.w	r2, #16
 8002c2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2220      	movs	r2, #32
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e030      	b.n	8002cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c58:	f7fe fd70 	bl	800173c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d302      	bcc.n	8002c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d11d      	bne.n	8002caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d016      	beq.n	8002caa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e007      	b.n	8002cba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d1ae      	bne.n	8002c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	d11b      	bne.n	8002d12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ce2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e101      	b.n	8002f36 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f00a ff57 	bl	800dc00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2203      	movs	r2, #3
 8002d56:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d60:	d102      	bne.n	8002d68 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fdaa 	bl	80058c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7c1a      	ldrb	r2, [r3, #16]
 8002d7a:	f88d 2000 	strb.w	r2, [sp]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d82:	f002 fc89 	bl	8005698 <USB_CoreInit>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0ce      	b.n	8002f36 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f002 fda2 	bl	80058e8 <USB_SetCurrentMode>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e0bf      	b.n	8002f36 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
 8002dba:	e04a      	b.n	8002e52 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dbc:	7bfa      	ldrb	r2, [r7, #15]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3315      	adds	r3, #21
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	3314      	adds	r3, #20
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002de4:	7bfa      	ldrb	r2, [r7, #15]
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	b298      	uxth	r0, r3
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	332e      	adds	r3, #46	; 0x2e
 8002df8:	4602      	mov	r2, r0
 8002dfa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	331c      	adds	r3, #28
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3320      	adds	r3, #32
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3324      	adds	r3, #36	; 0x24
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	791b      	ldrb	r3, [r3, #4]
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d3af      	bcc.n	8002dbc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	e044      	b.n	8002eec <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002e8a:	7bfa      	ldrb	r2, [r7, #15]
 8002e8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ed0:	7bfa      	ldrb	r2, [r7, #15]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	791b      	ldrb	r3, [r3, #4]
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d3b5      	bcc.n	8002e62 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	7c1a      	ldrb	r2, [r3, #16]
 8002efe:	f88d 2000 	strb.w	r2, [sp]
 8002f02:	3304      	adds	r3, #4
 8002f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f06:	f002 fd3b 	bl	8005980 <USB_DevInit>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e00c      	b.n	8002f36 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f003 fd7f 	bl	8006a32 <USB_DevDisconnect>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_PCD_Start+0x1c>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e022      	b.n	8002fa0 <HAL_PCD_Start+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f002 fc8c 	bl	80058a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f003 fd2d 	bl	80069f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b08d      	sub	sp, #52	; 0x34
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fdeb 	bl	8006b9a <USB_GetMode>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f040 848c 	bne.w	80038e4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fd4f 	bl	8006a74 <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 8482 	beq.w	80038e2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 fd3c 	bl	8006a74 <USB_ReadInterrupts>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d107      	bne.n	8003016 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f002 0202 	and.w	r2, r2, #2
 8003014:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fd2a 	bl	8006a74 <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b10      	cmp	r3, #16
 8003028:	d161      	bne.n	80030ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0210 	bic.w	r2, r2, #16
 8003038:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	0c5b      	lsrs	r3, r3, #17
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	2b02      	cmp	r3, #2
 8003064:	d124      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d035      	beq.n	80030de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800307c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003080:	b29b      	uxth	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	6a38      	ldr	r0, [r7, #32]
 8003086:	f003 fb61 	bl	800674c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003096:	441a      	add	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a8:	441a      	add	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	615a      	str	r2, [r3, #20]
 80030ae:	e016      	b.n	80030de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	0c5b      	lsrs	r3, r3, #17
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	2b06      	cmp	r3, #6
 80030ba:	d110      	bne.n	80030de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80030c2:	2208      	movs	r2, #8
 80030c4:	4619      	mov	r1, r3
 80030c6:	6a38      	ldr	r0, [r7, #32]
 80030c8:	f003 fb40 	bl	800674c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030d8:	441a      	add	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0210 	orr.w	r2, r2, #16
 80030ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 fcbe 	bl	8006a74 <USB_ReadInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003102:	f040 80a7 	bne.w	8003254 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f003 fcc3 	bl	8006a9a <USB_ReadDevAllOutEpInterrupt>
 8003114:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003116:	e099      	b.n	800324c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 808e 	beq.w	8003240 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f003 fce7 	bl	8006b02 <USB_ReadDevOutEPInterrupt>
 8003134:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	461a      	mov	r2, r3
 800314e:	2301      	movs	r3, #1
 8003150:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fea1 	bl	8003e9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00c      	beq.n	800317e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003170:	461a      	mov	r2, r3
 8003172:	2308      	movs	r3, #8
 8003174:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 ff77 	bl	800406c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	2310      	movs	r3, #16
 8003198:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d030      	beq.n	8003206 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ac:	2b80      	cmp	r3, #128	; 0x80
 80031ae:	d109      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	3304      	adds	r3, #4
 80031d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	78db      	ldrb	r3, [r3, #3]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d108      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2200      	movs	r2, #0
 80031e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	4619      	mov	r1, r3
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f00a fe02 	bl	800ddf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	2302      	movs	r3, #2
 8003204:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	2320      	movs	r3, #32
 8003220:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d009      	beq.n	8003240 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4413      	add	r3, r2
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	461a      	mov	r2, r3
 800323a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800323e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	3301      	adds	r3, #1
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f af62 	bne.w	8003118 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f003 fc0b 	bl	8006a74 <USB_ReadInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003268:	f040 80db 	bne.w	8003422 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fc2c 	bl	8006ace <USB_ReadDevAllInEpInterrupt>
 8003276:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800327c:	e0cd      	b.n	800341a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 80c2 	beq.w	800340e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f003 fc52 	bl	8006b3e <USB_ReadDevInEPInterrupt>
 800329a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d057      	beq.n	8003356 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	2201      	movs	r2, #1
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43db      	mvns	r3, r3
 80032c0:	69f9      	ldr	r1, [r7, #28]
 80032c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c6:	4013      	ands	r3, r2
 80032c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d6:	461a      	mov	r2, r3
 80032d8:	2301      	movs	r3, #1
 80032da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	799b      	ldrb	r3, [r3, #6]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d132      	bne.n	800334a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	3320      	adds	r3, #32
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4403      	add	r3, r0
 8003304:	331c      	adds	r3, #28
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4419      	add	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330e:	4613      	mov	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4403      	add	r3, r0
 8003318:	3320      	adds	r3, #32
 800331a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	2b00      	cmp	r3, #0
 8003320:	d113      	bne.n	800334a <HAL_PCD_IRQHandler+0x3a2>
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3324      	adds	r3, #36	; 0x24
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d108      	bne.n	800334a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003342:	461a      	mov	r2, r3
 8003344:	2101      	movs	r1, #1
 8003346:	f003 fc59 	bl	8006bfc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	b2db      	uxtb	r3, r3
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f00a fcd6 	bl	800dd02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336c:	461a      	mov	r2, r3
 800336e:	2308      	movs	r3, #8
 8003370:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003388:	461a      	mov	r2, r3
 800338a:	2310      	movs	r3, #16
 800338c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a4:	461a      	mov	r2, r3
 80033a6:	2340      	movs	r3, #64	; 0x40
 80033a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d023      	beq.n	80033fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b6:	6a38      	ldr	r0, [r7, #32]
 80033b8:	f002 fc46 	bl	8005c48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	3310      	adds	r3, #16
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	3304      	adds	r3, #4
 80033ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	78db      	ldrb	r3, [r3, #3]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d108      	bne.n	80033ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2200      	movs	r2, #0
 80033dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f00a fd19 	bl	800de1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f6:	461a      	mov	r2, r3
 80033f8:	2302      	movs	r3, #2
 80033fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fcbb 	bl	8003d84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	3301      	adds	r3, #1
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800341a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	f47f af2e 	bne.w	800327e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f003 fb24 	bl	8006a74 <USB_ReadInterrupts>
 800342c:	4603      	mov	r3, r0
 800342e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003436:	d122      	bne.n	800347e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003452:	2b01      	cmp	r3, #1
 8003454:	d108      	bne.n	8003468 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800345e:	2100      	movs	r1, #0
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fea1 	bl	80041a8 <HAL_PCDEx_LPM_Callback>
 8003466:	e002      	b.n	800346e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f00a fcb7 	bl	800dddc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800347c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f003 faf6 	bl	8006a74 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800348e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003492:	d112      	bne.n	80034ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f00a fc73 	bl	800dd90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034b8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f003 fad8 	bl	8006a74 <USB_ReadInterrupts>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ce:	f040 80b7 	bne.w	8003640 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2110      	movs	r1, #16
 80034ec:	4618      	mov	r0, r3
 80034ee:	f002 fbab 	bl	8005c48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f2:	2300      	movs	r3, #0
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f6:	e046      	b.n	8003586 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	461a      	mov	r2, r3
 8003506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800350a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800351c:	0151      	lsls	r1, r2, #5
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	440a      	add	r2, r1
 8003522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800352a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	461a      	mov	r2, r3
 800353a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800353e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003550:	0151      	lsls	r1, r2, #5
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	440a      	add	r2, r1
 8003556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800355a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800355e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003570:	0151      	lsls	r1, r2, #5
 8003572:	69fa      	ldr	r2, [r7, #28]
 8003574:	440a      	add	r2, r1
 8003576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800357a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800357e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	3301      	adds	r3, #1
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	791b      	ldrb	r3, [r3, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	4293      	cmp	r3, r2
 8003590:	d3b2      	bcc.n	80034f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	69fa      	ldr	r2, [r7, #28]
 800359c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80035a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7bdb      	ldrb	r3, [r3, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035be:	f043 030b 	orr.w	r3, r3, #11
 80035c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d4:	f043 030b 	orr.w	r3, r3, #11
 80035d8:	6453      	str	r3, [r2, #68]	; 0x44
 80035da:	e015      	b.n	8003608 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80035f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003602:	f043 030b 	orr.w	r3, r3, #11
 8003606:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003616:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800361a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800362a:	461a      	mov	r2, r3
 800362c:	f003 fae6 	bl	8006bfc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800363e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f003 fa15 	bl	8006a74 <USB_ReadInterrupts>
 800364a:	4603      	mov	r3, r0
 800364c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003654:	d123      	bne.n	800369e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f003 faab 	bl	8006bb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f002 fb68 	bl	8005d3a <USB_GetDevSpeed>
 800366a:	4603      	mov	r3, r0
 800366c:	461a      	mov	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681c      	ldr	r4, [r3, #0]
 8003676:	f001 f9c7 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 800367a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003680:	461a      	mov	r2, r3
 8003682:	4620      	mov	r0, r4
 8003684:	f002 f86c 	bl	8005760 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f00a fb62 	bl	800dd52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800369c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 f9e6 	bl	8006a74 <USB_ReadInterrupts>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d10a      	bne.n	80036c8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f00a fb3f 	bl	800dd36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f002 0208 	and.w	r2, r2, #8
 80036c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 f9d1 	bl	8006a74 <USB_ReadInterrupts>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d8:	2b80      	cmp	r3, #128	; 0x80
 80036da:	d123      	bne.n	8003724 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036e8:	2301      	movs	r3, #1
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
 80036ec:	e014      	b.n	8003718 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	4613      	mov	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4413      	add	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d105      	bne.n	8003712 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	b2db      	uxtb	r3, r3
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fb08 	bl	8003d22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	3301      	adds	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	791b      	ldrb	r3, [r3, #4]
 800371c:	461a      	mov	r2, r3
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	4293      	cmp	r3, r2
 8003722:	d3e4      	bcc.n	80036ee <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 f9a3 	bl	8006a74 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003738:	d13c      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800373a:	2301      	movs	r3, #1
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	e02b      	b.n	8003798 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	4613      	mov	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3318      	adds	r3, #24
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d115      	bne.n	8003792 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003766:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003768:	2b00      	cmp	r3, #0
 800376a:	da12      	bge.n	8003792 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	3317      	adds	r3, #23
 800377c:	2201      	movs	r2, #1
 800377e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fac8 	bl	8003d22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	3301      	adds	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	791b      	ldrb	r3, [r3, #4]
 800379c:	461a      	mov	r2, r3
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d3cd      	bcc.n	8003740 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80037b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f003 f95b 	bl	8006a74 <USB_ReadInterrupts>
 80037be:	4603      	mov	r3, r0
 80037c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c8:	d156      	bne.n	8003878 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ca:	2301      	movs	r3, #1
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
 80037ce:	e045      	b.n	800385c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d12e      	bne.n	8003856 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037f8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	da2b      	bge.n	8003856 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800380a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800380e:	429a      	cmp	r2, r3
 8003810:	d121      	bne.n	8003856 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800384e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003852:	6053      	str	r3, [r2, #4]
            break;
 8003854:	e008      	b.n	8003868 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	3301      	adds	r3, #1
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	461a      	mov	r2, r3
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	4293      	cmp	r3, r2
 8003866:	d3b3      	bcc.n	80037d0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f003 f8f9 	bl	8006a74 <USB_ReadInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800388c:	d10a      	bne.n	80038a4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f00a fad6 	bl	800de40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80038a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f003 f8e3 	bl	8006a74 <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d115      	bne.n	80038e4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f00a fac6 	bl	800de5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	e000      	b.n	80038e4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80038e2:	bf00      	nop
    }
  }
}
 80038e4:	3734      	adds	r7, #52	; 0x34
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd90      	pop	{r4, r7, pc}

080038ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d101      	bne.n	8003904 <HAL_PCD_SetAddress+0x1a>
 8003900:	2302      	movs	r3, #2
 8003902:	e012      	b.n	800392a <HAL_PCD_SetAddress+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	4611      	mov	r1, r2
 800391a:	4618      	mov	r0, r3
 800391c:	f003 f842 	bl	80069a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	4608      	mov	r0, r1
 800393c:	4611      	mov	r1, r2
 800393e:	461a      	mov	r2, r3
 8003940:	4603      	mov	r3, r0
 8003942:	70fb      	strb	r3, [r7, #3]
 8003944:	460b      	mov	r3, r1
 8003946:	803b      	strh	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003954:	2b00      	cmp	r3, #0
 8003956:	da0f      	bge.n	8003978 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	f003 020f 	and.w	r2, r3, #15
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	3310      	adds	r3, #16
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4413      	add	r3, r2
 800396c:	3304      	adds	r3, #4
 800396e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	705a      	strb	r2, [r3, #1]
 8003976:	e00f      	b.n	8003998 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	f003 020f 	and.w	r2, r3, #15
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	3304      	adds	r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039a4:	883a      	ldrh	r2, [r7, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	78ba      	ldrb	r2, [r7, #2]
 80039ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039c2:	78bb      	ldrb	r3, [r7, #2]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d102      	bne.n	80039ce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_PCD_EP_Open+0xaa>
 80039d8:	2302      	movs	r3, #2
 80039da:	e00e      	b.n	80039fa <HAL_PCD_EP_Open+0xc8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68f9      	ldr	r1, [r7, #12]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f002 f9ca 	bl	8005d84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80039f8:	7afb      	ldrb	r3, [r7, #11]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	da0f      	bge.n	8003a36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 020f 	and.w	r2, r3, #15
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	3310      	adds	r3, #16
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4413      	add	r3, r2
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	705a      	strb	r2, [r3, #1]
 8003a34:	e00f      	b.n	8003a56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 020f 	and.w	r2, r3, #15
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_PCD_EP_Close+0x6e>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e00e      	b.n	8003a8e <HAL_PCD_EP_Close+0x8c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 fa08 	bl	8005e94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa6:	7afb      	ldrb	r3, [r7, #11]
 8003aa8:	f003 020f 	and.w	r2, r3, #15
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	3304      	adds	r3, #4
 8003abe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad8:	7afb      	ldrb	r3, [r7, #11]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	799b      	ldrb	r3, [r3, #6]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d102      	bne.n	8003af2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	799b      	ldrb	r3, [r3, #6]
 8003afa:	461a      	mov	r2, r3
 8003afc:	6979      	ldr	r1, [r7, #20]
 8003afe:	f002 faa5 	bl	800604c <USB_EPStartXfer>

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003b2e:	681b      	ldr	r3, [r3, #0]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	f003 020f 	and.w	r2, r3, #15
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	3310      	adds	r3, #16
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	799b      	ldrb	r3, [r3, #6]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d102      	bne.n	8003b96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	799b      	ldrb	r3, [r3, #6]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	f002 fa53 	bl	800604c <USB_EPStartXfer>

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	7912      	ldrb	r2, [r2, #4]
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e04f      	b.n	8003c6e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	da0f      	bge.n	8003bf6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	f003 020f 	and.w	r2, r3, #15
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	3310      	adds	r3, #16
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	3304      	adds	r3, #4
 8003bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	705a      	strb	r2, [r3, #1]
 8003bf4:	e00d      	b.n	8003c12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	4413      	add	r3, r2
 8003c08:	3304      	adds	r3, #4
 8003c0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_PCD_EP_SetStall+0x82>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e01d      	b.n	8003c6e <HAL_PCD_EP_SetStall+0xbe>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f002 fddb 	bl	80067fc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d109      	bne.n	8003c64 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	7999      	ldrb	r1, [r3, #6]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f002 ffcc 	bl	8006bfc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	7912      	ldrb	r2, [r2, #4]
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e042      	b.n	8003d1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	da0f      	bge.n	8003cbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 020f 	and.w	r2, r3, #15
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	3310      	adds	r3, #16
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4413      	add	r3, r2
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	705a      	strb	r2, [r3, #1]
 8003cba:	e00f      	b.n	8003cdc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 020f 	and.w	r2, r3, #15
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_PCD_EP_ClrStall+0x86>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e00e      	b.n	8003d1a <HAL_PCD_EP_ClrStall+0xa4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f002 fde4 	bl	80068d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da0c      	bge.n	8003d50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 020f 	and.w	r2, r3, #15
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	3310      	adds	r3, #16
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e00c      	b.n	8003d6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	f003 020f 	and.w	r2, r3, #15
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	4413      	add	r3, r2
 8003d66:	3304      	adds	r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f002 fc03 	bl	800657c <USB_EPStopXfer>
 8003d76:	4603      	mov	r3, r0
 8003d78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3310      	adds	r3, #16
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d901      	bls.n	8003dbc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e06b      	b.n	8003e94 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	69fa      	ldr	r2, [r7, #28]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d902      	bls.n	8003dd8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	3303      	adds	r3, #3
 8003ddc:	089b      	lsrs	r3, r3, #2
 8003dde:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003de0:	e02a      	b.n	8003e38 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d902      	bls.n	8003dfe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	3303      	adds	r3, #3
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68d9      	ldr	r1, [r3, #12]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	4603      	mov	r3, r0
 8003e1a:	6978      	ldr	r0, [r7, #20]
 8003e1c:	f002 fc58 	bl	80066d0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	441a      	add	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	695a      	ldr	r2, [r3, #20]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	441a      	add	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d809      	bhi.n	8003e62 <PCD_WriteEmptyTxFifo+0xde>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d203      	bcs.n	8003e62 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1bf      	bne.n	8003de2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d811      	bhi.n	8003e92 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f003 030f 	and.w	r3, r3, #15
 8003e74:	2201      	movs	r2, #1
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	6939      	ldr	r1, [r7, #16]
 8003e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e8e:	4013      	ands	r3, r2
 8003e90:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3720      	adds	r7, #32
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	333c      	adds	r3, #60	; 0x3c
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	799b      	ldrb	r3, [r3, #6]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d17b      	bne.n	8003fca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d015      	beq.n	8003f08 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4a61      	ldr	r2, [pc, #388]	; (8004064 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	f240 80b9 	bls.w	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80b3 	beq.w	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efe:	461a      	mov	r2, r3
 8003f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f04:	6093      	str	r3, [r2, #8]
 8003f06:	e0a7      	b.n	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d009      	beq.n	8003f26 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2320      	movs	r3, #32
 8003f22:	6093      	str	r3, [r2, #8]
 8003f24:	e098      	b.n	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f040 8093 	bne.w	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	4a4b      	ldr	r2, [pc, #300]	; (8004064 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d90f      	bls.n	8003f5a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f50:	461a      	mov	r2, r3
 8003f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f56:	6093      	str	r3, [r2, #8]
 8003f58:	e07e      	b.n	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1a      	ldr	r2, [r3, #32]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	0159      	lsls	r1, r3, #5
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	440b      	add	r3, r1
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f86:	1ad2      	subs	r2, r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d114      	bne.n	8003fbc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	f002 fe28 	bl	8006bfc <USB_EP0_OutStart>
 8003fac:	e006      	b.n	8003fbc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	441a      	add	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f009 fe82 	bl	800dccc <HAL_PCD_DataOutStageCallback>
 8003fc8:	e046      	b.n	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	4a26      	ldr	r2, [pc, #152]	; (8004068 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d124      	bne.n	800401c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fee:	6093      	str	r3, [r2, #8]
 8003ff0:	e032      	b.n	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004008:	461a      	mov	r2, r3
 800400a:	2320      	movs	r3, #32
 800400c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	4619      	mov	r1, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f009 fe59 	bl	800dccc <HAL_PCD_DataOutStageCallback>
 800401a:	e01d      	b.n	8004058 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d114      	bne.n	800404c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004022:	6879      	ldr	r1, [r7, #4]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	4613      	mov	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	4413      	add	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d108      	bne.n	800404c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004044:	461a      	mov	r2, r3
 8004046:	2100      	movs	r1, #0
 8004048:	f002 fdd8 	bl	8006bfc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f009 fe3a 	bl	800dccc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	4f54300a 	.word	0x4f54300a
 8004068:	4f54310a 	.word	0x4f54310a

0800406c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	333c      	adds	r3, #60	; 0x3c
 8004084:	3304      	adds	r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d90e      	bls.n	80040c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f009 fdf1 	bl	800dca8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d90c      	bls.n	80040e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	799b      	ldrb	r3, [r3, #6]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d108      	bne.n	80040e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80040e0:	461a      	mov	r2, r3
 80040e2:	2101      	movs	r1, #1
 80040e4:	f002 fd8a 	bl	8006bfc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	4f54300a 	.word	0x4f54300a

080040f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
 8004104:	4613      	mov	r3, r2
 8004106:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004110:	78fb      	ldrb	r3, [r7, #3]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004116:	883b      	ldrh	r3, [r7, #0]
 8004118:	0419      	lsls	r1, r3, #16
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	430a      	orrs	r2, r1
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
 8004124:	e028      	b.n	8004178 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800412c:	0c1b      	lsrs	r3, r3, #16
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4413      	add	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004134:	2300      	movs	r3, #0
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	e00d      	b.n	8004156 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	3340      	adds	r3, #64	; 0x40
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	4413      	add	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	3301      	adds	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	3b01      	subs	r3, #1
 800415c:	429a      	cmp	r2, r3
 800415e:	d3ec      	bcc.n	800413a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004160:	883b      	ldrh	r3, [r7, #0]
 8004162:	0418      	lsls	r0, r3, #16
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6819      	ldr	r1, [r3, #0]
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	3b01      	subs	r3, #1
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	4302      	orrs	r2, r0
 8004170:	3340      	adds	r3, #64	; 0x40
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	887a      	ldrh	r2, [r7, #2]
 8004198:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e267      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d075      	beq.n	80042ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041de:	4b88      	ldr	r3, [pc, #544]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d00c      	beq.n	8004204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ea:	4b85      	ldr	r3, [pc, #532]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d112      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b82      	ldr	r3, [pc, #520]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004202:	d10b      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	4b7e      	ldr	r3, [pc, #504]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05b      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e242      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x74>
 8004226:	4b76      	ldr	r3, [pc, #472]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a75      	ldr	r2, [pc, #468]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x98>
 800423e:	4b70      	ldr	r3, [pc, #448]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6f      	ldr	r2, [pc, #444]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6c      	ldr	r2, [pc, #432]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004258:	4b69      	ldr	r3, [pc, #420]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a68      	ldr	r2, [pc, #416]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a65      	ldr	r2, [pc, #404]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fd fa60 	bl	800173c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd fa5c 	bl	800173c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e207      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xc0>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fd fa4c 	bl	800173c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fd fa48 	bl	800173c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1f3      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b51      	ldr	r3, [pc, #324]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d6:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b44      	ldr	r3, [pc, #272]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x152>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1c7      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4937      	ldr	r1, [pc, #220]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x244>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd fa01 	bl	800173c <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433e:	f7fd f9fd 	bl	800173c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1a8      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4925      	ldr	r1, [pc, #148]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_OscConfig+0x244>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd f9e0 	bl	800173c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004380:	f7fd f9dc 	bl	800173c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e187      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d036      	beq.n	8004418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_RCC_OscConfig+0x248>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fd f9c0 	bl	800173c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fd f9bc 	bl	800173c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e167      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x200>
 80043de:	e01b      	b.n	8004418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x248>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fd f9a9 	bl	800173c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	e00e      	b.n	800440c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ee:	f7fd f9a5 	bl	800173c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d907      	bls.n	800440c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e150      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
 8004400:	40023800 	.word	0x40023800
 8004404:	42470000 	.word	0x42470000
 8004408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ea      	bne.n	80043ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8097 	beq.w	8004554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b81      	ldr	r3, [pc, #516]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	4b7d      	ldr	r3, [pc, #500]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	4a7c      	ldr	r2, [pc, #496]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	6413      	str	r3, [r2, #64]	; 0x40
 8004446:	4b7a      	ldr	r3, [pc, #488]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b77      	ldr	r3, [pc, #476]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d118      	bne.n	8004494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004462:	4b74      	ldr	r3, [pc, #464]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a73      	ldr	r2, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446e:	f7fd f965 	bl	800173c <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004476:	f7fd f961 	bl	800173c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e10c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x2ea>
 800449c:	4b64      	ldr	r3, [pc, #400]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a63      	ldr	r2, [pc, #396]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
 80044a8:	e01c      	b.n	80044e4 <HAL_RCC_OscConfig+0x324>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x30c>
 80044b2:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a5e      	ldr	r2, [pc, #376]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a5b      	ldr	r2, [pc, #364]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0x324>
 80044cc:	4b58      	ldr	r3, [pc, #352]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a57      	ldr	r2, [pc, #348]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
 80044d8:	4b55      	ldr	r3, [pc, #340]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a54      	ldr	r2, [pc, #336]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 0304 	bic.w	r3, r3, #4
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd f926 	bl	800173c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fd f922 	bl	800173c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0cb      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	4b49      	ldr	r3, [pc, #292]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ee      	beq.n	80044f4 <HAL_RCC_OscConfig+0x334>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004518:	f7fd f910 	bl	800173c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fd f90c 	bl	800173c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0b5      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ee      	bne.n	8004520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b39      	ldr	r3, [pc, #228]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	4a38      	ldr	r2, [pc, #224]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a1 	beq.w	80046a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800455e:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b08      	cmp	r3, #8
 8004568:	d05c      	beq.n	8004624 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d141      	bne.n	80045f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b31      	ldr	r3, [pc, #196]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fd f8e0 	bl	800173c <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fd f8dc 	bl	800173c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e087      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	491b      	ldr	r1, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fd f8b5 	bl	800173c <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fd f8b1 	bl	800173c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e05c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x416>
 80045f4:	e054      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fd f89e 	bl	800173c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd f89a 	bl	800173c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e045      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x444>
 8004622:	e03d      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e038      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
 8004638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_OscConfig+0x4ec>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d028      	beq.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d121      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d11a      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004674:	4293      	cmp	r3, r2
 8004676:	d111      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d107      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0cc      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b68      	ldr	r3, [pc, #416]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d90c      	bls.n	80046ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b65      	ldr	r3, [pc, #404]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b63      	ldr	r3, [pc, #396]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0b8      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004704:	4b59      	ldr	r3, [pc, #356]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a58      	ldr	r2, [pc, #352]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800470e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a52      	ldr	r2, [pc, #328]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004728:	4b50      	ldr	r3, [pc, #320]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	494d      	ldr	r1, [pc, #308]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d044      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	4b47      	ldr	r3, [pc, #284]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d119      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e07f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d003      	beq.n	800476e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	2b03      	cmp	r3, #3
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e067      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	4b37      	ldr	r3, [pc, #220]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0203 	bic.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4934      	ldr	r1, [pc, #208]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a0:	f7fc ffcc 	bl	800173c <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fc ffc8 	bl	800173c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e04f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 020c 	and.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1eb      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d20c      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b22      	ldr	r3, [pc, #136]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e032      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004804:	4b19      	ldr	r3, [pc, #100]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4916      	ldr	r1, [pc, #88]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	490e      	ldr	r1, [pc, #56]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004836:	f000 f821 	bl	800487c <HAL_RCC_GetSysClockFreq>
 800483a:	4602      	mov	r2, r0
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	490a      	ldr	r1, [pc, #40]	; (8004870 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	5ccb      	ldrb	r3, [r1, r3]
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fc ff2c 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00
 800486c:	40023800 	.word	0x40023800
 8004870:	0800f7fc 	.word	0x0800f7fc
 8004874:	20000000 	.word	0x20000000
 8004878:	20000004 	.word	0x20000004

0800487c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800487c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004880:	b090      	sub	sp, #64	; 0x40
 8004882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	637b      	str	r3, [r7, #52]	; 0x34
 8004888:	2300      	movs	r3, #0
 800488a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488c:	2300      	movs	r3, #0
 800488e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004894:	4b59      	ldr	r3, [pc, #356]	; (80049fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d00d      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x40>
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	f200 80a1 	bhi.w	80049e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x34>
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ae:	e09b      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80048b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80048b4:	e09b      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b6:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80048b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048ba:	e098      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048bc:	4b4f      	ldr	r3, [pc, #316]	; (80049fc <HAL_RCC_GetSysClockFreq+0x180>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c6:	4b4d      	ldr	r3, [pc, #308]	; (80049fc <HAL_RCC_GetSysClockFreq+0x180>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d028      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d2:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <HAL_RCC_GetSysClockFreq+0x180>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	2200      	movs	r2, #0
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	627a      	str	r2, [r7, #36]	; 0x24
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048e4:	2100      	movs	r1, #0
 80048e6:	4b47      	ldr	r3, [pc, #284]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80048e8:	fb03 f201 	mul.w	r2, r3, r1
 80048ec:	2300      	movs	r3, #0
 80048ee:	fb00 f303 	mul.w	r3, r0, r3
 80048f2:	4413      	add	r3, r2
 80048f4:	4a43      	ldr	r2, [pc, #268]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80048f6:	fba0 1202 	umull	r1, r2, r0, r2
 80048fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fc:	460a      	mov	r2, r1
 80048fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004902:	4413      	add	r3, r2
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004908:	2200      	movs	r2, #0
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	61fa      	str	r2, [r7, #28]
 800490e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004912:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004916:	f7fb fcbb 	bl	8000290 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4613      	mov	r3, r2
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004922:	e053      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004924:	4b35      	ldr	r3, [pc, #212]	; (80049fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	099b      	lsrs	r3, r3, #6
 800492a:	2200      	movs	r2, #0
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	617a      	str	r2, [r7, #20]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004936:	f04f 0b00 	mov.w	fp, #0
 800493a:	4652      	mov	r2, sl
 800493c:	465b      	mov	r3, fp
 800493e:	f04f 0000 	mov.w	r0, #0
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	0159      	lsls	r1, r3, #5
 8004948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800494c:	0150      	lsls	r0, r2, #5
 800494e:	4602      	mov	r2, r0
 8004950:	460b      	mov	r3, r1
 8004952:	ebb2 080a 	subs.w	r8, r2, sl
 8004956:	eb63 090b 	sbc.w	r9, r3, fp
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004966:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800496a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800496e:	ebb2 0408 	subs.w	r4, r2, r8
 8004972:	eb63 0509 	sbc.w	r5, r3, r9
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	00eb      	lsls	r3, r5, #3
 8004980:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004984:	00e2      	lsls	r2, r4, #3
 8004986:	4614      	mov	r4, r2
 8004988:	461d      	mov	r5, r3
 800498a:	eb14 030a 	adds.w	r3, r4, sl
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	eb45 030b 	adc.w	r3, r5, fp
 8004994:	607b      	str	r3, [r7, #4]
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049a2:	4629      	mov	r1, r5
 80049a4:	028b      	lsls	r3, r1, #10
 80049a6:	4621      	mov	r1, r4
 80049a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049ac:	4621      	mov	r1, r4
 80049ae:	028a      	lsls	r2, r1, #10
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b6:	2200      	movs	r2, #0
 80049b8:	60bb      	str	r3, [r7, #8]
 80049ba:	60fa      	str	r2, [r7, #12]
 80049bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c0:	f7fb fc66 	bl	8000290 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4613      	mov	r3, r2
 80049ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <HAL_RCC_GetSysClockFreq+0x180>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	0c1b      	lsrs	r3, r3, #16
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	3301      	adds	r3, #1
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80049dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049e6:	e002      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80049ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3740      	adds	r7, #64	; 0x40
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049fa:	bf00      	nop
 80049fc:	40023800 	.word	0x40023800
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	017d7840 	.word	0x017d7840

08004a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000000 	.word	0x20000000

08004a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a24:	f7ff fff0 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0a9b      	lsrs	r3, r3, #10
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	0800f80c 	.word	0x0800f80c

08004a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e041      	b.n	8004ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fc2a 	bl	80012c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f000 fac0 	bl	800500c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b082      	sub	sp, #8
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e041      	b.n	8004b7c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d106      	bne.n	8004b12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f839 	bl	8004b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2202      	movs	r2, #2
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f000 fa71 	bl	800500c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_TIM_PWM_Start+0x24>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	bf14      	ite	ne
 8004bb4:	2301      	movne	r3, #1
 8004bb6:	2300      	moveq	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e022      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d109      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0x3e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	e015      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d109      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0x58>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	e008      	b.n	8004c02 <HAL_TIM_PWM_Start+0x6a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	bf14      	ite	ne
 8004bfc:	2301      	movne	r3, #1
 8004bfe:	2300      	moveq	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e068      	b.n	8004cdc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x82>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c18:	e013      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x92>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c28:	e00b      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_PWM_Start+0xa2>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c38:	e003      	b.n	8004c42 <HAL_TIM_PWM_Start+0xaa>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2201      	movs	r2, #1
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 fc90 	bl	8005570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_TIM_PWM_Start+0x14c>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <HAL_TIM_PWM_Start+0x14c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d018      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x10e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7c:	d013      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x10e>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <HAL_TIM_PWM_Start+0x150>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00e      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x10e>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a17      	ldr	r2, [pc, #92]	; (8004cec <HAL_TIM_PWM_Start+0x154>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d009      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x10e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a16      	ldr	r2, [pc, #88]	; (8004cf0 <HAL_TIM_PWM_Start+0x158>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d004      	beq.n	8004ca6 <HAL_TIM_PWM_Start+0x10e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <HAL_TIM_PWM_Start+0x15c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d111      	bne.n	8004cca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b06      	cmp	r3, #6
 8004cb6:	d010      	beq.n	8004cda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	e007      	b.n	8004cda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 0201 	orr.w	r2, r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40000c00 	.word	0x40000c00
 8004cf4:	40014000 	.word	0x40014000

08004cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e0ae      	b.n	8004e74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	f200 809f 	bhi.w	8004e64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d61 	.word	0x08004d61
 8004d30:	08004e65 	.word	0x08004e65
 8004d34:	08004e65 	.word	0x08004e65
 8004d38:	08004e65 	.word	0x08004e65
 8004d3c:	08004da1 	.word	0x08004da1
 8004d40:	08004e65 	.word	0x08004e65
 8004d44:	08004e65 	.word	0x08004e65
 8004d48:	08004e65 	.word	0x08004e65
 8004d4c:	08004de3 	.word	0x08004de3
 8004d50:	08004e65 	.word	0x08004e65
 8004d54:	08004e65 	.word	0x08004e65
 8004d58:	08004e65 	.word	0x08004e65
 8004d5c:	08004e23 	.word	0x08004e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f9dc 	bl	8005124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0208 	orr.w	r2, r2, #8
 8004d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0204 	bic.w	r2, r2, #4
 8004d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6999      	ldr	r1, [r3, #24]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	619a      	str	r2, [r3, #24]
      break;
 8004d9e:	e064      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa22 	bl	80051f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6999      	ldr	r1, [r3, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	021a      	lsls	r2, r3, #8
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	619a      	str	r2, [r3, #24]
      break;
 8004de0:	e043      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fa6d 	bl	80052c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f042 0208 	orr.w	r2, r2, #8
 8004dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0204 	bic.w	r2, r2, #4
 8004e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69d9      	ldr	r1, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	61da      	str	r2, [r3, #28]
      break;
 8004e20:	e023      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 fab7 	bl	800539c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69d9      	ldr	r1, [r3, #28]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	021a      	lsls	r2, r3, #8
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	61da      	str	r2, [r3, #28]
      break;
 8004e62:	e002      	b.n	8004e6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	75fb      	strb	r3, [r7, #23]
      break;
 8004e68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_ConfigClockSource+0x1c>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e0b4      	b.n	8005002 <HAL_TIM_ConfigClockSource+0x186>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ebe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed0:	d03e      	beq.n	8004f50 <HAL_TIM_ConfigClockSource+0xd4>
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	f200 8087 	bhi.w	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ede:	f000 8086 	beq.w	8004fee <HAL_TIM_ConfigClockSource+0x172>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	d87f      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b70      	cmp	r3, #112	; 0x70
 8004eea:	d01a      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0xa6>
 8004eec:	2b70      	cmp	r3, #112	; 0x70
 8004eee:	d87b      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b60      	cmp	r3, #96	; 0x60
 8004ef2:	d050      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0x11a>
 8004ef4:	2b60      	cmp	r3, #96	; 0x60
 8004ef6:	d877      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef8:	2b50      	cmp	r3, #80	; 0x50
 8004efa:	d03c      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0xfa>
 8004efc:	2b50      	cmp	r3, #80	; 0x50
 8004efe:	d873      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d058      	beq.n	8004fb6 <HAL_TIM_ConfigClockSource+0x13a>
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d86f      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f08:	2b30      	cmp	r3, #48	; 0x30
 8004f0a:	d064      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f0c:	2b30      	cmp	r3, #48	; 0x30
 8004f0e:	d86b      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d060      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f14:	2b20      	cmp	r3, #32
 8004f16:	d867      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d05c      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d05a      	beq.n	8004fd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004f20:	e062      	b.n	8004fe8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f32:	f000 fafd 	bl	8005530 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	609a      	str	r2, [r3, #8]
      break;
 8004f4e:	e04f      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f60:	f000 fae6 	bl	8005530 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f72:	609a      	str	r2, [r3, #8]
      break;
 8004f74:	e03c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	461a      	mov	r2, r3
 8004f84:	f000 fa5a 	bl	800543c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2150      	movs	r1, #80	; 0x50
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fab3 	bl	80054fa <TIM_ITRx_SetConfig>
      break;
 8004f94:	e02c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f000 fa79 	bl	800549a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2160      	movs	r1, #96	; 0x60
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 faa3 	bl	80054fa <TIM_ITRx_SetConfig>
      break;
 8004fb4:	e01c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f000 fa3a 	bl	800543c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2140      	movs	r1, #64	; 0x40
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fa93 	bl	80054fa <TIM_ITRx_SetConfig>
      break;
 8004fd4:	e00c      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 fa8a 	bl	80054fa <TIM_ITRx_SetConfig>
      break;
 8004fe6:	e003      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
      break;
 8004fec:	e000      	b.n	8004ff0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a3a      	ldr	r2, [pc, #232]	; (8005108 <TIM_Base_SetConfig+0xfc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00f      	beq.n	8005044 <TIM_Base_SetConfig+0x38>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502a:	d00b      	beq.n	8005044 <TIM_Base_SetConfig+0x38>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a37      	ldr	r2, [pc, #220]	; (800510c <TIM_Base_SetConfig+0x100>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d007      	beq.n	8005044 <TIM_Base_SetConfig+0x38>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a36      	ldr	r2, [pc, #216]	; (8005110 <TIM_Base_SetConfig+0x104>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_Base_SetConfig+0x38>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a35      	ldr	r2, [pc, #212]	; (8005114 <TIM_Base_SetConfig+0x108>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d108      	bne.n	8005056 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a2b      	ldr	r2, [pc, #172]	; (8005108 <TIM_Base_SetConfig+0xfc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d01b      	beq.n	8005096 <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005064:	d017      	beq.n	8005096 <TIM_Base_SetConfig+0x8a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a28      	ldr	r2, [pc, #160]	; (800510c <TIM_Base_SetConfig+0x100>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d013      	beq.n	8005096 <TIM_Base_SetConfig+0x8a>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a27      	ldr	r2, [pc, #156]	; (8005110 <TIM_Base_SetConfig+0x104>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00f      	beq.n	8005096 <TIM_Base_SetConfig+0x8a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a26      	ldr	r2, [pc, #152]	; (8005114 <TIM_Base_SetConfig+0x108>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00b      	beq.n	8005096 <TIM_Base_SetConfig+0x8a>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <TIM_Base_SetConfig+0x10c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d007      	beq.n	8005096 <TIM_Base_SetConfig+0x8a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a24      	ldr	r2, [pc, #144]	; (800511c <TIM_Base_SetConfig+0x110>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d003      	beq.n	8005096 <TIM_Base_SetConfig+0x8a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <TIM_Base_SetConfig+0x114>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d108      	bne.n	80050a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0e      	ldr	r2, [pc, #56]	; (8005108 <TIM_Base_SetConfig+0xfc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d103      	bne.n	80050dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d105      	bne.n	80050fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	611a      	str	r2, [r3, #16]
  }
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40010000 	.word	0x40010000
 800510c:	40000400 	.word	0x40000400
 8005110:	40000800 	.word	0x40000800
 8005114:	40000c00 	.word	0x40000c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800

08005124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f023 0201 	bic.w	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0302 	bic.w	r3, r3, #2
 800516c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <TIM_OC1_SetConfig+0xc8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10c      	bne.n	800519a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0308 	bic.w	r3, r3, #8
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 0304 	bic.w	r3, r3, #4
 8005198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <TIM_OC1_SetConfig+0xc8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d111      	bne.n	80051c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40010000 	.word	0x40010000

080051f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f023 0210 	bic.w	r2, r3, #16
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0320 	bic.w	r3, r3, #32
 800523a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1e      	ldr	r2, [pc, #120]	; (80052c4 <TIM_OC2_SetConfig+0xd4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10d      	bne.n	800526c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <TIM_OC2_SetConfig+0xd4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d113      	bne.n	800529c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800527a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000

080052c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a1d      	ldr	r2, [pc, #116]	; (8005398 <TIM_OC3_SetConfig+0xd0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10d      	bne.n	8005342 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800532c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a14      	ldr	r2, [pc, #80]	; (8005398 <TIM_OC3_SetConfig+0xd0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d113      	bne.n	8005372 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	621a      	str	r2, [r3, #32]
}
 800538c:	bf00      	nop
 800538e:	371c      	adds	r7, #28
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40010000 	.word	0x40010000

0800539c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	021b      	lsls	r3, r3, #8
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	031b      	lsls	r3, r3, #12
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a10      	ldr	r2, [pc, #64]	; (8005438 <TIM_OC4_SetConfig+0x9c>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d109      	bne.n	8005410 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000

0800543c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800543c:	b480      	push	{r7}
 800543e:	b087      	sub	sp, #28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0201 	bic.w	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 030a 	bic.w	r3, r3, #10
 8005478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	621a      	str	r2, [r3, #32]
}
 800548e:	bf00      	nop
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f023 0210 	bic.w	r2, r3, #16
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	031b      	lsls	r3, r3, #12
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	621a      	str	r2, [r3, #32]
}
 80054ee:	bf00      	nop
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005510:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	f043 0307 	orr.w	r3, r3, #7
 800551c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	609a      	str	r2, [r3, #8]
}
 8005524:	bf00      	nop
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800554a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	021a      	lsls	r2, r3, #8
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	431a      	orrs	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	609a      	str	r2, [r3, #8]
}
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	2201      	movs	r2, #1
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1a      	ldr	r2, [r3, #32]
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	43db      	mvns	r3, r3
 8005592:	401a      	ands	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	fa01 f303 	lsl.w	r3, r1, r3
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e050      	b.n	8005676 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d013      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a16      	ldr	r2, [pc, #88]	; (800568c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a13      	ldr	r2, [pc, #76]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10c      	bne.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4313      	orrs	r3, r2
 800565a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40010000 	.word	0x40010000
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40014000 	.word	0x40014000

08005698 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005698:	b084      	sub	sp, #16
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	f107 001c 	add.w	r0, r7, #28
 80056a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d123      	bne.n	80056fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80056c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d105      	bne.n	80056ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fae2 	bl	8006cb8 <USB_CoreReset>
 80056f4:	4603      	mov	r3, r0
 80056f6:	73fb      	strb	r3, [r7, #15]
 80056f8:	e01b      	b.n	8005732 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 fad6 	bl	8006cb8 <USB_CoreReset>
 800570c:	4603      	mov	r3, r0
 800570e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005710:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005714:	2b00      	cmp	r3, #0
 8005716:	d106      	bne.n	8005726 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
 8005724:	e005      	b.n	8005732 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005732:	7fbb      	ldrb	r3, [r7, #30]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10b      	bne.n	8005750 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f043 0206 	orr.w	r2, r3, #6
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f043 0220 	orr.w	r2, r3, #32
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005750:	7bfb      	ldrb	r3, [r7, #15]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800575c:	b004      	add	sp, #16
 800575e:	4770      	bx	lr

08005760 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d165      	bne.n	8005840 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4a41      	ldr	r2, [pc, #260]	; (800587c <USB_SetTurnaroundTime+0x11c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d906      	bls.n	800578a <USB_SetTurnaroundTime+0x2a>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4a40      	ldr	r2, [pc, #256]	; (8005880 <USB_SetTurnaroundTime+0x120>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d202      	bcs.n	800578a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005784:	230f      	movs	r3, #15
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	e062      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4a3c      	ldr	r2, [pc, #240]	; (8005880 <USB_SetTurnaroundTime+0x120>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d306      	bcc.n	80057a0 <USB_SetTurnaroundTime+0x40>
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4a3b      	ldr	r2, [pc, #236]	; (8005884 <USB_SetTurnaroundTime+0x124>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d202      	bcs.n	80057a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800579a:	230e      	movs	r3, #14
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e057      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4a38      	ldr	r2, [pc, #224]	; (8005884 <USB_SetTurnaroundTime+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d306      	bcc.n	80057b6 <USB_SetTurnaroundTime+0x56>
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4a37      	ldr	r2, [pc, #220]	; (8005888 <USB_SetTurnaroundTime+0x128>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d202      	bcs.n	80057b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057b0:	230d      	movs	r3, #13
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	e04c      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	4a33      	ldr	r2, [pc, #204]	; (8005888 <USB_SetTurnaroundTime+0x128>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d306      	bcc.n	80057cc <USB_SetTurnaroundTime+0x6c>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4a32      	ldr	r2, [pc, #200]	; (800588c <USB_SetTurnaroundTime+0x12c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d802      	bhi.n	80057cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057c6:	230c      	movs	r3, #12
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	e041      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4a2f      	ldr	r2, [pc, #188]	; (800588c <USB_SetTurnaroundTime+0x12c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d906      	bls.n	80057e2 <USB_SetTurnaroundTime+0x82>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4a2e      	ldr	r2, [pc, #184]	; (8005890 <USB_SetTurnaroundTime+0x130>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d802      	bhi.n	80057e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057dc:	230b      	movs	r3, #11
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e036      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4a2a      	ldr	r2, [pc, #168]	; (8005890 <USB_SetTurnaroundTime+0x130>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d906      	bls.n	80057f8 <USB_SetTurnaroundTime+0x98>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4a29      	ldr	r2, [pc, #164]	; (8005894 <USB_SetTurnaroundTime+0x134>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d802      	bhi.n	80057f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057f2:	230a      	movs	r3, #10
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	e02b      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	4a26      	ldr	r2, [pc, #152]	; (8005894 <USB_SetTurnaroundTime+0x134>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d906      	bls.n	800580e <USB_SetTurnaroundTime+0xae>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4a25      	ldr	r2, [pc, #148]	; (8005898 <USB_SetTurnaroundTime+0x138>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d202      	bcs.n	800580e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005808:	2309      	movs	r3, #9
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	e020      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	4a21      	ldr	r2, [pc, #132]	; (8005898 <USB_SetTurnaroundTime+0x138>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d306      	bcc.n	8005824 <USB_SetTurnaroundTime+0xc4>
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4a20      	ldr	r2, [pc, #128]	; (800589c <USB_SetTurnaroundTime+0x13c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d802      	bhi.n	8005824 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800581e:	2308      	movs	r3, #8
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	e015      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4a1d      	ldr	r2, [pc, #116]	; (800589c <USB_SetTurnaroundTime+0x13c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d906      	bls.n	800583a <USB_SetTurnaroundTime+0xda>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <USB_SetTurnaroundTime+0x140>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d202      	bcs.n	800583a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005834:	2307      	movs	r3, #7
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e00a      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800583a:	2306      	movs	r3, #6
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	e007      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005846:	2309      	movs	r3, #9
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e001      	b.n	8005850 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800584c:	2309      	movs	r3, #9
 800584e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	029b      	lsls	r3, r3, #10
 8005864:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005868:	431a      	orrs	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	00d8acbf 	.word	0x00d8acbf
 8005880:	00e4e1c0 	.word	0x00e4e1c0
 8005884:	00f42400 	.word	0x00f42400
 8005888:	01067380 	.word	0x01067380
 800588c:	011a499f 	.word	0x011a499f
 8005890:	01312cff 	.word	0x01312cff
 8005894:	014ca43f 	.word	0x014ca43f
 8005898:	016e3600 	.word	0x016e3600
 800589c:	01a6ab1f 	.word	0x01a6ab1f
 80058a0:	01e84800 	.word	0x01e84800

080058a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f043 0201 	orr.w	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d115      	bne.n	8005936 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005916:	200a      	movs	r0, #10
 8005918:	f7fb ff1c 	bl	8001754 <HAL_Delay>
      ms += 10U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	330a      	adds	r3, #10
 8005920:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f001 f939 	bl	8006b9a <USB_GetMode>
 8005928:	4603      	mov	r3, r0
 800592a:	2b01      	cmp	r3, #1
 800592c:	d01e      	beq.n	800596c <USB_SetCurrentMode+0x84>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2bc7      	cmp	r3, #199	; 0xc7
 8005932:	d9f0      	bls.n	8005916 <USB_SetCurrentMode+0x2e>
 8005934:	e01a      	b.n	800596c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005936:	78fb      	ldrb	r3, [r7, #3]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d115      	bne.n	8005968 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005948:	200a      	movs	r0, #10
 800594a:	f7fb ff03 	bl	8001754 <HAL_Delay>
      ms += 10U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	330a      	adds	r3, #10
 8005952:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 f920 	bl	8006b9a <USB_GetMode>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <USB_SetCurrentMode+0x84>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2bc7      	cmp	r3, #199	; 0xc7
 8005964:	d9f0      	bls.n	8005948 <USB_SetCurrentMode+0x60>
 8005966:	e001      	b.n	800596c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e005      	b.n	8005978 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2bc8      	cmp	r3, #200	; 0xc8
 8005970:	d101      	bne.n	8005976 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005980:	b084      	sub	sp, #16
 8005982:	b580      	push	{r7, lr}
 8005984:	b086      	sub	sp, #24
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800598e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	e009      	b.n	80059b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3340      	adds	r3, #64	; 0x40
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3301      	adds	r3, #1
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b0e      	cmp	r3, #14
 80059b8:	d9f2      	bls.n	80059a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d11c      	bne.n	80059fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d0:	f043 0302 	orr.w	r3, r3, #2
 80059d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	639a      	str	r2, [r3, #56]	; 0x38
 80059fa:	e00b      	b.n	8005a14 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d10d      	bne.n	8005a44 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a30:	2100      	movs	r1, #0
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f968 	bl	8005d08 <USB_SetDevSpeed>
 8005a38:	e008      	b.n	8005a4c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f963 	bl	8005d08 <USB_SetDevSpeed>
 8005a42:	e003      	b.n	8005a4c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a44:	2103      	movs	r1, #3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f95e 	bl	8005d08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a4c:	2110      	movs	r1, #16
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f8fa 	bl	8005c48 <USB_FlushTxFifo>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f924 	bl	8005cac <USB_FlushRxFifo>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	461a      	mov	r2, r3
 8005a76:	2300      	movs	r3, #0
 8005a78:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a80:	461a      	mov	r2, r3
 8005a82:	2300      	movs	r3, #0
 8005a84:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	e043      	b.n	8005b20 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aae:	d118      	bne.n	8005ae2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	e013      	b.n	8005af4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e008      	b.n	8005af4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	461a      	mov	r2, r3
 8005af0:	2300      	movs	r3, #0
 8005af2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	461a      	mov	r2, r3
 8005b02:	2300      	movs	r3, #0
 8005b04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	461a      	mov	r2, r3
 8005b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	613b      	str	r3, [r7, #16]
 8005b20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b24:	461a      	mov	r2, r3
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d3b5      	bcc.n	8005a98 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	e043      	b.n	8005bba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b48:	d118      	bne.n	8005b7c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	e013      	b.n	8005b8e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b72:	461a      	mov	r2, r3
 8005b74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	e008      	b.n	8005b8e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b88:	461a      	mov	r2, r3
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bac:	461a      	mov	r2, r3
 8005bae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bb2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d3b5      	bcc.n	8005b32 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005be6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005be8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f043 0210 	orr.w	r2, r3, #16
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	699a      	ldr	r2, [r3, #24]
 8005c00:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <USB_DevInit+0x2c4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c08:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	f043 0208 	orr.w	r2, r3, #8
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d107      	bne.n	8005c34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c2c:	f043 0304 	orr.w	r3, r3, #4
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c40:	b004      	add	sp, #16
 8005c42:	4770      	bx	lr
 8005c44:	803c3800 	.word	0x803c3800

08005c48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c62:	d901      	bls.n	8005c68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e01b      	b.n	8005ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	daf2      	bge.n	8005c56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	019b      	lsls	r3, r3, #6
 8005c78:	f043 0220 	orr.w	r2, r3, #32
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005c8c:	d901      	bls.n	8005c92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e006      	b.n	8005ca0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d0f0      	beq.n	8005c80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005cc4:	d901      	bls.n	8005cca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e018      	b.n	8005cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	daf2      	bge.n	8005cb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2210      	movs	r2, #16
 8005cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005ce8:	d901      	bls.n	8005cee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e006      	b.n	8005cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0310 	and.w	r3, r3, #16
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d0f0      	beq.n	8005cdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b087      	sub	sp, #28
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 0306 	and.w	r3, r3, #6
 8005d52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]
 8005d5e:	e00a      	b.n	8005d76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d002      	beq.n	8005d6c <USB_GetDevSpeed+0x32>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b06      	cmp	r3, #6
 8005d6a:	d102      	bne.n	8005d72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	75fb      	strb	r3, [r7, #23]
 8005d70:	e001      	b.n	8005d76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d72:	230f      	movs	r3, #15
 8005d74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	785b      	ldrb	r3, [r3, #1]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d13a      	bne.n	8005e16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	f003 030f 	and.w	r3, r3, #15
 8005db0:	2101      	movs	r1, #1
 8005db2:	fa01 f303 	lsl.w	r3, r1, r3
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	68f9      	ldr	r1, [r7, #12]
 8005dba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d155      	bne.n	8005e84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	791b      	ldrb	r3, [r3, #4]
 8005df2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005df4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	059b      	lsls	r3, r3, #22
 8005dfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e036      	b.n	8005e84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1c:	69da      	ldr	r2, [r3, #28]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	2101      	movs	r1, #1
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	68f9      	ldr	r1, [r7, #12]
 8005e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d11a      	bne.n	8005e84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	791b      	ldrb	r3, [r3, #4]
 8005e68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e6a:	430b      	orrs	r3, r1
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
	...

08005e94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	785b      	ldrb	r3, [r3, #1]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d161      	bne.n	8005f74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ec6:	d11f      	bne.n	8005f08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ee6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	2101      	movs	r1, #1
 8005f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	43db      	mvns	r3, r3
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f28:	4013      	ands	r3, r2
 8005f2a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	f003 030f 	and.w	r3, r3, #15
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	43db      	mvns	r3, r3
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	0159      	lsls	r1, r3, #5
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	440b      	add	r3, r1
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4b35      	ldr	r3, [pc, #212]	; (8006044 <USB_DeactivateEndpoint+0x1b0>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]
 8005f72:	e060      	b.n	8006036 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f8a:	d11f      	bne.n	8005fcc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005faa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	2101      	movs	r1, #1
 8005fde:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fec:	4013      	ands	r3, r2
 8005fee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff6:	69da      	ldr	r2, [r3, #28]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	2101      	movs	r1, #1
 8006002:	fa01 f303 	lsl.w	r3, r1, r3
 8006006:	041b      	lsls	r3, r3, #16
 8006008:	43db      	mvns	r3, r3
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006010:	4013      	ands	r3, r2
 8006012:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	0159      	lsls	r1, r3, #5
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	440b      	add	r3, r1
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	4619      	mov	r1, r3
 8006030:	4b05      	ldr	r3, [pc, #20]	; (8006048 <USB_DeactivateEndpoint+0x1b4>)
 8006032:	4013      	ands	r3, r2
 8006034:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	ec337800 	.word	0xec337800
 8006048:	eff37800 	.word	0xeff37800

0800604c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08a      	sub	sp, #40	; 0x28
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	4613      	mov	r3, r2
 8006058:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b01      	cmp	r3, #1
 800606a:	f040 817a 	bne.w	8006362 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d132      	bne.n	80060dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006090:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006094:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006098:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d4:	0cdb      	lsrs	r3, r3, #19
 80060d6:	04db      	lsls	r3, r3, #19
 80060d8:	6113      	str	r3, [r2, #16]
 80060da:	e092      	b.n	8006202 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f6:	0cdb      	lsrs	r3, r3, #19
 80060f8:	04db      	lsls	r3, r3, #19
 80060fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	69fa      	ldr	r2, [r7, #28]
 8006110:	440a      	add	r2, r1
 8006112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006116:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800611a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800611e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d11a      	bne.n	800615c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	d903      	bls.n	800613a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	0151      	lsls	r1, r2, #5
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	440a      	add	r2, r1
 8006150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006158:	6113      	str	r3, [r2, #16]
 800615a:	e01b      	b.n	8006194 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	6919      	ldr	r1, [r3, #16]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	440b      	add	r3, r1
 8006174:	1e59      	subs	r1, r3, #1
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	fbb1 f3f3 	udiv	r3, r1, r3
 800617e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006180:	4ba2      	ldr	r3, [pc, #648]	; (800640c <USB_EPStartXfer+0x3c0>)
 8006182:	400b      	ands	r3, r1
 8006184:	69b9      	ldr	r1, [r7, #24]
 8006186:	0148      	lsls	r0, r1, #5
 8006188:	69f9      	ldr	r1, [r7, #28]
 800618a:	4401      	add	r1, r0
 800618c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006190:	4313      	orrs	r3, r2
 8006192:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061aa:	69b9      	ldr	r1, [r7, #24]
 80061ac:	0148      	lsls	r0, r1, #5
 80061ae:	69f9      	ldr	r1, [r7, #28]
 80061b0:	4401      	add	r1, r0
 80061b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061b6:	4313      	orrs	r3, r2
 80061b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	791b      	ldrb	r3, [r3, #4]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d11f      	bne.n	8006202 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006200:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d14b      	bne.n	80062a0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	791b      	ldrb	r3, [r3, #4]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d128      	bne.n	800627e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d110      	bne.n	800625e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	e00f      	b.n	800627e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800627c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	440a      	add	r2, r1
 8006294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e165      	b.n	800656c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	015a      	lsls	r2, r3, #5
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	4413      	add	r3, r2
 80062a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	0151      	lsls	r1, r2, #5
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	440a      	add	r2, r1
 80062b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	791b      	ldrb	r3, [r3, #4]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d015      	beq.n	80062f4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 814d 	beq.w	800656c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	2101      	movs	r1, #1
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	69f9      	ldr	r1, [r7, #28]
 80062ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ee:	4313      	orrs	r3, r2
 80062f0:	634b      	str	r3, [r1, #52]	; 0x34
 80062f2:	e13b      	b.n	800656c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d110      	bne.n	8006326 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	015a      	lsls	r2, r3, #5
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	4413      	add	r3, r2
 800630c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	0151      	lsls	r1, r2, #5
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	440a      	add	r2, r1
 800631a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e00f      	b.n	8006346 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006344:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	68d9      	ldr	r1, [r3, #12]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	781a      	ldrb	r2, [r3, #0]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	b298      	uxth	r0, r3
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	4603      	mov	r3, r0
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f9b8 	bl	80066d0 <USB_WritePacket>
 8006360:	e104      	b.n	800656c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637c:	0cdb      	lsrs	r3, r3, #19
 800637e:	04db      	lsls	r3, r3, #19
 8006380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	440a      	add	r2, r1
 8006398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800639c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063a4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d131      	bne.n	8006410 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d003      	beq.n	80063bc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d0:	691a      	ldr	r2, [r3, #16]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063da:	69b9      	ldr	r1, [r7, #24]
 80063dc:	0148      	lsls	r0, r1, #5
 80063de:	69f9      	ldr	r1, [r7, #28]
 80063e0:	4401      	add	r1, r0
 80063e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063e6:	4313      	orrs	r3, r2
 80063e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	0151      	lsls	r1, r2, #5
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	440a      	add	r2, r1
 8006400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006404:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006408:	6113      	str	r3, [r2, #16]
 800640a:	e061      	b.n	80064d0 <USB_EPStartXfer+0x484>
 800640c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d123      	bne.n	8006460 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642e:	69b9      	ldr	r1, [r7, #24]
 8006430:	0148      	lsls	r0, r1, #5
 8006432:	69f9      	ldr	r1, [r7, #28]
 8006434:	4401      	add	r1, r0
 8006436:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800643a:	4313      	orrs	r3, r2
 800643c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006458:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800645c:	6113      	str	r3, [r2, #16]
 800645e:	e037      	b.n	80064d0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	4413      	add	r3, r2
 800646a:	1e5a      	subs	r2, r3, #1
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	fbb2 f3f3 	udiv	r3, r2, r3
 8006474:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	8afa      	ldrh	r2, [r7, #22]
 800647c:	fb03 f202 	mul.w	r2, r3, r2
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4413      	add	r3, r2
 800648c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006490:	691a      	ldr	r2, [r3, #16]
 8006492:	8afb      	ldrh	r3, [r7, #22]
 8006494:	04d9      	lsls	r1, r3, #19
 8006496:	4b38      	ldr	r3, [pc, #224]	; (8006578 <USB_EPStartXfer+0x52c>)
 8006498:	400b      	ands	r3, r1
 800649a:	69b9      	ldr	r1, [r7, #24]
 800649c:	0148      	lsls	r0, r1, #5
 800649e:	69f9      	ldr	r1, [r7, #28]
 80064a0:	4401      	add	r1, r0
 80064a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064a6:	4313      	orrs	r3, r2
 80064a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c0:	69b9      	ldr	r1, [r7, #24]
 80064c2:	0148      	lsls	r0, r1, #5
 80064c4:	69f9      	ldr	r1, [r7, #28]
 80064c6:	4401      	add	r1, r0
 80064c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064cc:	4313      	orrs	r3, r2
 80064ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d10d      	bne.n	80064f2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	68d9      	ldr	r1, [r3, #12]
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	460a      	mov	r2, r1
 80064f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	791b      	ldrb	r3, [r3, #4]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d128      	bne.n	800654c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d110      	bne.n	800652c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	e00f      	b.n	800654c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800654a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800656a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	1ff80000 	.word	0x1ff80000

0800657c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d14a      	bne.n	8006630 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065b2:	f040 8086 	bne.w	80066c2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	7812      	ldrb	r2, [r2, #0]
 80065ca:	0151      	lsls	r1, r2, #5
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	440a      	add	r2, r1
 80065d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	7812      	ldrb	r2, [r2, #0]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f242 7210 	movw	r2, #10000	; 0x2710
 800660a:	4293      	cmp	r3, r2
 800660c:	d902      	bls.n	8006614 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	75fb      	strb	r3, [r7, #23]
          break;
 8006612:	e056      	b.n	80066c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800662c:	d0e7      	beq.n	80065fe <USB_EPStopXfer+0x82>
 800662e:	e048      	b.n	80066c2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006648:	d13b      	bne.n	80066c2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	7812      	ldrb	r2, [r2, #0]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006668:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800666c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006690:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3301      	adds	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f242 7210 	movw	r2, #10000	; 0x2710
 800669e:	4293      	cmp	r3, r2
 80066a0:	d902      	bls.n	80066a8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	75fb      	strb	r3, [r7, #23]
          break;
 80066a6:	e00c      	b.n	80066c2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c0:	d0e7      	beq.n	8006692 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b089      	sub	sp, #36	; 0x24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	460b      	mov	r3, r1
 80066e0:	71fb      	strb	r3, [r7, #7]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d123      	bne.n	800673e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066f6:	88bb      	ldrh	r3, [r7, #4]
 80066f8:	3303      	adds	r3, #3
 80066fa:	089b      	lsrs	r3, r3, #2
 80066fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	e018      	b.n	8006736 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	031a      	lsls	r2, r3, #12
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	4413      	add	r3, r2
 800670c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006710:	461a      	mov	r2, r3
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	3301      	adds	r3, #1
 800671c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	3301      	adds	r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	3301      	adds	r3, #1
 8006728:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3301      	adds	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	3301      	adds	r3, #1
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	69ba      	ldr	r2, [r7, #24]
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	429a      	cmp	r2, r3
 800673c:	d3e2      	bcc.n	8006704 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3724      	adds	r7, #36	; 0x24
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800674c:	b480      	push	{r7}
 800674e:	b08b      	sub	sp, #44	; 0x2c
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	089b      	lsrs	r3, r3, #2
 8006766:	b29b      	uxth	r3, r3
 8006768:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006772:	2300      	movs	r3, #0
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	e014      	b.n	80067a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	601a      	str	r2, [r3, #0]
    pDest++;
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	3301      	adds	r3, #1
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	3301      	adds	r3, #1
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	3301      	adds	r3, #1
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	3301      	adds	r3, #1
 800679a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	3301      	adds	r3, #1
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	6a3a      	ldr	r2, [r7, #32]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d3e6      	bcc.n	8006778 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067aa:	8bfb      	ldrh	r3, [r7, #30]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01e      	beq.n	80067ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ba:	461a      	mov	r2, r3
 80067bc:	f107 0310 	add.w	r3, r7, #16
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	fa22 f303 	lsr.w	r3, r2, r3
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	701a      	strb	r2, [r3, #0]
      i++;
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	3301      	adds	r3, #1
 80067da:	623b      	str	r3, [r7, #32]
      pDest++;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	3301      	adds	r3, #1
 80067e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067e2:	8bfb      	ldrh	r3, [r7, #30]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067e8:	8bfb      	ldrh	r3, [r7, #30]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ea      	bne.n	80067c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	372c      	adds	r7, #44	; 0x2c
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d12c      	bne.n	8006872 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	db12      	blt.n	8006850 <USB_EPSetStall+0x54>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00f      	beq.n	8006850 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800684a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800684e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e02b      	b.n	80068ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	db12      	blt.n	80068aa <USB_EPSetStall+0xae>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00f      	beq.n	80068aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d128      	bne.n	8006946 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	0151      	lsls	r1, r2, #5
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	440a      	add	r2, r1
 800690a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006912:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	791b      	ldrb	r3, [r3, #4]
 8006918:	2b03      	cmp	r3, #3
 800691a:	d003      	beq.n	8006924 <USB_EPClearStall+0x4c>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	791b      	ldrb	r3, [r3, #4]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d138      	bne.n	8006996 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	e027      	b.n	8006996 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	0151      	lsls	r1, r2, #5
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	440a      	add	r2, r1
 800695c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006964:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	791b      	ldrb	r3, [r3, #4]
 800696a:	2b03      	cmp	r3, #3
 800696c:	d003      	beq.n	8006976 <USB_EPClearStall+0x9e>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	791b      	ldrb	r3, [r3, #4]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d10f      	bne.n	8006996 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006994:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80069c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80069d8:	68f9      	ldr	r1, [r7, #12]
 80069da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a1e:	f023 0302 	bic.w	r3, r3, #2
 8006a22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b085      	sub	sp, #20
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a4c:	f023 0303 	bic.w	r3, r3, #3
 8006a50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a60:	f043 0302 	orr.w	r3, r3, #2
 8006a64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	4013      	ands	r3, r2
 8006abc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	0c1b      	lsrs	r3, r3, #16
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	4013      	ands	r3, r2
 8006af0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	b29b      	uxth	r3, r3
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b12:	78fb      	ldrb	r3, [r7, #3]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b30:	68bb      	ldr	r3, [r7, #8]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6e:	01db      	lsls	r3, r3, #7
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b78:	78fb      	ldrb	r3, [r7, #3]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006bd4:	f023 0307 	bic.w	r3, r3, #7
 8006bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	460b      	mov	r3, r1
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	333c      	adds	r3, #60	; 0x3c
 8006c12:	3304      	adds	r3, #4
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	4a26      	ldr	r2, [pc, #152]	; (8006cb4 <USB_EP0_OutStart+0xb8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d90a      	bls.n	8006c36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c30:	d101      	bne.n	8006c36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e037      	b.n	8006ca6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c64:	f043 0318 	orr.w	r3, r3, #24
 8006c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c7e:	7afb      	ldrb	r3, [r7, #11]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d10f      	bne.n	8006ca4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006ca2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	4f54300a 	.word	0x4f54300a

08006cb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006cd0:	d901      	bls.n	8006cd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e01b      	b.n	8006d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	daf2      	bge.n	8006cc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006cfa:	d901      	bls.n	8006d00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e006      	b.n	8006d0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d0f0      	beq.n	8006cee <USB_CoreReset+0x36>

  return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter) {
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 fd14 	bl	8008758 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006d30:	4603      	mov	r3, r0
 8006d32:	73fb      	strb	r3, [r7, #15]
			pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <VL53L0X_DataInit>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev) {
 8006d40:	b5b0      	push	{r4, r5, r7, lr}
 8006d42:	b096      	sub	sp, #88	; 0x58
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	LOG_FUNCTION_START("");

	/* by default the I2C is running at 1V8 if you want to change it you
	 * need to include this define at compilation level. */
#ifdef USE_I2C_2V8
	Status = VL53L0X_UpdateByte(Dev,
 8006d4e:	2301      	movs	r3, #1
 8006d50:	22fe      	movs	r2, #254	; 0xfe
 8006d52:	2189      	movs	r1, #137	; 0x89
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f004 fc89 	bl	800b66c <VL53L0X_UpdateByte>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, 0xFE, 0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006d60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d107      	bne.n	8006d78 <VL53L0X_DataInit+0x38>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2188      	movs	r1, #136	; 0x88
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f004 fc2f 	bl	800b5d0 <VL53L0X_WrByte>
 8006d72:	4603      	mov	r3, r0
 8006d74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* read WHO_AM_I */
	uint8_t b;
	Status = VL53L0X_RdByte(Dev, 0xC0, &b);
 8006d78:	f107 030e 	add.w	r3, r7, #14
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	21c0      	movs	r1, #192	; 0xc0
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f004 fca7 	bl	800b6d4 <VL53L0X_RdByte>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	// Serial.print("WHOAMI: 0x"); Serial.println(b, HEX);

	/* read WHO_AM_I */

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  if (Status == VL53L0X_ERROR_NONE)
    Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d9a:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006da4:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a9e      	ldr	r2, [pc, #632]	; (8007024 <VL53L0X_DataInit+0x2e4>)
 8006dac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
			(FixPoint1616_t )((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a9d      	ldr	r2, [pc, #628]	; (8007028 <VL53L0X_DataInit+0x2e8>)
 8006db4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006dbe:	f107 0310 	add.w	r3, r7, #16
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 faed 	bl	80073a4 <VL53L0X_GetDeviceParameters>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE) {
 8006dd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d112      	bne.n	8006dfe <VL53L0X_DataInit+0xbe>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f103 0410 	add.w	r4, r3, #16
 8006de6:	f107 0510 	add.w	r5, r7, #16
 8006dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006df6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2264      	movs	r2, #100	; 0x64
 8006e02:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006e0c:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006e16:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006e20:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	2180      	movs	r1, #128	; 0x80
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f004 fbcd 	bl	800b5d0 <VL53L0X_WrByte>
 8006e36:	4603      	mov	r3, r0
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e44:	2201      	movs	r2, #1
 8006e46:	21ff      	movs	r1, #255	; 0xff
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f004 fbc1 	bl	800b5d0 <VL53L0X_WrByte>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	461a      	mov	r2, r3
 8006e52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f004 fbb5 	bl	800b5d0 <VL53L0X_WrByte>
 8006e66:	4603      	mov	r3, r0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006e74:	f107 030f 	add.w	r3, r7, #15
 8006e78:	461a      	mov	r2, r3
 8006e7a:	2191      	movs	r1, #145	; 0x91
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f004 fc29 	bl	800b6d4 <VL53L0X_RdByte>
 8006e82:	4603      	mov	r3, r0
 8006e84:	461a      	mov	r2, r3
 8006e86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006e90:	7bfa      	ldrb	r2, [r7, #15]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006e98:	2201      	movs	r2, #1
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f004 fb97 	bl	800b5d0 <VL53L0X_WrByte>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	21ff      	movs	r1, #255	; 0xff
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f004 fb8b 	bl	800b5d0 <VL53L0X_WrByte>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006ec8:	2200      	movs	r2, #0
 8006eca:	2180      	movs	r1, #128	; 0x80
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f004 fb7f 	bl	800b5d0 <VL53L0X_WrByte>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006eda:	4313      	orrs	r3, r2
 8006edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ee4:	e014      	b.n	8006f10 <VL53L0X_DataInit+0x1d0>
		if (Status == VL53L0X_ERROR_NONE)
 8006ee6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d114      	bne.n	8006f18 <VL53L0X_DataInit+0x1d8>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fd86 	bl	8007a08 <VL53L0X_SetLimitCheckEnable>
 8006efc:	4603      	mov	r3, r0
 8006efe:	461a      	mov	r2, r3
 8006f00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f04:	4313      	orrs	r3, r2
 8006f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f12:	2b05      	cmp	r3, #5
 8006f14:	dde7      	ble.n	8006ee6 <VL53L0X_DataInit+0x1a6>
 8006f16:	e000      	b.n	8006f1a <VL53L0X_DataInit+0x1da>
		else
			break;
 8006f18:	bf00      	nop
	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006f1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <VL53L0X_DataInit+0x1f2>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006f22:	2200      	movs	r2, #0
 8006f24:	2102      	movs	r1, #2
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fd6e 	bl	8007a08 <VL53L0X_SetLimitCheckEnable>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006f32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d107      	bne.n	8006f4a <VL53L0X_DataInit+0x20a>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2103      	movs	r1, #3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fd62 	bl	8007a08 <VL53L0X_SetLimitCheckEnable>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006f4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d107      	bne.n	8006f62 <VL53L0X_DataInit+0x222>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006f52:	2200      	movs	r2, #0
 8006f54:	2104      	movs	r1, #4
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fd56 	bl	8007a08 <VL53L0X_SetLimitCheckEnable>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006f62:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d107      	bne.n	8006f7a <VL53L0X_DataInit+0x23a>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2105      	movs	r1, #5
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fd4a 	bl	8007a08 <VL53L0X_SetLimitCheckEnable>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006f7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d108      	bne.n	8006f94 <VL53L0X_DataInit+0x254>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006f82:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006f86:	2100      	movs	r1, #0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fded 	bl	8007b68 <VL53L0X_SetLimitCheckValue>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t) (18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006f94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d108      	bne.n	8006fae <VL53L0X_DataInit+0x26e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006f9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fde0 	bl	8007b68 <VL53L0X_SetLimitCheckValue>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t) (25 * 65536 / 100));
		/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d108      	bne.n	8006fc8 <VL53L0X_DataInit+0x288>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006fb6:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006fba:	2102      	movs	r1, #2
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fdd3 	bl	8007b68 <VL53L0X_SetLimitCheckValue>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t) (35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d107      	bne.n	8006fe0 <VL53L0X_DataInit+0x2a0>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2103      	movs	r1, #3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fdc7 	bl	8007b68 <VL53L0X_SetLimitCheckValue>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t) (0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fe0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10f      	bne.n	8007008 <VL53L0X_DataInit+0x2c8>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	22ff      	movs	r2, #255	; 0xff
 8006fec:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8006ff0:	22ff      	movs	r2, #255	; 0xff
 8006ff2:	2101      	movs	r1, #1
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f004 faeb 	bl	800b5d0 <VL53L0X_WrByte>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007008:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800700c:	2b00      	cmp	r3, #0
 800700e:	d103      	bne.n	8007018 <VL53L0X_DataInit+0x2d8>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

	LOG_FUNCTION_END(Status);
	return Status;
 8007018:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800701c:	4618      	mov	r0, r3
 800701e:	3758      	adds	r7, #88	; 0x58
 8007020:	46bd      	mov	sp, r7
 8007022:	bdb0      	pop	{r4, r5, r7, pc}
 8007024:	00016b85 	.word	0x00016b85
 8007028:	000970a4 	.word	0x000970a4

0800702c <VL53L0X_StaticInit>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev) {
 800702c:	b5b0      	push	{r4, r5, r7, lr}
 800702e:	b09e      	sub	sp, #120	; 0x78
 8007030:	af02      	add	r7, sp, #8
 8007032:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007034:	2300      	movs	r3, #0
 8007036:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters;
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8007050:	2300      	movs	r3, #0
 8007052:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800705a:	2101      	movs	r1, #1
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f002 fabc 	bl	80095da <VL53L0X_get_info_from_device>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count = (uint32_t) VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800706e:	663b      	str	r3, [r7, #96]	; 0x60
			ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007076:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/* NVM value invalid */
	if ((ApertureSpads > 1) || ((ApertureSpads == 1) && (count > 32))
 800707a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800707e:	2b01      	cmp	r3, #1
 8007080:	d80d      	bhi.n	800709e <VL53L0X_StaticInit+0x72>
 8007082:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007086:	2b01      	cmp	r3, #1
 8007088:	d102      	bne.n	8007090 <VL53L0X_StaticInit+0x64>
 800708a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800708c:	2b20      	cmp	r3, #32
 800708e:	d806      	bhi.n	800709e <VL53L0X_StaticInit+0x72>
			|| ((ApertureSpads == 0) && (count > 12)))
 8007090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10e      	bne.n	80070b6 <VL53L0X_StaticInit+0x8a>
 8007098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800709a:	2b0c      	cmp	r3, #12
 800709c:	d90b      	bls.n	80070b6 <VL53L0X_StaticInit+0x8a>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800709e:	f107 0218 	add.w	r2, r7, #24
 80070a2:	f107 0314 	add.w	r3, r7, #20
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 fd51 	bl	8008b50 <VL53L0X_perform_ref_spad_management>
 80070ae:	4603      	mov	r3, r0
 80070b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80070b4:	e009      	b.n	80070ca <VL53L0X_StaticInit+0x9e>
				&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80070b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070ba:	461a      	mov	r2, r3
 80070bc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 ff52 	bl	8008f68 <VL53L0X_set_reference_spads>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80070ca:	4b94      	ldr	r3, [pc, #592]	; (800731c <VL53L0X_StaticInit+0x2f0>)
 80070cc:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80070ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10f      	bne.n	80070f6 <VL53L0X_StaticInit+0xca>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80070dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80070e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <VL53L0X_StaticInit+0xc6>
			pTuningSettingBuffer = PALDevDataGet(Dev, pTuningSettingsPointer);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80070ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80070f0:	e001      	b.n	80070f6 <VL53L0X_StaticInit+0xca>
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80070f2:	4b8a      	ldr	r3, [pc, #552]	; (800731c <VL53L0X_StaticInit+0x2f0>)
 80070f4:	66bb      	str	r3, [r7, #104]	; 0x68
	}

	if (Status == VL53L0X_ERROR_NONE)
 80070f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <VL53L0X_StaticInit+0xe0>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80070fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f003 fb8b 	bl	800a81c <VL53L0X_load_tuning_settings>
 8007106:	4603      	mov	r3, r0
 8007108:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800710c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10a      	bne.n	800712a <VL53L0X_StaticInit+0xfe>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007114:	2300      	movs	r3, #0
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	2304      	movs	r3, #4
 800711a:	2200      	movs	r2, #0
 800711c:	2100      	movs	r1, #0
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 f948 	bl	80083b4 <VL53L0X_SetGpioConfig>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
				VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800712a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800712e:	2b00      	cmp	r3, #0
 8007130:	d121      	bne.n	8007176 <VL53L0X_StaticInit+0x14a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007132:	2201      	movs	r2, #1
 8007134:	21ff      	movs	r1, #255	; 0xff
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f004 fa4a 	bl	800b5d0 <VL53L0X_WrByte>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007142:	f107 031a 	add.w	r3, r7, #26
 8007146:	461a      	mov	r2, r3
 8007148:	2184      	movs	r1, #132	; 0x84
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f004 faec 	bl	800b728 <VL53L0X_RdWord>
 8007150:	4603      	mov	r3, r0
 8007152:	461a      	mov	r2, r3
 8007154:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007158:	4313      	orrs	r3, r2
 800715a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800715e:	2200      	movs	r2, #0
 8007160:	21ff      	movs	r1, #255	; 0xff
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f004 fa34 	bl	800b5d0 <VL53L0X_WrByte>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007170:	4313      	orrs	r3, r2
 8007172:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007176:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <VL53L0X_StaticInit+0x15e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800717e:	8b7b      	ldrh	r3, [r7, #26]
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	461a      	mov	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800718a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800718e:	2b00      	cmp	r3, #0
 8007190:	d108      	bne.n	80071a4 <VL53L0X_StaticInit+0x178>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007192:	f107 031c 	add.w	r3, r7, #28
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f903 	bl	80073a4 <VL53L0X_GetDeviceParameters>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if (Status == VL53L0X_ERROR_NONE) {
 80071a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d110      	bne.n	80071ce <VL53L0X_StaticInit+0x1a2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80071ac:	f107 0319 	add.w	r3, r7, #25
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f9c5 	bl	8007542 <VL53L0X_GetFractionEnable>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80071be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d103      	bne.n	80071ce <VL53L0X_StaticInit+0x1a2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80071c6:	7e7a      	ldrb	r2, [r7, #25]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
	}

	if (Status == VL53L0X_ERROR_NONE)
 80071ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10e      	bne.n	80071f4 <VL53L0X_StaticInit+0x1c8>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f103 0410 	add.w	r4, r3, #16
 80071dc:	f107 051c 	add.w	r5, r7, #28
 80071e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80071f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80071f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d111      	bne.n	8007220 <VL53L0X_StaticInit+0x1f4>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80071fc:	f107 0319 	add.w	r3, r7, #25
 8007200:	461a      	mov	r2, r3
 8007202:	2101      	movs	r1, #1
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f004 fa65 	bl	800b6d4 <VL53L0X_RdByte>
 800720a:	4603      	mov	r3, r0
 800720c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				&tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007210:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007214:	2b00      	cmp	r3, #0
 8007216:	d103      	bne.n	8007220 <VL53L0X_StaticInit+0x1f4>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007218:	7e7a      	ldrb	r2, [r7, #25]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007220:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007224:	2b00      	cmp	r3, #0
 8007226:	d107      	bne.n	8007238 <VL53L0X_StaticInit+0x20c>
		Status = VL53L0X_SetSequenceStepEnable(Dev, VL53L0X_SEQUENCESTEP_TCC,
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f9e5 	bl	80075fc <VL53L0X_SetSequenceStepEnable>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				0);

	if (Status == VL53L0X_ERROR_NONE)
 8007238:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800723c:	2b00      	cmp	r3, #0
 800723e:	d107      	bne.n	8007250 <VL53L0X_StaticInit+0x224>
		Status = VL53L0X_SetSequenceStepEnable(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 8007240:	2200      	movs	r2, #0
 8007242:	2102      	movs	r1, #2
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f9d9 	bl	80075fc <VL53L0X_SetSequenceStepEnable>
 800724a:	4603      	mov	r3, r0
 800724c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				0);

	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007250:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <VL53L0X_StaticInit+0x234>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2203      	movs	r2, #3
 800725c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007260:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <VL53L0X_StaticInit+0x250>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007268:	f107 0313 	add.w	r3, r7, #19
 800726c:	461a      	mov	r2, r3
 800726e:	2100      	movs	r1, #0
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f9ab 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE, &vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800727c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <VL53L0X_StaticInit+0x260>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod,
 8007284:	7cfa      	ldrb	r2, [r7, #19]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800728c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <VL53L0X_StaticInit+0x27c>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007294:	f107 0313 	add.w	r3, r7, #19
 8007298:	461a      	mov	r2, r3
 800729a:	2101      	movs	r1, #1
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f995 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_VCSEL_PERIOD_FINAL_RANGE, &vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d103      	bne.n	80072b8 <VL53L0X_StaticInit+0x28c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod,
 80072b0:	7cfa      	ldrb	r2, [r7, #19]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80072b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d109      	bne.n	80072d4 <VL53L0X_StaticInit+0x2a8>
		Status = VL53L0X_GetSequenceStepTimeout(Dev,
 80072c0:	f107 030c 	add.w	r3, r7, #12
 80072c4:	461a      	mov	r2, r3
 80072c6:	2103      	movs	r1, #3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fae1 	bl	8007890 <VL53L0X_GetSequenceStepTimeout>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_SEQUENCESTEP_PRE_RANGE, &seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d103      	bne.n	80072e4 <VL53L0X_StaticInit+0x2b8>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs,
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80072e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d109      	bne.n	8007300 <VL53L0X_StaticInit+0x2d4>
		Status = VL53L0X_GetSequenceStepTimeout(Dev,
 80072ec:	f107 030c 	add.w	r3, r7, #12
 80072f0:	461a      	mov	r2, r3
 80072f2:	2104      	movs	r1, #4
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 facb 	bl	8007890 <VL53L0X_GetSequenceStepTimeout>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				VL53L0X_SEQUENCESTEP_FINAL_RANGE, &seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007300:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007304:	2b00      	cmp	r3, #0
 8007306:	d103      	bne.n	8007310 <VL53L0X_StaticInit+0x2e4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs,
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007310:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8007314:	4618      	mov	r0, r3
 8007316:	3770      	adds	r7, #112	; 0x70
 8007318:	46bd      	mov	sp, r7
 800731a:	bdb0      	pop	{r4, r5, r7, pc}
 800731c:	200001c4 	.word	0x200001c4

08007320 <VL53L0X_ResetDevice>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_ResetDevice(VL53L0X_DEV Dev) {
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* Set reset bit */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N, 0x00);
 800732c:	2200      	movs	r2, #0
 800732e:	21bf      	movs	r1, #191	; 0xbf
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f004 f94d 	bl	800b5d0 <VL53L0X_WrByte>
 8007336:	4603      	mov	r3, r0
 8007338:	73fb      	strb	r3, [r7, #15]

	/* Wait for some time */
	if (Status == VL53L0X_ERROR_NONE) {
 800733a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10b      	bne.n	800735a <VL53L0X_ResetDevice+0x3a>
		do {
			Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007342:	f107 030e 	add.w	r3, r7, #14
 8007346:	461a      	mov	r2, r3
 8007348:	21c0      	movs	r1, #192	; 0xc0
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f004 f9c2 	bl	800b6d4 <VL53L0X_RdByte>
 8007350:	4603      	mov	r3, r0
 8007352:	73fb      	strb	r3, [r7, #15]
					&Byte);
		} while (Byte != 0x00);
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f3      	bne.n	8007342 <VL53L0X_ResetDevice+0x22>
	}

	/* Release reset */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SOFT_RESET_GO2_SOFT_RESET_N, 0x01);
 800735a:	2201      	movs	r2, #1
 800735c:	21bf      	movs	r1, #191	; 0xbf
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f004 f936 	bl	800b5d0 <VL53L0X_WrByte>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]

	/* Wait until correct boot-up of the device */
	if (Status == VL53L0X_ERROR_NONE) {
 8007368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10b      	bne.n	8007388 <VL53L0X_ResetDevice+0x68>
		do {
			Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007370:	f107 030e 	add.w	r3, r7, #14
 8007374:	461a      	mov	r2, r3
 8007376:	21c0      	movs	r1, #192	; 0xc0
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f004 f9ab 	bl	800b6d4 <VL53L0X_RdByte>
 800737e:	4603      	mov	r3, r0
 8007380:	73fb      	strb	r3, [r7, #15]
					&Byte);
		} while (Byte == 0x00);
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0f3      	beq.n	8007370 <VL53L0X_ResetDevice+0x50>
	}

	/* Set PAL State to VL53L0X_STATE_POWERDOWN */
	if (Status == VL53L0X_ERROR_NONE)
 8007388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d103      	bne.n	8007398 <VL53L0X_ResetDevice+0x78>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_POWERDOWN);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	LOG_FUNCTION_END(Status);
	return Status;
 8007398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <VL53L0X_GetDeviceParameters>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
		VL53L0X_DeviceParameters_t *pDeviceParameters) {
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f8b0 	bl	800751c <VL53L0X_GetDeviceMode>
 80073bc:	4603      	mov	r3, r0
 80073be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80073c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d107      	bne.n	80073d8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa9e 	bl	8007910 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));

	if (Status == VL53L0X_ERROR_NONE)
 80073d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2200      	movs	r2, #0
 80073e4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80073e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d107      	bne.n	80073fe <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fad4 	bl	80079a2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80073fa:	4603      	mov	r3, r0
 80073fc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->XTalkCompensationRateMegaCps));

	if (Status == VL53L0X_ERROR_NONE)
 80073fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	3314      	adds	r3, #20
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff fc84 	bl	8006d1a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->RangeOffsetMicroMeters));

	if (Status == VL53L0X_ERROR_NONE) {
 8007416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d134      	bne.n	8007488 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800741e:	2300      	movs	r3, #0
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	e02a      	b.n	800747a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d12a      	bne.n	8007482 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	b299      	uxth	r1, r3
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	3308      	adds	r3, #8
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	4413      	add	r3, r2
 800743a:	3304      	adds	r3, #4
 800743c:	461a      	mov	r2, r3
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fbf4 	bl	8007c2c <VL53L0X_GetLimitCheckValue>
 8007444:	4603      	mov	r3, r0
 8007446:	461a      	mov	r2, r3
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	4313      	orrs	r3, r2
 800744c:	73fb      	strb	r3, [r7, #15]
						&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800744e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d117      	bne.n	8007486 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	b299      	uxth	r1, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	3318      	adds	r3, #24
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	4413      	add	r3, r2
 8007462:	461a      	mov	r2, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fb5b 	bl	8007b20 <VL53L0X_GetLimitCheckEnable>
 800746a:	4603      	mov	r3, r0
 800746c:	461a      	mov	r2, r3
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	4313      	orrs	r3, r2
 8007472:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	3301      	adds	r3, #1
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b05      	cmp	r3, #5
 800747e:	ddd1      	ble.n	8007424 <VL53L0X_GetDeviceParameters+0x80>
 8007480:	e002      	b.n	8007488 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007482:	bf00      	nop
 8007484:	e000      	b.n	8007488 <VL53L0X_GetDeviceParameters+0xe4>
						&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007486:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d107      	bne.n	80074a0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	333c      	adds	r3, #60	; 0x3c
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fc56 	bl	8007d48 <VL53L0X_GetWrapAroundCheckEnable>
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80074a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d107      	bne.n	80074b8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	3304      	adds	r3, #4
 80074ac:	4619      	mov	r1, r3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f879 	bl	80075a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80074b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
		VL53L0X_DeviceModes DeviceMode) {
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	2b15      	cmp	r3, #21
 80074d8:	bf8c      	ite	hi
 80074da:	2201      	movhi	r2, #1
 80074dc:	2200      	movls	r2, #0
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	d10f      	bne.n	8007504 <VL53L0X_SetDeviceMode+0x40>
 80074e4:	4a0c      	ldr	r2, [pc, #48]	; (8007518 <VL53L0X_SetDeviceMode+0x54>)
 80074e6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ea:	f003 0301 	and.w	r3, r3, #1
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bf14      	ite	ne
 80074f2:	2301      	movne	r3, #1
 80074f4:	2300      	moveq	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	741a      	strb	r2, [r3, #16]
		break;
 8007502:	e001      	b.n	8007508 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007504:	23f8      	movs	r3, #248	; 0xf8
 8007506:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007508:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	0030000b 	.word	0x0030000b

0800751c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
		VL53L0X_DeviceModes *pDeviceMode) {
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007526:	2300      	movs	r3, #0
 8007528:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7c1a      	ldrb	r2, [r3, #16]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <VL53L0X_GetFractionEnable>:

	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled) {
 8007542:	b580      	push	{r7, lr}
 8007544:	b084      	sub	sp, #16
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	2109      	movs	r1, #9
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f004 f8bd 	bl	800b6d4 <VL53L0X_RdByte>
 800755a:	4603      	mov	r3, r0
 800755c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800755e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds) {
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f002 ffb1 	bl	800a4f8 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007596:	4603      	mov	r3, r0
 8007598:	73fb      	strb	r3, [r7, #15]
			MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800759a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f003 f87e 	bl	800a6b8 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
			pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80075c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <VL53L0X_GetVcselPulsePeriod>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
		VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK) {
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	460b      	mov	r3, r1
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80075de:	7afb      	ldrb	r3, [r7, #11]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	4619      	mov	r1, r3
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f002 ff50 	bl	800a48a <VL53L0X_get_vcsel_pulse_period>
 80075ea:	4603      	mov	r3, r0
 80075ec:	75fb      	strb	r3, [r7, #23]
			pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80075ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
		VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled) {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	460b      	mov	r3, r1
 8007606:	70fb      	strb	r3, [r7, #3]
 8007608:	4613      	mov	r3, r2
 800760a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800760c:	2300      	movs	r3, #0
 800760e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007614:	2300      	movs	r3, #0
 8007616:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007618:	f107 030f 	add.w	r3, r7, #15
 800761c:	461a      	mov	r2, r3
 800761e:	2101      	movs	r1, #1
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f004 f857 	bl	800b6d4 <VL53L0X_RdByte>
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
			&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800762e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d159      	bne.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8007636:	78bb      	ldrb	r3, [r7, #2]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d12b      	bne.n	8007694 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	2b04      	cmp	r3, #4
 8007640:	d825      	bhi.n	800768e <VL53L0X_SetSequenceStepEnable+0x92>
 8007642:	a201      	add	r2, pc, #4	; (adr r2, 8007648 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	0800765d 	.word	0x0800765d
 800764c:	08007667 	.word	0x08007667
 8007650:	08007671 	.word	0x08007671
 8007654:	0800767b 	.word	0x0800767b
 8007658:	08007685 	.word	0x08007685
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800765c:	7dbb      	ldrb	r3, [r7, #22]
 800765e:	f043 0310 	orr.w	r3, r3, #16
 8007662:	75bb      	strb	r3, [r7, #22]
				break;
 8007664:	e041      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007666:	7dbb      	ldrb	r3, [r7, #22]
 8007668:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800766c:	75bb      	strb	r3, [r7, #22]
				break;
 800766e:	e03c      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007670:	7dbb      	ldrb	r3, [r7, #22]
 8007672:	f043 0304 	orr.w	r3, r3, #4
 8007676:	75bb      	strb	r3, [r7, #22]
				break;
 8007678:	e037      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800767a:	7dbb      	ldrb	r3, [r7, #22]
 800767c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007680:	75bb      	strb	r3, [r7, #22]
				break;
 8007682:	e032      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007684:	7dbb      	ldrb	r3, [r7, #22]
 8007686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800768a:	75bb      	strb	r3, [r7, #22]
				break;
 800768c:	e02d      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800768e:	23fc      	movs	r3, #252	; 0xfc
 8007690:	75fb      	strb	r3, [r7, #23]
 8007692:	e02a      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007694:	78fb      	ldrb	r3, [r7, #3]
 8007696:	2b04      	cmp	r3, #4
 8007698:	d825      	bhi.n	80076e6 <VL53L0X_SetSequenceStepEnable+0xea>
 800769a:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800769c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a0:	080076b5 	.word	0x080076b5
 80076a4:	080076bf 	.word	0x080076bf
 80076a8:	080076c9 	.word	0x080076c9
 80076ac:	080076d3 	.word	0x080076d3
 80076b0:	080076dd 	.word	0x080076dd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80076b4:	7dbb      	ldrb	r3, [r7, #22]
 80076b6:	f023 0310 	bic.w	r3, r3, #16
 80076ba:	75bb      	strb	r3, [r7, #22]
				break;
 80076bc:	e015      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80076be:	7dbb      	ldrb	r3, [r7, #22]
 80076c0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80076c4:	75bb      	strb	r3, [r7, #22]
				break;
 80076c6:	e010      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80076c8:	7dbb      	ldrb	r3, [r7, #22]
 80076ca:	f023 0304 	bic.w	r3, r3, #4
 80076ce:	75bb      	strb	r3, [r7, #22]
				break;
 80076d0:	e00b      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80076d2:	7dbb      	ldrb	r3, [r7, #22]
 80076d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d8:	75bb      	strb	r3, [r7, #22]
				break;
 80076da:	e006      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80076dc:	7dbb      	ldrb	r3, [r7, #22]
 80076de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e2:	75bb      	strb	r3, [r7, #22]
				break;
 80076e4:	e001      	b.n	80076ea <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076e6:	23fc      	movs	r3, #252	; 0xfc
 80076e8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	7dba      	ldrb	r2, [r7, #22]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d01e      	beq.n	8007730 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80076f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d107      	bne.n	800770a <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80076fa:	7dbb      	ldrb	r3, [r7, #22]
 80076fc:	461a      	mov	r2, r3
 80076fe:	2101      	movs	r1, #1
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f003 ff65 	bl	800b5d0 <VL53L0X_WrByte>
 8007706:	4603      	mov	r3, r0
 8007708:	75fb      	strb	r3, [r7, #23]
					SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800770a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	7dba      	ldrb	r2, [r7, #22]
 8007716:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800771a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	613b      	str	r3, [r7, #16]
					MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007728:	6939      	ldr	r1, [r7, #16]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff ff28 	bl	8007580 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007730:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
		VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
		uint8_t *pSequenceStepEnabled) {
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	72fb      	strb	r3, [r7, #11]
 800774a:	4613      	mov	r3, r2
 800774c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800774e:	2300      	movs	r3, #0
 8007750:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8007758:	7afb      	ldrb	r3, [r7, #11]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d836      	bhi.n	80077cc <sequence_step_enabled+0x90>
 800775e:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <sequence_step_enabled+0x28>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	08007779 	.word	0x08007779
 8007768:	0800778b 	.word	0x0800778b
 800776c:	0800779d 	.word	0x0800779d
 8007770:	080077af 	.word	0x080077af
 8007774:	080077c1 	.word	0x080077c1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8007778:	7abb      	ldrb	r3, [r7, #10]
 800777a:	111b      	asrs	r3, r3, #4
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	701a      	strb	r2, [r3, #0]
		break;
 8007788:	e022      	b.n	80077d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800778a:	7abb      	ldrb	r3, [r7, #10]
 800778c:	10db      	asrs	r3, r3, #3
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	b2da      	uxtb	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	701a      	strb	r2, [r3, #0]
		break;
 800779a:	e019      	b.n	80077d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800779c:	7abb      	ldrb	r3, [r7, #10]
 800779e:	109b      	asrs	r3, r3, #2
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	b2da      	uxtb	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	701a      	strb	r2, [r3, #0]
		break;
 80077ac:	e010      	b.n	80077d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80077ae:	7abb      	ldrb	r3, [r7, #10]
 80077b0:	119b      	asrs	r3, r3, #6
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	701a      	strb	r2, [r3, #0]
		break;
 80077be:	e007      	b.n	80077d0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80077c0:	7abb      	ldrb	r3, [r7, #10]
 80077c2:	09db      	lsrs	r3, r3, #7
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	701a      	strb	r2, [r3, #0]
		break;
 80077ca:	e001      	b.n	80077d0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80077cc:	23fc      	movs	r3, #252	; 0xfc
 80077ce:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80077d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	371c      	adds	r7, #28
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <VL53L0X_GetSequenceStepEnables>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
		VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps) {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80077f2:	f107 030e 	add.w	r3, r7, #14
 80077f6:	461a      	mov	r2, r3
 80077f8:	2101      	movs	r1, #1
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f003 ff6a 	bl	800b6d4 <VL53L0X_RdByte>
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
			&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d107      	bne.n	800781c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_TCC,
 800780c:	7bba      	ldrb	r2, [r7, #14]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2100      	movs	r1, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff ff92 	bl	800773c <sequence_step_enabled>
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]
				SequenceConfig, &pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800781c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d108      	bne.n	8007836 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_DSS,
 8007824:	7bba      	ldrb	r2, [r7, #14]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	3302      	adds	r3, #2
 800782a:	2101      	movs	r1, #1
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ff85 	bl	800773c <sequence_step_enabled>
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]
				SequenceConfig, &pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d108      	bne.n	8007850 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 800783e:	7bba      	ldrb	r2, [r7, #14]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	2102      	movs	r1, #2
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff ff78 	bl	800773c <sequence_step_enabled>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
				SequenceConfig, &pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d108      	bne.n	800786a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 8007858:	7bba      	ldrb	r2, [r7, #14]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	3303      	adds	r3, #3
 800785e:	2103      	movs	r1, #3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff ff6b 	bl	800773c <sequence_step_enabled>
 8007866:	4603      	mov	r3, r0
 8007868:	73fb      	strb	r3, [r7, #15]
				SequenceConfig, &pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800786a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d108      	bne.n	8007884 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 8007872:	7bba      	ldrb	r2, [r7, #14]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	3304      	adds	r3, #4
 8007878:	2104      	movs	r1, #4
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff ff5e 	bl	800773c <sequence_step_enabled>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
				SequenceConfig, &pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007884:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
		VL53L0X_SequenceStepId SequenceStepId,
		FixPoint1616_t *pTimeOutMilliSecs) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	460b      	mov	r3, r1
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800789e:	2300      	movs	r3, #0
 80078a0:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 80078a6:	2300      	movs	r3, #0
 80078a8:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80078aa:	f107 0210 	add.w	r2, r7, #16
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	4619      	mov	r1, r3
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f002 fc14 	bl	800a0e0 <get_sequence_step_timeout>
 80078b8:	4603      	mov	r3, r0
 80078ba:	77fb      	strb	r3, [r7, #31]
			&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80078bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d11c      	bne.n	80078fe <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	4a11      	ldr	r2, [pc, #68]	; (800790c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80078c8:	fba2 2303 	umull	r2, r3, r2, r3
 80078cc:	099b      	lsrs	r3, r3, #6
 80078ce:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	0419      	lsls	r1, r3, #16
				+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4613      	mov	r3, r2
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80078f0:	4a06      	ldr	r2, [pc, #24]	; (800790c <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	099b      	lsrs	r3, r3, #6
 80078f8:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007902:	4618      	mov	r0, r3
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	10624dd3 	.word	0x10624dd3

08007910 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
		uint32_t *pInterMeasurementPeriodMilliSeconds) {
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800791e:	f107 030c 	add.w	r3, r7, #12
 8007922:	461a      	mov	r2, r3
 8007924:	21f8      	movs	r1, #248	; 0xf8
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f003 fefe 	bl	800b728 <VL53L0X_RdWord>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]
			&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d108      	bne.n	800794a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007938:	f107 0308 	add.w	r3, r7, #8
 800793c:	461a      	mov	r2, r3
 800793e:	2104      	movs	r1, #4
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f003 ff29 	bl	800b798 <VL53L0X_RdDWord>
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
				&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800794a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10c      	bne.n	800796c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007952:	89bb      	ldrh	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d005      	beq.n	8007964 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds = IMPeriodMilliSeconds
					/ osc_calibrate_val;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	89ba      	ldrh	r2, [r7, #12]
 800795c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds = IMPeriodMilliSeconds
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev, InterMeasurementPeriodMilliSeconds,
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	619a      	str	r2, [r3, #24]
				*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800796c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <VL53L0X_GetXTalkCompensationEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
		uint8_t *pXTalkCompensationEnable) {
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7f1b      	ldrb	r3, [r3, #28]
 800798a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	7bba      	ldrb	r2, [r7, #14]
 8007990:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007992:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
		FixPoint1616_t *pXTalkCompensationRateMegaCps) {
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b086      	sub	sp, #24
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80079b0:	f107 030e 	add.w	r3, r7, #14
 80079b4:	461a      	mov	r2, r3
 80079b6:	2120      	movs	r1, #32
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f003 feb5 	bl	800b728 <VL53L0X_RdWord>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS,
			(uint16_t*) &Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80079c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d118      	bne.n	80079fc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80079ca:	89fb      	ldrh	r3, [r7, #14]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d109      	bne.n	80079e4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	613b      	str	r3, [r7, #16]
					TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 0);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	771a      	strb	r2, [r3, #28]
 80079e2:	e00b      	b.n	80079fc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80079e4:	89fb      	ldrh	r3, [r7, #14]
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	621a      	str	r2, [r3, #32]
					TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 1);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	771a      	strb	r2, [r3, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80079fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <VL53L0X_SetLimitCheckEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
		uint16_t LimitCheckId, uint8_t LimitCheckEnable) {
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	460b      	mov	r3, r1
 8007a12:	807b      	strh	r3, [r7, #2]
 8007a14:	4613      	mov	r3, r2
 8007a16:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007a28:	887b      	ldrh	r3, [r7, #2]
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	d902      	bls.n	8007a34 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a2e:	23fc      	movs	r3, #252	; 0xfc
 8007a30:	75fb      	strb	r3, [r7, #23]
 8007a32:	e05b      	b.n	8007aec <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007a34:	787b      	ldrb	r3, [r7, #1]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007a42:	2301      	movs	r3, #1
 8007a44:	73bb      	strb	r3, [r7, #14]
 8007a46:	e00a      	b.n	8007a5e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8007a48:	887b      	ldrh	r3, [r7, #2]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	613b      	str	r3, [r7, #16]
					TempFix1616);
			LimitCheckDisable = 0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8007a5e:	887b      	ldrh	r3, [r7, #2]
 8007a60:	2b05      	cmp	r3, #5
 8007a62:	d841      	bhi.n	8007ae8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007a64:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <VL53L0X_SetLimitCheckEnable+0x64>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007a85 	.word	0x08007a85
 8007a70:	08007a8f 	.word	0x08007a8f
 8007a74:	08007aa5 	.word	0x08007aa5
 8007a78:	08007aaf 	.word	0x08007aaf
 8007a7c:	08007ab9 	.word	0x08007ab9
 8007a80:	08007ad1 	.word	0x08007ad1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	7bfa      	ldrb	r2, [r7, #15]
 8007a88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, LimitCheckEnableInt);

			break;
 8007a8c:	e02e      	b.n	8007aec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
					VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
					VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	2144      	movs	r1, #68	; 0x44
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f003 fdbd 	bl	800b618 <VL53L0X_WrWord>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	75fb      	strb	r3, [r7, #23]

			break;
 8007aa2:	e023      	b.n	8007aec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7bfa      	ldrb	r2, [r7, #15]
 8007aa8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
					VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, LimitCheckEnableInt);

			break;
 8007aac:	e01e      	b.n	8007aec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	7bfa      	ldrb	r2, [r7, #15]
 8007ab2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
					VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
					LimitCheckEnableInt);

			break;
 8007ab6:	e019      	b.n	8007aec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t) (LimitCheckDisable << 1);
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev, VL53L0X_REG_MSRC_CONFIG_CONTROL,
 8007abe:	7b7b      	ldrb	r3, [r7, #13]
 8007ac0:	22fe      	movs	r2, #254	; 0xfe
 8007ac2:	2160      	movs	r1, #96	; 0x60
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f003 fdd1 	bl	800b66c <VL53L0X_UpdateByte>
 8007aca:	4603      	mov	r3, r0
 8007acc:	75fb      	strb	r3, [r7, #23]
					0xFE, Temp8);

			break;
 8007ace:	e00d      	b.n	8007aec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t) (LimitCheckDisable << 4);
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev, VL53L0X_REG_MSRC_CONFIG_CONTROL,
 8007ad6:	7b7b      	ldrb	r3, [r7, #13]
 8007ad8:	22ef      	movs	r2, #239	; 0xef
 8007ada:	2160      	movs	r1, #96	; 0x60
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f003 fdc5 	bl	800b66c <VL53L0X_UpdateByte>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	75fb      	strb	r3, [r7, #23]
					0xEF, Temp8);

			break;
 8007ae6:	e001      	b.n	8007aec <VL53L0X_SetLimitCheckEnable+0xe4>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ae8:	23fc      	movs	r3, #252	; 0xfc
 8007aea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007aec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10f      	bne.n	8007b14 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007af4:	787b      	ldrb	r3, [r7, #1]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	4413      	add	r3, r2
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007b06:	e005      	b.n	8007b14 <VL53L0X_SetLimitCheckEnable+0x10c>
					0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007b08:	887b      	ldrh	r3, [r7, #2]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
		uint16_t LimitCheckId, uint8_t *pLimitCheckEnable) {
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007b32:	897b      	ldrh	r3, [r7, #10]
 8007b34:	2b05      	cmp	r3, #5
 8007b36:	d905      	bls.n	8007b44 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b38:	23fc      	movs	r3, #252	; 0xfc
 8007b3a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e008      	b.n	8007b56 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007b44:	897b      	ldrh	r3, [r7, #10]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b4e:	75bb      	strb	r3, [r7, #22]
				Temp8);
		*pLimitCheckEnable = Temp8;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7dba      	ldrb	r2, [r7, #22]
 8007b54:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
	...

08007b68 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t LimitCheckValue) {
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	460b      	mov	r3, r1
 8007b72:	607a      	str	r2, [r7, #4]
 8007b74:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 8007b7a:	897b      	ldrh	r3, [r7, #10]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b84:	75bb      	strb	r3, [r7, #22]

	if (Temp8 == 0) { /* disabled write only internal value */
 8007b86:	7dbb      	ldrb	r3, [r7, #22]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d107      	bne.n	8007b9c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8007b8c:	897b      	ldrh	r3, [r7, #10]
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	330c      	adds	r3, #12
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	e040      	b.n	8007c1e <VL53L0X_SetLimitCheckValue+0xb6>
				LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007b9c:	897b      	ldrh	r3, [r7, #10]
 8007b9e:	2b05      	cmp	r3, #5
 8007ba0:	d830      	bhi.n	8007c04 <VL53L0X_SetLimitCheckValue+0x9c>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <VL53L0X_SetLimitCheckValue+0x40>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bc1 	.word	0x08007bc1
 8007bac:	08007bc9 	.word	0x08007bc9
 8007bb0:	08007bdf 	.word	0x08007bdf
 8007bb4:	08007be7 	.word	0x08007be7
 8007bb8:	08007bef 	.word	0x08007bef
 8007bbc:	08007bef 	.word	0x08007bef

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	635a      	str	r2, [r3, #52]	; 0x34
					VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, LimitCheckValue);
			break;
 8007bc6:	e01f      	b.n	8007c08 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
					VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
					VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	461a      	mov	r2, r3
 8007bd0:	2144      	movs	r1, #68	; 0x44
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f003 fd20 	bl	800b618 <VL53L0X_WrWord>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75fb      	strb	r3, [r7, #23]

			break;
 8007bdc:	e014      	b.n	8007c08 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	63da      	str	r2, [r3, #60]	; 0x3c
					VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, LimitCheckValue);

			break;
 8007be4:	e010      	b.n	8007c08 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40
					VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
					LimitCheckValue);

			break;
 8007bec:	e00c      	b.n	8007c08 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
					VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
					VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2164      	movs	r1, #100	; 0x64
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f003 fd0d 	bl	800b618 <VL53L0X_WrWord>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

			break;
 8007c02:	e001      	b.n	8007c08 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c04:	23fc      	movs	r3, #252	; 0xfc
 8007c06:	75fb      	strb	r3, [r7, #23]
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007c08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d106      	bne.n	8007c1e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8007c10:	897b      	ldrh	r3, [r7, #10]
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	330c      	adds	r3, #12
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	605a      	str	r2, [r3, #4]
					LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop

08007c2c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t *pLimitCheckValue) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b088      	sub	sp, #32
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	460b      	mov	r3, r1
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007c42:	897b      	ldrh	r3, [r7, #10]
 8007c44:	2b05      	cmp	r3, #5
 8007c46:	d847      	bhi.n	8007cd8 <VL53L0X_GetLimitCheckValue+0xac>
 8007c48:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <VL53L0X_GetLimitCheckValue+0x24>)
 8007c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c4e:	bf00      	nop
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c75 	.word	0x08007c75
 8007c58:	08007c9b 	.word	0x08007c9b
 8007c5c:	08007ca7 	.word	0x08007ca7
 8007c60:	08007cb3 	.word	0x08007cb3
 8007c64:	08007cb3 	.word	0x08007cb3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6c:	61bb      	str	r3, [r7, #24]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	77bb      	strb	r3, [r7, #30]
		break;
 8007c72:	e033      	b.n	8007cdc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007c74:	f107 0316 	add.w	r3, r7, #22
 8007c78:	461a      	mov	r2, r3
 8007c7a:	2144      	movs	r1, #68	; 0x44
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f003 fd53 	bl	800b728 <VL53L0X_RdWord>
 8007c82:	4603      	mov	r3, r0
 8007c84:	77fb      	strb	r3, [r7, #31]
				VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007c86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007c8e:	8afb      	ldrh	r3, [r7, #22]
 8007c90:	025b      	lsls	r3, r3, #9
 8007c92:	61bb      	str	r3, [r7, #24]

		EnableZeroValue = 1;
 8007c94:	2301      	movs	r3, #1
 8007c96:	77bb      	strb	r3, [r7, #30]
		break;
 8007c98:	e020      	b.n	8007cdc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	61bb      	str	r3, [r7, #24]
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	77bb      	strb	r3, [r7, #30]
		break;
 8007ca4:	e01a      	b.n	8007cdc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007caa:	61bb      	str	r3, [r7, #24]
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	77bb      	strb	r3, [r7, #30]
		break;
 8007cb0:	e014      	b.n	8007cdc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007cb2:	f107 0316 	add.w	r3, r7, #22
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	2164      	movs	r1, #100	; 0x64
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f003 fd34 	bl	800b728 <VL53L0X_RdWord>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	77fb      	strb	r3, [r7, #31]
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007cc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d102      	bne.n	8007cd2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007ccc:	8afb      	ldrh	r3, [r7, #22]
 8007cce:	025b      	lsls	r3, r3, #9
 8007cd0:	61bb      	str	r3, [r7, #24]

		EnableZeroValue = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	77bb      	strb	r3, [r7, #30]
		break;
 8007cd6:	e001      	b.n	8007cdc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007cd8:	23fc      	movs	r3, #252	; 0xfc
 8007cda:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d12a      	bne.n	8007d3a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007ce4:	7fbb      	ldrb	r3, [r7, #30]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d124      	bne.n	8007d34 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d110      	bne.n	8007d12 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007cf0:	897b      	ldrh	r3, [r7, #10]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	61bb      	str	r3, [r7, #24]
						LimitCheckId, TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007d04:	897b      	ldrh	r3, [r7, #10]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007d10:	e013      	b.n	8007d3a <VL53L0X_GetLimitCheckValue+0x10e>
						LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007d18:	897b      	ldrh	r3, [r7, #10]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	605a      	str	r2, [r3, #4]
						LimitCheckId, TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007d26:	897b      	ldrh	r3, [r7, #10]
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007d32:	e002      	b.n	8007d3a <VL53L0X_GetLimitCheckValue+0x10e>
						LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3720      	adds	r7, #32
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop

08007d48 <VL53L0X_GetWrapAroundCheckEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
		uint8_t *pWrapAroundCheckEnable) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007d56:	f107 030e 	add.w	r3, r7, #14
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	2101      	movs	r1, #1
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f003 fcb8 	bl	800b6d4 <VL53L0X_RdByte>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10e      	bne.n	8007d8e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007d70:	7bba      	ldrb	r2, [r7, #14]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	b25b      	sxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	da03      	bge.n	8007d88 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	2201      	movs	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	e002      	b.n	8007d8e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781a      	ldrb	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <VL53L0X_PerformSingleMeasurement>:
}

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007db8:	f107 030e 	add.w	r3, r7, #14
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff fbac 	bl	800751c <VL53L0X_GetDeviceMode>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d107      	bne.n	8007de0 <VL53L0X_PerformSingleMeasurement+0x34>
			&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d104      	bne.n	8007de0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f898 	bl	8007f0c <VL53L0X_StartMeasurement>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d104      	bne.n	8007df2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f001 fb3f 	bl	800946c <VL53L0X_measurement_poll_for_completion>
 8007dee:	4603      	mov	r3, r0
 8007df0:	73fb      	strb	r3, [r7, #15]

	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d106      	bne.n	8007e08 <VL53L0X_PerformSingleMeasurement+0x5c>
			&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d103      	bne.n	8007e08 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2203      	movs	r2, #3
 8007e04:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

	LOG_FUNCTION_END(Status);
	return Status;
 8007e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <VL53L0X_PerformRefCalibration>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
		uint8_t *pVhvSettings, uint8_t *pPhaseCal) {
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings, pPhaseCal, 1);
 8007e24:	2301      	movs	r3, #1
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f001 fae1 	bl	80093f2 <VL53L0X_perform_ref_calibration>
 8007e30:	4603      	mov	r3, r0
 8007e32:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <VL53L0X_CheckAndLoadInterruptSettings>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
		uint8_t StartNotStopFlag) {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007e56:	75bb      	strb	r3, [r7, #22]
			Pin0GpioFunctionality);

	if ((InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW)
 8007e58:	7dbb      	ldrb	r3, [r7, #22]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d005      	beq.n	8007e6a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
			|| (InterruptConfig
 8007e5e:	7dbb      	ldrb	r3, [r7, #22]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d002      	beq.n	8007e6a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
					== VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH)
			|| (InterruptConfig
 8007e64:	7dbb      	ldrb	r3, [r7, #22]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d147      	bne.n	8007efa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					== VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007e6a:	f107 030c 	add.w	r3, r7, #12
 8007e6e:	f107 0210 	add.w	r2, r7, #16
 8007e72:	2101      	movs	r1, #1
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fbbf 	bl	80085f8 <VL53L0X_GetInterruptThresholds>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, &ThresholdLow,
				&ThresholdHigh);

		if (((ThresholdLow > 255 * 65536) || (ThresholdHigh > 255 * 65536))
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007e84:	d803      	bhi.n	8007e8e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007e8c:	d935      	bls.n	8007efa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
				&& (Status == VL53L0X_ERROR_NONE)) {
 8007e8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d131      	bne.n	8007efa <VL53L0X_CheckAndLoadInterruptSettings+0xba>

			if (StartNotStopFlag != 0) {
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d006      	beq.n	8007eaa <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007e9c:	491a      	ldr	r1, [pc, #104]	; (8007f08 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f002 fcbc 	bl	800a81c <VL53L0X_load_tuning_settings>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	75fb      	strb	r3, [r7, #23]
 8007ea8:	e027      	b.n	8007efa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
						InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007eaa:	2204      	movs	r2, #4
 8007eac:	21ff      	movs	r1, #255	; 0xff
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f003 fb8e 	bl	800b5d0 <VL53L0X_WrByte>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	7dfb      	ldrb	r3, [r7, #23]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2170      	movs	r1, #112	; 0x70
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f003 fb84 	bl	800b5d0 <VL53L0X_WrByte>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	461a      	mov	r2, r3
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	21ff      	movs	r1, #255	; 0xff
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f003 fb7a 	bl	800b5d0 <VL53L0X_WrByte>
 8007edc:	4603      	mov	r3, r0
 8007ede:	461a      	mov	r2, r3
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2180      	movs	r1, #128	; 0x80
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f003 fb70 	bl	800b5d0 <VL53L0X_WrByte>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	return Status;
 8007efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	2000000c 	.word	0x2000000c

08007f0c <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev) {
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007f1c:	f107 030e 	add.w	r3, r7, #14
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7ff fafa 	bl	800751c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007f28:	2201      	movs	r2, #1
 8007f2a:	2180      	movs	r1, #128	; 0x80
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f003 fb4f 	bl	800b5d0 <VL53L0X_WrByte>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f36:	2201      	movs	r2, #1
 8007f38:	21ff      	movs	r1, #255	; 0xff
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f003 fb48 	bl	800b5d0 <VL53L0X_WrByte>
 8007f40:	4603      	mov	r3, r0
 8007f42:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007f44:	2200      	movs	r2, #0
 8007f46:	2100      	movs	r1, #0
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f003 fb41 	bl	800b5d0 <VL53L0X_WrByte>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007f58:	461a      	mov	r2, r3
 8007f5a:	2191      	movs	r1, #145	; 0x91
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f003 fb37 	bl	800b5d0 <VL53L0X_WrByte>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007f66:	2201      	movs	r2, #1
 8007f68:	2100      	movs	r1, #0
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f003 fb30 	bl	800b5d0 <VL53L0X_WrByte>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007f74:	2200      	movs	r2, #0
 8007f76:	21ff      	movs	r1, #255	; 0xff
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f003 fb29 	bl	800b5d0 <VL53L0X_WrByte>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007f82:	2200      	movs	r2, #0
 8007f84:	2180      	movs	r1, #128	; 0x80
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f003 fb22 	bl	800b5d0 <VL53L0X_WrByte>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d052      	beq.n	800803c <VL53L0X_StartMeasurement+0x130>
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	dc6a      	bgt.n	8008070 <VL53L0X_StartMeasurement+0x164>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d002      	beq.n	8007fa4 <VL53L0X_StartMeasurement+0x98>
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d032      	beq.n	8008008 <VL53L0X_StartMeasurement+0xfc>
 8007fa2:	e065      	b.n	8008070 <VL53L0X_StartMeasurement+0x164>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f003 fb11 	bl	800b5d0 <VL53L0X_WrByte>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d15b      	bne.n	8008076 <VL53L0X_StartMeasurement+0x16a>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d008      	beq.n	8007fda <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8007fc8:	f107 030d 	add.w	r3, r7, #13
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2100      	movs	r1, #0
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f003 fb7f 	bl	800b6d4 <VL53L0X_RdByte>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	75fb      	strb	r3, [r7, #23]
							&Byte);
				LoopNb = LoopNb + 1;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007fe0:	7b7a      	ldrb	r2, [r7, #13]
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	b2db      	uxtb	r3, r3
					&& (Status == VL53L0X_ERROR_NONE)
					&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007fe8:	7bfa      	ldrb	r2, [r7, #15]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d106      	bne.n	8007ffc <VL53L0X_StartMeasurement+0xf0>
					&& (Status == VL53L0X_ERROR_NONE)
 8007fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d102      	bne.n	8007ffc <VL53L0X_StartMeasurement+0xf0>
					&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	2bc7      	cmp	r3, #199	; 0xc7
 8007ffa:	d9e2      	bls.n	8007fc2 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	2bc7      	cmp	r3, #199	; 0xc7
 8008000:	d939      	bls.n	8008076 <VL53L0X_StartMeasurement+0x16a>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008002:	23f9      	movs	r3, #249	; 0xf9
 8008004:	75fb      	strb	r3, [r7, #23]
		}

		break;
 8008006:	e036      	b.n	8008076 <VL53L0X_StartMeasurement+0x16a>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008008:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d105      	bne.n	800801c <VL53L0X_StartMeasurement+0x110>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008010:	2101      	movs	r1, #1
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff ff14 	bl	8007e40 <VL53L0X_CheckAndLoadInterruptSettings>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800801c:	2202      	movs	r2, #2
 800801e:	2100      	movs	r1, #0
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f003 fad5 	bl	800b5d0 <VL53L0X_WrByte>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800802a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d123      	bne.n	800807a <VL53L0X_StartMeasurement+0x16e>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2204      	movs	r2, #4
 8008036:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800803a:	e01e      	b.n	800807a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800803c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d105      	bne.n	8008050 <VL53L0X_StartMeasurement+0x144>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008044:	2101      	movs	r1, #1
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7ff fefa 	bl	8007e40 <VL53L0X_CheckAndLoadInterruptSettings>
 800804c:	4603      	mov	r3, r0
 800804e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008050:	2204      	movs	r2, #4
 8008052:	2100      	movs	r1, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f003 fabb 	bl	800b5d0 <VL53L0X_WrByte>
 800805a:	4603      	mov	r3, r0
 800805c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800805e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10b      	bne.n	800807e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2204      	movs	r2, #4
 800806a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800806e:	e006      	b.n	800807e <VL53L0X_StartMeasurement+0x172>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008070:	23f8      	movs	r3, #248	; 0xf8
 8008072:	75fb      	strb	r3, [r7, #23]
 8008074:	e004      	b.n	8008080 <VL53L0X_StartMeasurement+0x174>
		break;
 8008076:	bf00      	nop
 8008078:	e002      	b.n	8008080 <VL53L0X_StartMeasurement+0x174>
		break;
 800807a:	bf00      	nop
 800807c:	e000      	b.n	8008080 <VL53L0X_StartMeasurement+0x174>
		break;
 800807e:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008080:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <VL53L0X_GetMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
		uint8_t *pMeasurementDataReady) {
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80080a0:	73bb      	strb	r3, [r7, #14]
			Pin0GpioFunctionality);

	if (InterruptConfig == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d112      	bne.n	80080ce <VL53L0X_GetMeasurementDataReady+0x42>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80080a8:	f107 0308 	add.w	r3, r7, #8
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fb1b 	bl	80086ea <VL53L0X_GetInterruptMaskStatus>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d103      	bne.n	80080c6 <VL53L0X_GetMeasurementDataReady+0x3a>
			*pMeasurementDataReady = 1;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	701a      	strb	r2, [r3, #0]
 80080c4:	e01c      	b.n	8008100 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]
 80080cc:	e018      	b.n	8008100 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80080ce:	f107 030d 	add.w	r3, r7, #13
 80080d2:	461a      	mov	r2, r3
 80080d4:	2114      	movs	r1, #20
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f003 fafc 	bl	800b6d4 <VL53L0X_RdByte>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
				&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80080e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10b      	bne.n	8008100 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80080e8:	7b7b      	ldrb	r3, [r7, #13]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2201      	movs	r2, #1
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	e002      	b.n	8008100 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	2200      	movs	r2, #0
 80080fe:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <VL53L0X_GetRangingMeasurementData>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 800810c:	b5b0      	push	{r4, r5, r7, lr}
 800810e:	b096      	sub	sp, #88	; 0x58
 8008110:	af02      	add	r7, sp, #8
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008116:	2300      	movs	r3, #0
 8008118:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800811c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008120:	230c      	movs	r3, #12
 8008122:	2114      	movs	r1, #20
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f003 fa27 	bl	800b578 <VL53L0X_ReadMulti>
 800812a:	4603      	mov	r3, r0
 800812c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008130:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008134:	2b00      	cmp	r3, #0
 8008136:	f040 80d1 	bne.w	80082dc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	2200      	movs	r2, #0
 800813e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8008146:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800814a:	b29b      	uxth	r3, r3
 800814c:	021b      	lsls	r3, r3, #8
 800814e:	b29a      	uxth	r2, r3
 8008150:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008154:	b29b      	uxth	r3, r3
 8008156:	4413      	add	r3, r2
 8008158:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2200      	movs	r2, #0
 8008160:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008162:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008166:	b29b      	uxth	r3, r3
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	b29a      	uxth	r2, r3
 800816c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008170:	b29b      	uxth	r3, r3
 8008172:	4413      	add	r3, r2
 8008174:	b29b      	uxth	r3, r3
 8008176:	025b      	lsls	r3, r3, #9
 8008178:	647b      	str	r3, [r7, #68]	; 0x44
				VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800817e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008180:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008184:	b29b      	uxth	r3, r3
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	b29a      	uxth	r2, r3
 800818a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800818e:	b29b      	uxth	r3, r3
 8008190:	4413      	add	r3, r2
 8008192:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
				VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008196:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800819a:	025b      	lsls	r3, r3, #9
 800819c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80081a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4413      	add	r3, r2
 80081b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount = EffectiveSpadRtnCount;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80081be:	829a      	strh	r2, [r3, #20]

		DeviceRangeStatus = localBuffer[0];
 80081c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80081c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev, LinearityCorrectiveGain);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80081ce:	87bb      	strh	r3, [r7, #60]	; 0x3c

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev, RangeFractionalEnable);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80081d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

		if (LinearityCorrectiveGain != 1000) {
 80081da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081e0:	d046      	beq.n	8008270 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t) ((LinearityCorrectiveGain * tmpuint16 + 500)
 80081e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081e4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80081e8:	fb02 f303 	mul.w	r3, r2, r3
 80081ec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
					/ 1000);
 80081f0:	4a57      	ldr	r2, [pc, #348]	; (8008350 <VL53L0X_GetRangingMeasurementData+0x244>)
 80081f2:	fb82 1203 	smull	r1, r2, r2, r3
 80081f6:	1192      	asrs	r2, r2, #6
 80081f8:	17db      	asrs	r3, r3, #31
 80081fa:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t) ((LinearityCorrectiveGain * tmpuint16 + 500)
 80081fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	873b      	strh	r3, [r7, #56]	; 0x38
					XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	7f1b      	ldrb	r3, [r3, #28]
 800820a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800820e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008212:	2b00      	cmp	r3, #0
 8008214:	d02c      	beq.n	8008270 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
						- ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount)
 8008216:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008218:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800821c:	fb02 f303 	mul.w	r3, r2, r3
								>> 8)) <= 0) {
 8008220:	121a      	asrs	r2, r3, #8
 8008222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008224:	429a      	cmp	r2, r3
 8008226:	d10d      	bne.n	8008244 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008228:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800822c:	2b00      	cmp	r3, #0
 800822e:	d004      	beq.n	800823a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008230:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008234:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008238:	e016      	b.n	8008268 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888 << 2;
 800823a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800823e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008242:	e011      	b.n	8008268 <VL53L0X_GetRangingMeasurementData+0x15c>
				} else {
					XtalkRangeMilliMeter = (tmpuint16 * SignalRate)
 8008244:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800824a:	fb03 f202 	mul.w	r2, r3, r2
							/ (SignalRate
									- ((XTalkCompensationRateMegaCps
											* EffectiveSpadRtnCount) >> 8));
 800824e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008250:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008254:	fb01 f303 	mul.w	r3, r1, r3
 8008258:	121b      	asrs	r3, r3, #8
 800825a:	4619      	mov	r1, r3
									- ((XTalkCompensationRateMegaCps
 800825c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800825e:	1a5b      	subs	r3, r3, r1
							/ (SignalRate
 8008260:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter = (tmpuint16 * SignalRate)
 8008264:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008268:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800826c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}
		}

		if (RangeFractionalEnable) {
 8008270:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00d      	beq.n	8008294 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter = (uint16_t) ((tmpuint16)
 8008278:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	b29a      	uxth	r2, r3
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	811a      	strh	r2, [r3, #8]
					>> 2);
			pRangingMeasurementData->RangeFractionalPart = (uint8_t) ((tmpuint16
					& 0x03) << 6);
 8008284:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008288:	b2db      	uxtb	r3, r3
			pRangingMeasurementData->RangeFractionalPart = (uint8_t) ((tmpuint16
 800828a:	019b      	lsls	r3, r3, #6
 800828c:	b2da      	uxtb	r2, r3
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	75da      	strb	r2, [r3, #23]
 8008292:	e006      	b.n	80082a2 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800829a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80082a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80082a6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80082aa:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80082ae:	9301      	str	r3, [sp, #4]
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	4613      	mov	r3, r2
 80082b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f002 ff11 	bl	800b0e0 <VL53L0X_get_pal_range_status>
 80082be:	4603      	mov	r3, r0
 80082c0:	461a      	mov	r2, r3
 80082c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80082c6:	4313      	orrs	r3, r2
 80082c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				SignalRate, EffectiveSpadRtnCount, pRangingMeasurementData,
				&PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80082cc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d103      	bne.n	80082dc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80082d4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	761a      	strb	r2, [r3, #24]
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082dc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d12f      	bne.n	8008344 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f107 040c 	add.w	r4, r7, #12
 80082ea:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80082ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
				pRangingMeasurementData->RangeMilliMeter;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80082fe:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
				pRangingMeasurementData->RangeFractionalPart;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
				pRangingMeasurementData->RangeDMaxMilliMeter;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800830c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
				pRangingMeasurementData->MeasurementTimeUsec;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008312:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
				pRangingMeasurementData->SignalRateRtnMegaCps;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008318:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
				pRangingMeasurementData->AmbientRateRtnMegaCps;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800831e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
				pRangingMeasurementData->EffectiveSpadRtnCount;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008324:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus = pRangingMeasurementData->RangeStatus;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	7e1b      	ldrb	r3, [r3, #24]
 800832a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008334:	f107 050c 	add.w	r5, r7, #12
 8008338:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800833a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800833c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008340:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008344:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008348:	4618      	mov	r0, r3
 800834a:	3750      	adds	r7, #80	; 0x50
 800834c:	46bd      	mov	sp, r7
 800834e:	bdb0      	pop	{r4, r5, r7, pc}
 8008350:	10624dd3 	.word	0x10624dd3

08008354 <VL53L0X_PerformSingleRangingMeasurement>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008362:	2100      	movs	r1, #0
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff f8ad 	bl	80074c4 <VL53L0X_SetDeviceMode>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800836e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fd18 	bl	8007dac <VL53L0X_PerformSingleMeasurement>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008388:	6839      	ldr	r1, [r7, #0]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff febe 	bl	800810c <VL53L0X_GetRangingMeasurementData>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]
				pRangingMeasurementData);

	if (Status == VL53L0X_ERROR_NONE)
 8008394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d105      	bne.n	80083a8 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f960 	bl	8008664 <VL53L0X_ClearInterruptMask>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80083a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <VL53L0X_SetGpioConfig>:

/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
		VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
		VL53L0X_InterruptPolarity Polarity) {
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	4603      	mov	r3, r0
 80083c4:	70fb      	strb	r3, [r7, #3]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70bb      	strb	r3, [r7, #2]
 80083ca:	4613      	mov	r3, r2
 80083cc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80083d8:	23f6      	movs	r3, #246	; 0xf6
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	e105      	b.n	80085ea <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80083de:	78bb      	ldrb	r3, [r7, #2]
 80083e0:	2b14      	cmp	r3, #20
 80083e2:	d110      	bne.n	8008406 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80083e4:	7e3b      	ldrb	r3, [r7, #24]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80083ea:	2310      	movs	r3, #16
 80083ec:	73bb      	strb	r3, [r7, #14]
 80083ee:	e001      	b.n	80083f4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80083f0:	2301      	movs	r3, #1
 80083f2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	461a      	mov	r2, r3
 80083f8:	2184      	movs	r1, #132	; 0x84
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f003 f8e8 	bl	800b5d0 <VL53L0X_WrByte>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	e0f1      	b.n	80085ea <VL53L0X_SetGpioConfig+0x236>

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008406:	78bb      	ldrb	r3, [r7, #2]
 8008408:	2b15      	cmp	r3, #21
 800840a:	f040 8097 	bne.w	800853c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800840e:	2201      	movs	r2, #1
 8008410:	21ff      	movs	r1, #255	; 0xff
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f003 f8dc 	bl	800b5d0 <VL53L0X_WrByte>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	4313      	orrs	r3, r2
 8008420:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008422:	2200      	movs	r2, #0
 8008424:	2100      	movs	r1, #0
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f003 f8d2 	bl	800b5d0 <VL53L0X_WrByte>
 800842c:	4603      	mov	r3, r0
 800842e:	461a      	mov	r2, r3
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	4313      	orrs	r3, r2
 8008434:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008436:	2200      	movs	r2, #0
 8008438:	21ff      	movs	r1, #255	; 0xff
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f003 f8c8 	bl	800b5d0 <VL53L0X_WrByte>
 8008440:	4603      	mov	r3, r0
 8008442:	461a      	mov	r2, r3
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	4313      	orrs	r3, r2
 8008448:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800844a:	2201      	movs	r2, #1
 800844c:	2180      	movs	r1, #128	; 0x80
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f003 f8be 	bl	800b5d0 <VL53L0X_WrByte>
 8008454:	4603      	mov	r3, r0
 8008456:	461a      	mov	r2, r3
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	4313      	orrs	r3, r2
 800845c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800845e:	2202      	movs	r2, #2
 8008460:	2185      	movs	r1, #133	; 0x85
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f003 f8b4 	bl	800b5d0 <VL53L0X_WrByte>
 8008468:	4603      	mov	r3, r0
 800846a:	461a      	mov	r2, r3
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4313      	orrs	r3, r2
 8008470:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008472:	2204      	movs	r2, #4
 8008474:	21ff      	movs	r1, #255	; 0xff
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f003 f8aa 	bl	800b5d0 <VL53L0X_WrByte>
 800847c:	4603      	mov	r3, r0
 800847e:	461a      	mov	r2, r3
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4313      	orrs	r3, r2
 8008484:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008486:	2200      	movs	r2, #0
 8008488:	21cd      	movs	r1, #205	; 0xcd
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f003 f8a0 	bl	800b5d0 <VL53L0X_WrByte>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4313      	orrs	r3, r2
 8008498:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800849a:	2211      	movs	r2, #17
 800849c:	21cc      	movs	r1, #204	; 0xcc
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f003 f896 	bl	800b5d0 <VL53L0X_WrByte>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	4313      	orrs	r3, r2
 80084ac:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80084ae:	2207      	movs	r2, #7
 80084b0:	21ff      	movs	r1, #255	; 0xff
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f003 f88c 	bl	800b5d0 <VL53L0X_WrByte>
 80084b8:	4603      	mov	r3, r0
 80084ba:	461a      	mov	r2, r3
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4313      	orrs	r3, r2
 80084c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80084c2:	2200      	movs	r2, #0
 80084c4:	21be      	movs	r1, #190	; 0xbe
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f003 f882 	bl	800b5d0 <VL53L0X_WrByte>
 80084cc:	4603      	mov	r3, r0
 80084ce:	461a      	mov	r2, r3
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80084d6:	2206      	movs	r2, #6
 80084d8:	21ff      	movs	r1, #255	; 0xff
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f003 f878 	bl	800b5d0 <VL53L0X_WrByte>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80084ea:	2209      	movs	r2, #9
 80084ec:	21cc      	movs	r1, #204	; 0xcc
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f003 f86e 	bl	800b5d0 <VL53L0X_WrByte>
 80084f4:	4603      	mov	r3, r0
 80084f6:	461a      	mov	r2, r3
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80084fe:	2200      	movs	r2, #0
 8008500:	21ff      	movs	r1, #255	; 0xff
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f003 f864 	bl	800b5d0 <VL53L0X_WrByte>
 8008508:	4603      	mov	r3, r0
 800850a:	461a      	mov	r2, r3
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	4313      	orrs	r3, r2
 8008510:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008512:	2201      	movs	r2, #1
 8008514:	21ff      	movs	r1, #255	; 0xff
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f003 f85a 	bl	800b5d0 <VL53L0X_WrByte>
 800851c:	4603      	mov	r3, r0
 800851e:	461a      	mov	r2, r3
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	4313      	orrs	r3, r2
 8008524:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008526:	2200      	movs	r2, #0
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f003 f850 	bl	800b5d0 <VL53L0X_WrByte>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4313      	orrs	r3, r2
 8008538:	73fb      	strb	r3, [r7, #15]
 800853a:	e056      	b.n	80085ea <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800853c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d120      	bne.n	8008586 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8008544:	787b      	ldrb	r3, [r7, #1]
 8008546:	2b04      	cmp	r3, #4
 8008548:	d81b      	bhi.n	8008582 <VL53L0X_SetGpioConfig+0x1ce>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <VL53L0X_SetGpioConfig+0x19c>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	08008565 	.word	0x08008565
 8008554:	0800856b 	.word	0x0800856b
 8008558:	08008571 	.word	0x08008571
 800855c:	08008577 	.word	0x08008577
 8008560:	0800857d 	.word	0x0800857d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]
				break;
 8008568:	e00d      	b.n	8008586 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800856a:	2301      	movs	r3, #1
 800856c:	73bb      	strb	r3, [r7, #14]
				break;
 800856e:	e00a      	b.n	8008586 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008570:	2302      	movs	r3, #2
 8008572:	73bb      	strb	r3, [r7, #14]
				break;
 8008574:	e007      	b.n	8008586 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008576:	2303      	movs	r3, #3
 8008578:	73bb      	strb	r3, [r7, #14]
				break;
 800857a:	e004      	b.n	8008586 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800857c:	2304      	movs	r3, #4
 800857e:	73bb      	strb	r3, [r7, #14]
				break;
 8008580:	e001      	b.n	8008586 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status = VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
 8008582:	23f5      	movs	r3, #245	; 0xf5
 8008584:	73fb      	strb	r3, [r7, #15]
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d107      	bne.n	800859e <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	461a      	mov	r2, r3
 8008592:	210a      	movs	r1, #10
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f003 f81b 	bl	800b5d0 <VL53L0X_WrByte>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
					VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800859e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10f      	bne.n	80085c6 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80085a6:	7e3b      	ldrb	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73bb      	strb	r3, [r7, #14]
 80085b0:	e001      	b.n	80085b6 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t) (1 << 4);
 80085b2:	2310      	movs	r3, #16
 80085b4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80085b6:	7bbb      	ldrb	r3, [r7, #14]
 80085b8:	22ef      	movs	r2, #239	; 0xef
 80085ba:	2184      	movs	r1, #132	; 0x84
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f003 f855 	bl	800b66c <VL53L0X_UpdateByte>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
					VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80085c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality,
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	787a      	ldrb	r2, [r7, #1]
 80085d2:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
					Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80085d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d105      	bne.n	80085ea <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80085de:	2100      	movs	r1, #0
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f83f 	bl	8008664 <VL53L0X_ClearInterruptMask>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop

080085f8 <VL53L0X_GetInterruptThresholds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
		VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
		FixPoint1616_t *pThresholdHigh) {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	607a      	str	r2, [r7, #4]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	460b      	mov	r3, r1
 8008606:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008608:	2300      	movs	r3, #0
 800860a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800860c:	f107 0314 	add.w	r3, r7, #20
 8008610:	461a      	mov	r2, r3
 8008612:	210e      	movs	r1, #14
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f003 f887 	bl	800b728 <VL53L0X_RdWord>
 800861a:	4603      	mov	r3, r0
 800861c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 800861e:	8abb      	ldrh	r3, [r7, #20]
 8008620:	045b      	lsls	r3, r3, #17
 8008622:	461a      	mov	r2, r3
 8008624:	4b0e      	ldr	r3, [pc, #56]	; (8008660 <VL53L0X_GetInterruptThresholds+0x68>)
 8008626:	4013      	ands	r3, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800862c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d10f      	bne.n	8008654 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008634:	f107 0314 	add.w	r3, r7, #20
 8008638:	461a      	mov	r2, r3
 800863a:	210c      	movs	r1, #12
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f003 f873 	bl	800b728 <VL53L0X_RdWord>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh = (FixPoint1616_t) ((0x00fff & Threshold16) << 17);
 8008646:	8abb      	ldrh	r3, [r7, #20]
 8008648:	045b      	lsls	r3, r3, #17
 800864a:	461a      	mov	r2, r3
 800864c:	4b04      	ldr	r3, [pc, #16]	; (8008660 <VL53L0X_GetInterruptThresholds+0x68>)
 800864e:	4013      	ands	r3, r2
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008654:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	1ffe0000 	.word	0x1ffe0000

08008664 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
		uint32_t InterruptMask) {
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */

	LoopCount = 0;
 8008672:	2300      	movs	r3, #0
 8008674:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 8008676:	2201      	movs	r2, #1
 8008678:	210b      	movs	r1, #11
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f002 ffa8 	bl	800b5d0 <VL53L0X_WrByte>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
 8008684:	2200      	movs	r2, #0
 8008686:	210b      	movs	r1, #11
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f002 ffa1 	bl	800b5d0 <VL53L0X_WrByte>
 800868e:	4603      	mov	r3, r0
 8008690:	461a      	mov	r2, r3
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	4313      	orrs	r3, r2
 8008696:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 8008698:	f107 030d 	add.w	r3, r7, #13
 800869c:	461a      	mov	r2, r3
 800869e:	2113      	movs	r1, #19
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f003 f817 	bl	800b6d4 <VL53L0X_RdByte>
 80086a6:	4603      	mov	r3, r0
 80086a8:	461a      	mov	r2, r3
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	73fb      	strb	r3, [r7, #15]
				&Byte);
		LoopCount++;
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	3301      	adds	r3, #1
 80086b4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00) && (LoopCount < 3)
 80086b6:	7b7b      	ldrb	r3, [r7, #13]
 80086b8:	f003 0307 	and.w	r3, r3, #7
			&& (Status == VL53L0X_ERROR_NONE));
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d006      	beq.n	80086ce <VL53L0X_ClearInterruptMask+0x6a>
	} while (((Byte & 0x07) != 0x00) && (LoopCount < 3)
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d803      	bhi.n	80086ce <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80086c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0d3      	beq.n	8008676 <VL53L0X_ClearInterruptMask+0x12>
//	snprintf(txBuff, BUFLEN, "INTC %u\n", LoopCount);
//	CDC_Transmit_FS((uint8_t*) txBuff, strlen(txBuff));
	HAL_Delay(2);
 80086ce:	2002      	movs	r0, #2
 80086d0:	f7f9 f840 	bl	8001754 <HAL_Delay>

	if (LoopCount >= 3)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	d901      	bls.n	80086de <VL53L0X_ClearInterruptMask+0x7a>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80086da:	23f4      	movs	r3, #244	; 0xf4
 80086dc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_END(Status);

	return Status;
 80086de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
		uint32_t *pInterruptMaskStatus) {
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80086f8:	f107 030e 	add.w	r3, r7, #14
 80086fc:	461a      	mov	r2, r3
 80086fe:	2113      	movs	r1, #19
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f002 ffe7 	bl	800b6d4 <VL53L0X_RdByte>
 8008706:	4603      	mov	r3, r0
 8008708:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	f003 0207 	and.w	r2, r3, #7
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	f003 0318 	and.w	r3, r3, #24
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800871e:	23fa      	movs	r3, #250	; 0xfa
 8008720:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <VL53L0X_PerformRefSpadManagement>:

	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
		uint32_t *refSpadCount, uint8_t *isApertureSpads) {
 800872e:	b580      	push	{r7, lr}
 8008730:	b086      	sub	sp, #24
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800873a:	2300      	movs	r3, #0
 800873c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fa04 	bl	8008b50 <VL53L0X_perform_ref_spad_management>
 8008748:	4603      	mov	r3, r0
 800874a:	75fb      	strb	r3, [r7, #23]
			isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800874c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <VL53L0X_get_offset_calibration_data_micro_meter>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(
    VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  uint16_t RangeOffsetRegister;
  int16_t cMaxOffset = 2047;
 8008766:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800876a:	81bb      	strh	r3, [r7, #12]
  int16_t cOffsetRange = 4096;
 800876c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008770:	817b      	strh	r3, [r7, #10]

  /* Note that offset has 10.2 format */

  Status = VL53L0X_RdWord(Dev, VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
 8008772:	f107 0308 	add.w	r3, r7, #8
 8008776:	461a      	mov	r2, r3
 8008778:	2128      	movs	r1, #40	; 0x28
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f002 ffd4 	bl	800b728 <VL53L0X_RdWord>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
                          &RangeOffsetRegister);

  if (Status == VL53L0X_ERROR_NONE) {
 8008784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d11e      	bne.n	80087ca <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
    RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800878c:	893b      	ldrh	r3, [r7, #8]
 800878e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008792:	b29b      	uxth	r3, r3
 8008794:	813b      	strh	r3, [r7, #8]

    /* Apply 12 bit 2's compliment conversion */
    if (RangeOffsetRegister > cMaxOffset)
 8008796:	893b      	ldrh	r3, [r7, #8]
 8008798:	461a      	mov	r2, r3
 800879a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800879e:	429a      	cmp	r2, r3
 80087a0:	dd0b      	ble.n	80087ba <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
      *pOffsetCalibrationDataMicroMeter =
          (int16_t)(RangeOffsetRegister - cOffsetRange) * 250;
 80087a2:	893a      	ldrh	r2, [r7, #8]
 80087a4:	897b      	ldrh	r3, [r7, #10]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	b21b      	sxth	r3, r3
 80087ac:	461a      	mov	r2, r3
 80087ae:	23fa      	movs	r3, #250	; 0xfa
 80087b0:	fb03 f202 	mul.w	r2, r3, r2
      *pOffsetCalibrationDataMicroMeter =
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	e007      	b.n	80087ca <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
    else
      *pOffsetCalibrationDataMicroMeter = (int16_t)RangeOffsetRegister * 250;
 80087ba:	893b      	ldrh	r3, [r7, #8]
 80087bc:	b21b      	sxth	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	23fa      	movs	r3, #250	; 0xfa
 80087c2:	fb03 f202 	mul.w	r2, r3, r2
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	601a      	str	r2, [r3, #0]
  }

  return Status;
 80087ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <get_next_good_spad>:

  return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size, uint32_t curr,
                        int32_t *next) {
 80087d6:	b480      	push	{r7}
 80087d8:	b08b      	sub	sp, #44	; 0x2c
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	603b      	str	r3, [r7, #0]
  uint32_t startIndex;
  uint32_t fineOffset;
  uint32_t cSpadsPerByte = 8;
 80087e4:	2308      	movs	r3, #8
 80087e6:	61bb      	str	r3, [r7, #24]
  uint32_t coarseIndex;
  uint32_t fineIndex;
  uint8_t dataByte;
  uint8_t success = 0;
 80087e8:	2300      	movs	r3, #0
 80087ea:	77bb      	strb	r3, [r7, #30]
   *
   * The coarse index is the byte index of the array and the fine index is
   * the index of the bit within each byte.
   */

  *next = -1;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	f04f 32ff 	mov.w	r2, #4294967295
 80087f2:	601a      	str	r2, [r3, #0]

  startIndex = curr / cSpadsPerByte;
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fc:	617b      	str	r3, [r7, #20]
  fineOffset = curr % cSpadsPerByte;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	fbb3 f2f2 	udiv	r2, r3, r2
 8008806:	69b9      	ldr	r1, [r7, #24]
 8008808:	fb01 f202 	mul.w	r2, r1, r2
 800880c:	1a9b      	subs	r3, r3, r2
 800880e:	613b      	str	r3, [r7, #16]

  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
 8008814:	e030      	b.n	8008878 <get_next_good_spad+0xa2>
       coarseIndex++) {
    fineIndex = 0;
 8008816:	2300      	movs	r3, #0
 8008818:	623b      	str	r3, [r7, #32]
    dataByte = goodSpadArray[coarseIndex];
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	4413      	add	r3, r2
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	77fb      	strb	r3, [r7, #31]

    if (coarseIndex == startIndex) {
 8008824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	429a      	cmp	r2, r3
 800882a:	d11e      	bne.n	800886a <get_next_good_spad+0x94>
      /* locate the bit position of the provided current
       * spad bit before iterating */
      dataByte >>= fineOffset;
 800882c:	7ffa      	ldrb	r2, [r7, #31]
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	fa42 f303 	asr.w	r3, r2, r3
 8008834:	77fb      	strb	r3, [r7, #31]
      fineIndex = fineOffset;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	623b      	str	r3, [r7, #32]
    }

    while (fineIndex < cSpadsPerByte) {
 800883a:	e016      	b.n	800886a <get_next_good_spad+0x94>
      if ((dataByte & 0x1) == 1) {
 800883c:	7ffb      	ldrb	r3, [r7, #31]
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00b      	beq.n	800885e <get_next_good_spad+0x88>
        success = 1;
 8008846:	2301      	movs	r3, #1
 8008848:	77bb      	strb	r3, [r7, #30]
        *next = coarseIndex * cSpadsPerByte + fineIndex;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	fb03 f202 	mul.w	r2, r3, r2
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	4413      	add	r3, r2
 8008856:	461a      	mov	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	601a      	str	r2, [r3, #0]
        break;
 800885c:	e009      	b.n	8008872 <get_next_good_spad+0x9c>
      }
      dataByte >>= 1;
 800885e:	7ffb      	ldrb	r3, [r7, #31]
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	77fb      	strb	r3, [r7, #31]
      fineIndex++;
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	3301      	adds	r3, #1
 8008868:	623b      	str	r3, [r7, #32]
    while (fineIndex < cSpadsPerByte) {
 800886a:	6a3a      	ldr	r2, [r7, #32]
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	429a      	cmp	r2, r3
 8008870:	d3e4      	bcc.n	800883c <get_next_good_spad+0x66>
       coarseIndex++) {
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008874:	3301      	adds	r3, #1
 8008876:	627b      	str	r3, [r7, #36]	; 0x24
  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	429a      	cmp	r2, r3
 800887e:	d202      	bcs.n	8008886 <get_next_good_spad+0xb0>
 8008880:	7fbb      	ldrb	r3, [r7, #30]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0c7      	beq.n	8008816 <get_next_good_spad+0x40>
    }
  }
}
 8008886:	bf00      	nop
 8008888:	372c      	adds	r7, #44	; 0x2c
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
	...

08008894 <is_aperture>:

uint8_t is_aperture(uint32_t spadIndex) {
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /*
   * This function reports if a given spad index is an aperture SPAD by
   * deriving the quadrant.
   */
  uint32_t quadrant;
  uint8_t isAperture = 1;
 800889c:	2301      	movs	r3, #1
 800889e:	73fb      	strb	r3, [r7, #15]
  quadrant = spadIndex >> 6;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	099b      	lsrs	r3, r3, #6
 80088a4:	60bb      	str	r3, [r7, #8]
  if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80088a6:	4a07      	ldr	r2, [pc, #28]	; (80088c4 <is_aperture+0x30>)
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <is_aperture+0x22>
    isAperture = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]

  return isAperture;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	200002b8 	.word	0x200002b8

080088c8 <enable_spad_bit>:

VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
                              uint32_t spadIndex) {
 80088c8:	b480      	push	{r7}
 80088ca:	b089      	sub	sp, #36	; 0x24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80088d4:	2300      	movs	r3, #0
 80088d6:	77fb      	strb	r3, [r7, #31]
  uint32_t cSpadsPerByte = 8;
 80088d8:	2308      	movs	r3, #8
 80088da:	61bb      	str	r3, [r7, #24]
  uint32_t coarseIndex;
  uint32_t fineIndex;

  coarseIndex = spadIndex / cSpadsPerByte;
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e4:	617b      	str	r3, [r7, #20]
  fineIndex = spadIndex % cSpadsPerByte;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80088ee:	69b9      	ldr	r1, [r7, #24]
 80088f0:	fb01 f202 	mul.w	r2, r1, r2
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	613b      	str	r3, [r7, #16]
  if (coarseIndex >= size)
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d302      	bcc.n	8008906 <enable_spad_bit+0x3e>
    status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008900:	23ce      	movs	r3, #206	; 0xce
 8008902:	77fb      	strb	r3, [r7, #31]
 8008904:	e010      	b.n	8008928 <enable_spad_bit+0x60>
  else
    spadArray[coarseIndex] |= (1 << fineIndex);
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	4413      	add	r3, r2
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	b25a      	sxtb	r2, r3
 8008910:	2101      	movs	r1, #1
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	fa01 f303 	lsl.w	r3, r1, r3
 8008918:	b25b      	sxtb	r3, r3
 800891a:	4313      	orrs	r3, r2
 800891c:	b259      	sxtb	r1, r3
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	4413      	add	r3, r2
 8008924:	b2ca      	uxtb	r2, r1
 8008926:	701a      	strb	r2, [r3, #0]

  return status;
 8008928:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3724      	adds	r7, #36	; 0x24
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <set_ref_spad_map>:
  }

  return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray) {
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_WriteMulti(
 8008942:	2306      	movs	r3, #6
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	21b0      	movs	r1, #176	; 0xb0
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f002 fde5 	bl	800b518 <VL53L0X_WriteMulti>
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]
      Dev, VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, refSpadArray, 6);
  return status;
 8008952:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray) {
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_ReadMulti(
 8008968:	2306      	movs	r3, #6
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	21b0      	movs	r1, #176	; 0xb0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f002 fe02 	bl	800b578 <VL53L0X_ReadMulti>
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]
      Dev, VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, refSpadArray, 6);
  return status;
 8008978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <enable_ref_spads>:

VL53L0X_Error enable_ref_spads(VL53L0X_DEV Dev, uint8_t apertureSpads,
                               uint8_t goodSpadArray[], uint8_t spadArray[],
                               uint32_t size, uint32_t start, uint32_t offset,
                               uint32_t spadCount, uint32_t *lastSpad) {
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	; 0x30
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	607a      	str	r2, [r7, #4]
 800898e:	603b      	str	r3, [r7, #0]
 8008990:	460b      	mov	r3, r1
 8008992:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008994:	2300      	movs	r3, #0
 8008996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t index;
  uint32_t i;
  int32_t nextGoodSpad = offset;
 800899a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800899c:	61fb      	str	r3, [r7, #28]
   *
   * This function applies to only aperture or only non-aperture spads.
   * Checks are performed to ensure this.
   */

  currentSpad = offset;
 800899e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a0:	623b      	str	r3, [r7, #32]
  for (index = 0; index < spadCount; index++) {
 80089a2:	2300      	movs	r3, #0
 80089a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80089a6:	e02b      	b.n	8008a00 <enable_ref_spads+0x7c>
    get_next_good_spad(goodSpadArray, size, currentSpad, &nextGoodSpad);
 80089a8:	f107 031c 	add.w	r3, r7, #28
 80089ac:	6a3a      	ldr	r2, [r7, #32]
 80089ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff ff10 	bl	80087d6 <get_next_good_spad>

    if (nextGoodSpad == -1) {
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089bc:	d103      	bne.n	80089c6 <enable_ref_spads+0x42>
      status = VL53L0X_ERROR_REF_SPAD_INIT;
 80089be:	23ce      	movs	r3, #206	; 0xce
 80089c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 80089c4:	e020      	b.n	8008a08 <enable_ref_spads+0x84>
    }

    /* Confirm that the next good SPAD is non-aperture */
    if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	461a      	mov	r2, r3
 80089ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089cc:	4413      	add	r3, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7ff ff60 	bl	8008894 <is_aperture>
 80089d4:	4603      	mov	r3, r0
 80089d6:	461a      	mov	r2, r3
 80089d8:	7afb      	ldrb	r3, [r7, #11]
 80089da:	4293      	cmp	r3, r2
 80089dc:	d003      	beq.n	80089e6 <enable_ref_spads+0x62>
      /* if we can't get the required number of good aperture
       * spads from the current quadrant then this is an error
       */
      status = VL53L0X_ERROR_REF_SPAD_INIT;
 80089de:	23ce      	movs	r3, #206	; 0xce
 80089e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 80089e4:	e010      	b.n	8008a08 <enable_ref_spads+0x84>
    }
    currentSpad = (uint32_t)nextGoodSpad;
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	623b      	str	r3, [r7, #32]
    enable_spad_bit(spadArray, size, currentSpad);
 80089ea:	6a3a      	ldr	r2, [r7, #32]
 80089ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80089ee:	6838      	ldr	r0, [r7, #0]
 80089f0:	f7ff ff6a 	bl	80088c8 <enable_spad_bit>
    currentSpad++;
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	3301      	adds	r3, #1
 80089f8:	623b      	str	r3, [r7, #32]
  for (index = 0; index < spadCount; index++) {
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	3301      	adds	r3, #1
 80089fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d3cf      	bcc.n	80089a8 <enable_ref_spads+0x24>
  }
  *lastSpad = currentSpad;
 8008a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a0a:	6a3a      	ldr	r2, [r7, #32]
 8008a0c:	601a      	str	r2, [r3, #0]

  if (status == VL53L0X_ERROR_NONE)
 8008a0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <enable_ref_spads+0xa0>
    status = set_ref_spad_map(Dev, spadArray);
 8008a16:	6839      	ldr	r1, [r7, #0]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff ff8d 	bl	8008938 <set_ref_spad_map>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (status == VL53L0X_ERROR_NONE) {
 8008a24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d121      	bne.n	8008a70 <enable_ref_spads+0xec>
    status = get_ref_spad_map(Dev, checkSpadArray);
 8008a2c:	f107 0314 	add.w	r3, r7, #20
 8008a30:	4619      	mov	r1, r3
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f7ff ff93 	bl	800895e <get_ref_spad_map>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    i = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24

    /* Compare spad maps. If not equal report error. */
    while (i < size) {
 8008a42:	e011      	b.n	8008a68 <enable_ref_spads+0xe4>
      if (spadArray[i] != checkSpadArray[i]) {
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	4413      	add	r3, r2
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	f107 0114 	add.w	r1, r7, #20
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	440b      	add	r3, r1
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d003      	beq.n	8008a62 <enable_ref_spads+0xde>
        status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008a5a:	23ce      	movs	r3, #206	; 0xce
 8008a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8008a60:	e006      	b.n	8008a70 <enable_ref_spads+0xec>
      }
      i++;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	3301      	adds	r3, #1
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
    while (i < size) {
 8008a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d3e9      	bcc.n	8008a44 <enable_ref_spads+0xc0>
    }
  }
  return status;
 8008a70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3730      	adds	r7, #48	; 0x30
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <perform_ref_signal_measurement>:

VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
                                             uint16_t *refSignalRate) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b08a      	sub	sp, #40	; 0x28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008a86:	2300      	movs	r3, #0
 8008a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  VL53L0X_RangingMeasurementData_t rangingMeasurementData;

  uint8_t SequenceConfig = 0;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /*
   * This function performs a reference signal rate measurement.
   */
  if (status == VL53L0X_ERROR_NONE)
 8008a9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d107      	bne.n	8008ab4 <perform_ref_signal_measurement+0x38>
    status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);
 8008aa4:	22c0      	movs	r2, #192	; 0xc0
 8008aa6:	2101      	movs	r1, #1
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f002 fd91 	bl	800b5d0 <VL53L0X_WrByte>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 8008ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d108      	bne.n	8008ace <perform_ref_signal_measurement+0x52>
    status =
        VL53L0X_PerformSingleRangingMeasurement(Dev, &rangingMeasurementData);
 8008abc:	f107 0308 	add.w	r3, r7, #8
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff fc46 	bl	8008354 <VL53L0X_PerformSingleRangingMeasurement>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 8008ace:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d107      	bne.n	8008ae6 <perform_ref_signal_measurement+0x6a>
    status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	21ff      	movs	r1, #255	; 0xff
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f002 fd78 	bl	800b5d0 <VL53L0X_WrByte>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 8008ae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d107      	bne.n	8008afe <perform_ref_signal_measurement+0x82>
    status = VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	21b6      	movs	r1, #182	; 0xb6
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f002 fe18 	bl	800b728 <VL53L0X_RdWord>
 8008af8:	4603      	mov	r3, r0
 8008afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            refSignalRate);

  if (status == VL53L0X_ERROR_NONE)
 8008afe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d107      	bne.n	8008b16 <perform_ref_signal_measurement+0x9a>
    status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008b06:	2200      	movs	r2, #0
 8008b08:	21ff      	movs	r1, #255	; 0xff
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f002 fd60 	bl	800b5d0 <VL53L0X_WrByte>
 8008b10:	4603      	mov	r3, r0
 8008b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE) {
 8008b16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d112      	bne.n	8008b44 <perform_ref_signal_measurement+0xc8>
    /* restore the previous Sequence Config */
    status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 8008b1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008b22:	461a      	mov	r2, r3
 8008b24:	2101      	movs	r1, #1
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f002 fd52 	bl	800b5d0 <VL53L0X_WrByte>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status == VL53L0X_ERROR_NONE)
 8008b32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <perform_ref_signal_measurement+0xc8>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008b40:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return status;
 8008b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3728      	adds	r7, #40	; 0x28
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
                                                  uint32_t *refSpadCount,
                                                  uint8_t *isApertureSpads) {
 8008b50:	b590      	push	{r4, r7, lr}
 8008b52:	b09d      	sub	sp, #116	; 0x74
 8008b54:	af06      	add	r7, sp, #24
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t lastSpadArray[6];
  uint8_t startSelect = 0xB4;
 8008b62:	23b4      	movs	r3, #180	; 0xb4
 8008b64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  uint32_t minimumSpadCount = 3;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t maxSpadCount = 44;
 8008b6c:	232c      	movs	r3, #44	; 0x2c
 8008b6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t currentSpadIndex = 0;
 8008b70:	2300      	movs	r3, #0
 8008b72:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t lastSpadIndex = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	61bb      	str	r3, [r7, #24]
  int32_t nextGoodSpad = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	617b      	str	r3, [r7, #20]
  uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8008b7c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8008b80:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t peakSignalRateRef;
  uint32_t needAptSpads = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t index = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t spadArraySize = 6;
 8008b8a:	2306      	movs	r3, #6
 8008b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t signalRateDiff = 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t lastSignalRateDiff = 0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t complete = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t VhvSettings = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	747b      	strb	r3, [r7, #17]
  uint8_t PhaseCal = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	743b      	strb	r3, [r7, #16]
  uint32_t refSpadCount_int = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t isApertureSpads_int = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   * The start point is currently fixed to 180, which lies towards the end
   * of the non-aperture quadrant and runs in to the adjacent aperture
   * quadrant.
   */

  targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008bb4:	85fb      	strh	r3, [r7, #46]	; 0x2e
   * This is a short term implementation. The good spad map will be
   * provided as an input.
   * Note that there are 6 bytes. Only the first 44 bits will be used to
   * represent spads.
   */
  for (index = 0; index < spadArraySize; index++)
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bba:	e009      	b.n	8008bd0 <VL53L0X_perform_ref_spad_management+0x80>
    Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	701a      	strb	r2, [r3, #0]
  for (index = 0; index < spadArraySize; index++)
 8008bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bcc:	3301      	adds	r3, #1
 8008bce:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d3f1      	bcc.n	8008bbc <VL53L0X_perform_ref_spad_management+0x6c>

  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008bd8:	2201      	movs	r2, #1
 8008bda:	21ff      	movs	r1, #255	; 0xff
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f002 fcf7 	bl	800b5d0 <VL53L0X_WrByte>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 8008be8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d107      	bne.n	8008c00 <VL53L0X_perform_ref_spad_management+0xb0>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	214f      	movs	r1, #79	; 0x4f
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f002 fceb 	bl	800b5d0 <VL53L0X_WrByte>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 8008c00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d107      	bne.n	8008c18 <VL53L0X_perform_ref_spad_management+0xc8>
    Status = VL53L0X_WrByte(
 8008c08:	222c      	movs	r2, #44	; 0x2c
 8008c0a:	214e      	movs	r1, #78	; 0x4e
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f002 fcdf 	bl	800b5d0 <VL53L0X_WrByte>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

  if (Status == VL53L0X_ERROR_NONE)
 8008c18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d107      	bne.n	8008c30 <VL53L0X_perform_ref_spad_management+0xe0>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008c20:	2200      	movs	r2, #0
 8008c22:	21ff      	movs	r1, #255	; 0xff
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f002 fcd3 	bl	800b5d0 <VL53L0X_WrByte>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 8008c30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d109      	bne.n	8008c4c <VL53L0X_perform_ref_spad_management+0xfc>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
 8008c38:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	21b6      	movs	r1, #182	; 0xb6
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f002 fcc5 	bl	800b5d0 <VL53L0X_WrByte>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                            startSelect);

  if (Status == VL53L0X_ERROR_NONE)
 8008c4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d107      	bne.n	8008c64 <VL53L0X_perform_ref_spad_management+0x114>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);
 8008c54:	2200      	movs	r2, #0
 8008c56:	2180      	movs	r1, #128	; 0x80
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f002 fcb9 	bl	800b5d0 <VL53L0X_WrByte>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Perform ref calibration */
  if (Status == VL53L0X_ERROR_NONE)
 8008c64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <VL53L0X_perform_ref_spad_management+0x132>
    Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings, &PhaseCal, 0);
 8008c6c:	f107 0210 	add.w	r2, r7, #16
 8008c70:	f107 0111 	add.w	r1, r7, #17
 8008c74:	2300      	movs	r3, #0
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 fbbb 	bl	80093f2 <VL53L0X_perform_ref_calibration>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE) {
 8008c82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d121      	bne.n	8008cce <VL53L0X_perform_ref_spad_management+0x17e>
    /* Enable Minimum NON-APERTURE Spads */
    currentSpadIndex = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	653b      	str	r3, [r7, #80]	; 0x50
    lastSpadIndex = currentSpadIndex;
 8008c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c90:	61bb      	str	r3, [r7, #24]
    needAptSpads = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	64fb      	str	r3, [r7, #76]	; 0x4c
    Status = enable_ref_spads(
 8008c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c98:	b2d9      	uxtb	r1, r3
        Dev, needAptSpads, Dev->Data.SpadData.RefGoodSpadMap,
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
        Dev->Data.SpadData.RefSpadEnables, spadArraySize, startSelect,
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 7492 	add.w	r4, r3, #292	; 0x124
    Status = enable_ref_spads(
 8008ca6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008caa:	f107 0218 	add.w	r2, r7, #24
 8008cae:	9204      	str	r2, [sp, #16]
 8008cb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cb2:	9203      	str	r2, [sp, #12]
 8008cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cb6:	9202      	str	r2, [sp, #8]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	4623      	mov	r3, r4
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff fe5e 	bl	8008984 <enable_ref_spads>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        currentSpadIndex, minimumSpadCount, &lastSpadIndex);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8008cce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d174      	bne.n	8008dc0 <VL53L0X_perform_ref_spad_management+0x270>
    currentSpadIndex = lastSpadIndex;
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	653b      	str	r3, [r7, #80]	; 0x50

    Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 8008cda:	f107 0312 	add.w	r3, r7, #18
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff fecb 	bl	8008a7c <perform_ref_signal_measurement>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if ((Status == VL53L0X_ERROR_NONE) && (peakSignalRateRef > targetRefRate)) {
 8008cec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d161      	bne.n	8008db8 <VL53L0X_perform_ref_spad_management+0x268>
 8008cf4:	8a7b      	ldrh	r3, [r7, #18]
 8008cf6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d25d      	bcs.n	8008db8 <VL53L0X_perform_ref_spad_management+0x268>
      /* Signal rate measurement too high,
       * switch to APERTURE SPADs */

      for (index = 0; index < spadArraySize; index++)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d00:	e009      	b.n	8008d16 <VL53L0X_perform_ref_spad_management+0x1c6>
        Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	701a      	strb	r2, [r3, #0]
      for (index = 0; index < spadArraySize; index++)
 8008d10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d12:	3301      	adds	r3, #1
 8008d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d3f1      	bcc.n	8008d02 <VL53L0X_perform_ref_spad_management+0x1b2>

      /* Increment to the first APERTURE spad */
      while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008d1e:	e002      	b.n	8008d26 <VL53L0X_perform_ref_spad_management+0x1d6>
             (currentSpadIndex < maxSpadCount)) {
        currentSpadIndex++;
 8008d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d22:	3301      	adds	r3, #1
 8008d24:	653b      	str	r3, [r7, #80]	; 0x50
      while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008d26:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d2c:	4413      	add	r3, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7ff fdb0 	bl	8008894 <is_aperture>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d103      	bne.n	8008d42 <VL53L0X_perform_ref_spad_management+0x1f2>
 8008d3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d3ee      	bcc.n	8008d20 <VL53L0X_perform_ref_spad_management+0x1d0>
      }

      needAptSpads = 1;
 8008d42:	2301      	movs	r3, #1
 8008d44:	64fb      	str	r3, [r7, #76]	; 0x4c

      Status = enable_ref_spads(
 8008d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d48:	b2d9      	uxtb	r1, r3
          Dev, needAptSpads, Dev->Data.SpadData.RefGoodSpadMap,
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
          Dev->Data.SpadData.RefSpadEnables, spadArraySize, startSelect,
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f503 7492 	add.w	r4, r3, #292	; 0x124
      Status = enable_ref_spads(
 8008d56:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008d5a:	f107 0218 	add.w	r2, r7, #24
 8008d5e:	9204      	str	r2, [sp, #16]
 8008d60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d62:	9203      	str	r2, [sp, #12]
 8008d64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d66:	9202      	str	r2, [sp, #8]
 8008d68:	9301      	str	r3, [sp, #4]
 8008d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	4623      	mov	r3, r4
 8008d70:	4602      	mov	r2, r0
 8008d72:	68f8      	ldr	r0, [r7, #12]
 8008d74:	f7ff fe06 	bl	8008984 <enable_ref_spads>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          currentSpadIndex, minimumSpadCount, &lastSpadIndex);

      if (Status == VL53L0X_ERROR_NONE) {
 8008d7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d11b      	bne.n	8008dbe <VL53L0X_perform_ref_spad_management+0x26e>
        currentSpadIndex = lastSpadIndex;
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	653b      	str	r3, [r7, #80]	; 0x50
        Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 8008d8a:	f107 0312 	add.w	r3, r7, #18
 8008d8e:	4619      	mov	r1, r3
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7ff fe73 	bl	8008a7c <perform_ref_signal_measurement>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if ((Status == VL53L0X_ERROR_NONE) &&
 8008d9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10c      	bne.n	8008dbe <VL53L0X_perform_ref_spad_management+0x26e>
            (peakSignalRateRef > targetRefRate)) {
 8008da4:	8a7b      	ldrh	r3, [r7, #18]
        if ((Status == VL53L0X_ERROR_NONE) &&
 8008da6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d208      	bcs.n	8008dbe <VL53L0X_perform_ref_spad_management+0x26e>
           * setting the minimum number of
           * APERTURE spads. Can do no more
           * therefore set the min number of
           * aperture spads as the result.
           */
          isApertureSpads_int = 1;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          refSpadCount_int = minimumSpadCount;
 8008db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db4:	63fb      	str	r3, [r7, #60]	; 0x3c
      if (Status == VL53L0X_ERROR_NONE) {
 8008db6:	e002      	b.n	8008dbe <VL53L0X_perform_ref_spad_management+0x26e>
        }
      }
    } else {
      needAptSpads = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dbc:	e000      	b.n	8008dc0 <VL53L0X_perform_ref_spad_management+0x270>
      if (Status == VL53L0X_ERROR_NONE) {
 8008dbe:	bf00      	nop
    }
  }

  if ((Status == VL53L0X_ERROR_NONE) && (peakSignalRateRef < targetRefRate)) {
 8008dc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 80af 	bne.w	8008f28 <VL53L0X_perform_ref_spad_management+0x3d8>
 8008dca:	8a7b      	ldrh	r3, [r7, #18]
 8008dcc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	f240 80aa 	bls.w	8008f28 <VL53L0X_perform_ref_spad_management+0x3d8>
    /* At this point, the minimum number of either aperture
     * or non-aperture spads have been set. Proceed to add
     * spads and perform measurements until the target
     * reference is reached.
     */
    isApertureSpads_int = needAptSpads;
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    refSpadCount_int = minimumSpadCount;
 8008dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c

    memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables, spadArraySize);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008de4:	f107 031c 	add.w	r3, r7, #28
 8008de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dea:	4618      	mov	r0, r3
 8008dec:	f005 fccd 	bl	800e78a <memcpy>
    lastSignalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008df0:	8a7b      	ldrh	r3, [r7, #18]
 8008df2:	461a      	mov	r2, r3
 8008df4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bfb8      	it	lt
 8008dfc:	425b      	neglt	r3, r3
 8008dfe:	647b      	str	r3, [r7, #68]	; 0x44
    complete = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    while (!complete) {
 8008e06:	e086      	b.n	8008f16 <VL53L0X_perform_ref_spad_management+0x3c6>
      get_next_good_spad(Dev->Data.SpadData.RefGoodSpadMap, spadArraySize,
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
 8008e0e:	f107 0314 	add.w	r3, r7, #20
 8008e12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e16:	f7ff fcde 	bl	80087d6 <get_next_good_spad>
                         currentSpadIndex, &nextGoodSpad);

      if (nextGoodSpad == -1) {
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e20:	d103      	bne.n	8008e2a <VL53L0X_perform_ref_spad_management+0x2da>
        Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008e22:	23ce      	movs	r3, #206	; 0xce
 8008e24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        break;
 8008e28:	e07e      	b.n	8008f28 <VL53L0X_perform_ref_spad_management+0x3d8>
      }

      (refSpadCount_int)++;
 8008e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Cannot combine Aperture and Non-Aperture spads, so
       * ensure the current spad is of the correct type.
       */
      if (is_aperture((uint32_t)startSelect + nextGoodSpad) != needAptSpads) {
 8008e30:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	4413      	add	r3, r2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff fd2b 	bl	8008894 <is_aperture>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	461a      	mov	r2, r3
 8008e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d003      	beq.n	8008e50 <VL53L0X_perform_ref_spad_management+0x300>
        Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008e48:	23ce      	movs	r3, #206	; 0xce
 8008e4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        break;
 8008e4e:	e06b      	b.n	8008f28 <VL53L0X_perform_ref_spad_management+0x3d8>
      }

      currentSpadIndex = nextGoodSpad;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	653b      	str	r3, [r7, #80]	; 0x50
      Status = enable_spad_bit(Dev->Data.SpadData.RefSpadEnables, spadArraySize,
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008e5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fd32 	bl	80088c8 <enable_spad_bit>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                               currentSpadIndex);

      if (Status == VL53L0X_ERROR_NONE) {
 8008e6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10c      	bne.n	8008e8c <VL53L0X_perform_ref_spad_management+0x33c>
        currentSpadIndex++;
 8008e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e74:	3301      	adds	r3, #1
 8008e76:	653b      	str	r3, [r7, #80]	; 0x50
        /* Proceed to apply the additional spad and
         * perform measurement. */
        Status = set_ref_spad_map(Dev, Dev->Data.SpadData.RefSpadEnables);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f7ff fd59 	bl	8008938 <set_ref_spad_map>
 8008e86:	4603      	mov	r3, r0
 8008e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      }

      if (Status != VL53L0X_ERROR_NONE)
 8008e8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d146      	bne.n	8008f22 <VL53L0X_perform_ref_spad_management+0x3d2>
        break;

      Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 8008e94:	f107 0312 	add.w	r3, r7, #18
 8008e98:	4619      	mov	r1, r3
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff fdee 	bl	8008a7c <perform_ref_signal_measurement>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

      if (Status != VL53L0X_ERROR_NONE)
 8008ea6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d13b      	bne.n	8008f26 <VL53L0X_perform_ref_spad_management+0x3d6>
        break;

      signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008eae:	8a7b      	ldrh	r3, [r7, #18]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	bfb8      	it	lt
 8008eba:	425b      	neglt	r3, r3
 8008ebc:	627b      	str	r3, [r7, #36]	; 0x24

      if (peakSignalRateRef > targetRefRate) {
 8008ebe:	8a7b      	ldrh	r3, [r7, #18]
 8008ec0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d21c      	bcs.n	8008f00 <VL53L0X_perform_ref_spad_management+0x3b0>
        /* Select the spad map that provides the
         * measurement closest to the target rate,
         * either above or below it.
         */
        if (signalRateDiff > lastSignalRateDiff) {
 8008ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d914      	bls.n	8008ef8 <VL53L0X_perform_ref_spad_management+0x3a8>
          /* Previous spad map produced a closer
           * measurement, so choose this. */
          Status = set_ref_spad_map(Dev, lastSpadArray);
 8008ece:	f107 031c 	add.w	r3, r7, #28
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fd2f 	bl	8008938 <set_ref_spad_map>
 8008eda:	4603      	mov	r3, r0
 8008edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          memcpy(Dev->Data.SpadData.RefSpadEnables, lastSpadArray,
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008ee6:	f107 011c 	add.w	r1, r7, #28
 8008eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eec:	4618      	mov	r0, r3
 8008eee:	f005 fc4c 	bl	800e78a <memcpy>
                 spadArraySize);

          (refSpadCount_int)--;
 8008ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        complete = 1;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efe:	e00a      	b.n	8008f16 <VL53L0X_perform_ref_spad_management+0x3c6>
      } else {
        /* Continue to add spads */
        lastSignalRateDiff = signalRateDiff;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	647b      	str	r3, [r7, #68]	; 0x44
        memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables, spadArraySize);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008f0a:	f107 031c 	add.w	r3, r7, #28
 8008f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f10:	4618      	mov	r0, r3
 8008f12:	f005 fc3a 	bl	800e78a <memcpy>
    while (!complete) {
 8008f16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f43f af74 	beq.w	8008e08 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008f20:	e002      	b.n	8008f28 <VL53L0X_perform_ref_spad_management+0x3d8>
        break;
 8008f22:	bf00      	nop
 8008f24:	e000      	b.n	8008f28 <VL53L0X_perform_ref_spad_management+0x3d8>
        break;
 8008f26:	bf00      	nop
      }

    } /* while */
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8008f28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d115      	bne.n	8008f5c <VL53L0X_perform_ref_spad_management+0x40c>
    *refSpadCount = refSpadCount_int;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f34:	601a      	str	r2, [r3, #0]
    *isApertureSpads = isApertureSpads_int;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008f3c:	701a      	strb	r2, [r3, #0]

    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	b2da      	uxtb	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                       (uint8_t)(*refSpadCount));
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                       *isApertureSpads);
  }

  return Status;
 8008f5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	375c      	adds	r7, #92	; 0x5c
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd90      	pop	{r4, r7, pc}

08008f68 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev, uint32_t count,
                                          uint8_t isApertureSpads) {
 8008f68:	b590      	push	{r4, r7, lr}
 8008f6a:	b093      	sub	sp, #76	; 0x4c
 8008f6c:	af06      	add	r7, sp, #24
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	71fb      	strb	r3, [r7, #7]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t currentSpadIndex = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint8_t startSelect = 0xB4;
 8008f80:	23b4      	movs	r3, #180	; 0xb4
 8008f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t spadArraySize = 6;
 8008f86:	2306      	movs	r3, #6
 8008f88:	61fb      	str	r3, [r7, #28]
  uint32_t maxSpadCount = 44;
 8008f8a:	232c      	movs	r3, #44	; 0x2c
 8008f8c:	61bb      	str	r3, [r7, #24]
   * aperture or
   * non-aperture, as requested.
   * The good spad map will be applied.
   */

  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f8e:	2201      	movs	r2, #1
 8008f90:	21ff      	movs	r1, #255	; 0xff
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f002 fb1c 	bl	800b5d0 <VL53L0X_WrByte>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (Status == VL53L0X_ERROR_NONE)
 8008f9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d107      	bne.n	8008fb6 <VL53L0X_set_reference_spads+0x4e>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	214f      	movs	r1, #79	; 0x4f
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f002 fb10 	bl	800b5d0 <VL53L0X_WrByte>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (Status == VL53L0X_ERROR_NONE)
 8008fb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d107      	bne.n	8008fce <VL53L0X_set_reference_spads+0x66>
    Status = VL53L0X_WrByte(
 8008fbe:	222c      	movs	r2, #44	; 0x2c
 8008fc0:	214e      	movs	r1, #78	; 0x4e
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f002 fb04 	bl	800b5d0 <VL53L0X_WrByte>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        Dev, VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

  if (Status == VL53L0X_ERROR_NONE)
 8008fce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d107      	bne.n	8008fe6 <VL53L0X_set_reference_spads+0x7e>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	21ff      	movs	r1, #255	; 0xff
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f002 faf8 	bl	800b5d0 <VL53L0X_WrByte>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (Status == VL53L0X_ERROR_NONE)
 8008fe6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d109      	bne.n	8009002 <VL53L0X_set_reference_spads+0x9a>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
 8008fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	21b6      	movs	r1, #182	; 0xb6
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f002 faea 	bl	800b5d0 <VL53L0X_WrByte>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                            startSelect);

  for (index = 0; index < spadArraySize; index++)
 8009002:	2300      	movs	r3, #0
 8009004:	627b      	str	r3, [r7, #36]	; 0x24
 8009006:	e009      	b.n	800901c <VL53L0X_set_reference_spads+0xb4>
    Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	4413      	add	r3, r2
 800900e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009012:	2200      	movs	r2, #0
 8009014:	701a      	strb	r2, [r3, #0]
  for (index = 0; index < spadArraySize; index++)
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	3301      	adds	r3, #1
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
 800901c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	429a      	cmp	r2, r3
 8009022:	d3f1      	bcc.n	8009008 <VL53L0X_set_reference_spads+0xa0>

  if (isApertureSpads) {
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d011      	beq.n	800904e <VL53L0X_set_reference_spads+0xe6>
    /* Increment to the first APERTURE spad */
    while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800902a:	e002      	b.n	8009032 <VL53L0X_set_reference_spads+0xca>
           (currentSpadIndex < maxSpadCount)) {
      currentSpadIndex++;
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	3301      	adds	r3, #1
 8009030:	62bb      	str	r3, [r7, #40]	; 0x28
    while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009032:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	4413      	add	r3, r2
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff fc2a 	bl	8008894 <is_aperture>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d103      	bne.n	800904e <VL53L0X_set_reference_spads+0xe6>
 8009046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	429a      	cmp	r2, r3
 800904c:	d3ee      	bcc.n	800902c <VL53L0X_set_reference_spads+0xc4>
    }
  }
  Status =
      enable_ref_spads(Dev, isApertureSpads, Dev->Data.SpadData.RefGoodSpadMap,
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f503 7095 	add.w	r0, r3, #298	; 0x12a
                       Dev->Data.SpadData.RefSpadEnables, spadArraySize,
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f503 7492 	add.w	r4, r3, #292	; 0x124
      enable_ref_spads(Dev, isApertureSpads, Dev->Data.SpadData.RefGoodSpadMap,
 800905a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800905e:	79f9      	ldrb	r1, [r7, #7]
 8009060:	f107 0214 	add.w	r2, r7, #20
 8009064:	9204      	str	r2, [sp, #16]
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	9203      	str	r2, [sp, #12]
 800906a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800906c:	9202      	str	r2, [sp, #8]
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	4623      	mov	r3, r4
 8009076:	4602      	mov	r2, r0
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f7ff fc83 	bl	8008984 <enable_ref_spads>
 800907e:	4603      	mov	r3, r0
 8009080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                       startSelect, currentSpadIndex, count, &lastSpadIndex);

  if (Status == VL53L0X_ERROR_NONE) {
 8009084:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10c      	bne.n	80090a6 <VL53L0X_set_reference_spads+0x13e>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	b2da      	uxtb	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                       (uint8_t)(count));
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType, isApertureSpads);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	79fa      	ldrb	r2, [r7, #7]
 80090a2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
  }

  return Status;
 80090a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3734      	adds	r7, #52	; 0x34
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd90      	pop	{r4, r7, pc}

080090b2 <VL53L0X_perform_single_ref_calibration>:

  return Status;
}

VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
                                                     uint8_t vhv_init_byte) {
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	460b      	mov	r3, r1
 80090bc:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090be:	2300      	movs	r3, #0
 80090c0:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 80090c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10a      	bne.n	80090e0 <VL53L0X_perform_single_ref_calibration+0x2e>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	f043 0301 	orr.w	r3, r3, #1
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	461a      	mov	r2, r3
 80090d4:	2100      	movs	r1, #0
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f002 fa7a 	bl	800b5d0 <VL53L0X_WrByte>
 80090dc:	4603      	mov	r3, r0
 80090de:	73fb      	strb	r3, [r7, #15]
                       VL53L0X_REG_SYSRANGE_MODE_START_STOP | vhv_init_byte);

  if (Status == VL53L0X_ERROR_NONE)
 80090e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d104      	bne.n	80090f2 <VL53L0X_perform_single_ref_calibration+0x40>
    Status = VL53L0X_measurement_poll_for_completion(Dev);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f9bf 	bl	800946c <VL53L0X_measurement_poll_for_completion>
 80090ee:	4603      	mov	r3, r0
 80090f0:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE){
 80090f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d105      	bne.n	8009106 <VL53L0X_perform_single_ref_calibration+0x54>
    Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80090fa:	2100      	movs	r1, #0
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff fab1 	bl	8008664 <VL53L0X_ClearInterruptMask>
 8009102:	4603      	mov	r3, r0
 8009104:	73fb      	strb	r3, [r7, #15]
  }

  if (Status == VL53L0X_ERROR_NONE)
 8009106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <VL53L0X_perform_single_ref_calibration+0x6a>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800910e:	2200      	movs	r2, #0
 8009110:	2100      	movs	r1, #0
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f002 fa5c 	bl	800b5d0 <VL53L0X_WrByte>
 8009118:	4603      	mov	r3, r0
 800911a:	73fb      	strb	r3, [r7, #15]

  return Status;
 800911c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(
    VL53L0X_DEV Dev, uint8_t read_not_write, uint8_t VhvSettings,
    uint8_t PhaseCal, uint8_t *pVhvSettings, uint8_t *pPhaseCal,
    const uint8_t vhv_enable, const uint8_t phase_enable) {
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	4608      	mov	r0, r1
 8009132:	4611      	mov	r1, r2
 8009134:	461a      	mov	r2, r3
 8009136:	4603      	mov	r3, r0
 8009138:	70fb      	strb	r3, [r7, #3]
 800913a:	460b      	mov	r3, r1
 800913c:	70bb      	strb	r3, [r7, #2]
 800913e:	4613      	mov	r3, r2
 8009140:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]
  uint8_t PhaseCalint = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	73bb      	strb	r3, [r7, #14]

  /* Read VHV from device */
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800914a:	2201      	movs	r2, #1
 800914c:	21ff      	movs	r1, #255	; 0xff
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f002 fa3e 	bl	800b5d0 <VL53L0X_WrByte>
 8009154:	4603      	mov	r3, r0
 8009156:	461a      	mov	r2, r3
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	4313      	orrs	r3, r2
 800915c:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800915e:	2200      	movs	r2, #0
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f002 fa34 	bl	800b5d0 <VL53L0X_WrByte>
 8009168:	4603      	mov	r3, r0
 800916a:	461a      	mov	r2, r3
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	4313      	orrs	r3, r2
 8009170:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009172:	2200      	movs	r2, #0
 8009174:	21ff      	movs	r1, #255	; 0xff
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f002 fa2a 	bl	800b5d0 <VL53L0X_WrByte>
 800917c:	4603      	mov	r3, r0
 800917e:	461a      	mov	r2, r3
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	4313      	orrs	r3, r2
 8009184:	73fb      	strb	r3, [r7, #15]

  if (read_not_write) {
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01e      	beq.n	80091ca <VL53L0X_ref_calibration_io+0xa2>
    if (vhv_enable)
 800918c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d009      	beq.n	80091a8 <VL53L0X_ref_calibration_io+0x80>
      Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	21cb      	movs	r1, #203	; 0xcb
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f002 fa9b 	bl	800b6d4 <VL53L0X_RdByte>
 800919e:	4603      	mov	r3, r0
 80091a0:	461a      	mov	r2, r3
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4313      	orrs	r3, r2
 80091a6:	73fb      	strb	r3, [r7, #15]
    if (phase_enable)
 80091a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d02a      	beq.n	8009206 <VL53L0X_ref_calibration_io+0xde>
      Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80091b0:	f107 030e 	add.w	r3, r7, #14
 80091b4:	461a      	mov	r2, r3
 80091b6:	21ee      	movs	r1, #238	; 0xee
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f002 fa8b 	bl	800b6d4 <VL53L0X_RdByte>
 80091be:	4603      	mov	r3, r0
 80091c0:	461a      	mov	r2, r3
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	73fb      	strb	r3, [r7, #15]
 80091c8:	e01d      	b.n	8009206 <VL53L0X_ref_calibration_io+0xde>
  } else {
    if (vhv_enable)
 80091ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00a      	beq.n	80091e8 <VL53L0X_ref_calibration_io+0xc0>
      Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80091d2:	78bb      	ldrb	r3, [r7, #2]
 80091d4:	461a      	mov	r2, r3
 80091d6:	21cb      	movs	r1, #203	; 0xcb
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f002 f9f9 	bl	800b5d0 <VL53L0X_WrByte>
 80091de:	4603      	mov	r3, r0
 80091e0:	461a      	mov	r2, r3
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	73fb      	strb	r3, [r7, #15]
    if (phase_enable)
 80091e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00a      	beq.n	8009206 <VL53L0X_ref_calibration_io+0xde>
      Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80091f0:	787b      	ldrb	r3, [r7, #1]
 80091f2:	2280      	movs	r2, #128	; 0x80
 80091f4:	21ee      	movs	r1, #238	; 0xee
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f002 fa38 	bl	800b66c <VL53L0X_UpdateByte>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461a      	mov	r2, r3
 8009200:	7bfb      	ldrb	r3, [r7, #15]
 8009202:	4313      	orrs	r3, r2
 8009204:	73fb      	strb	r3, [r7, #15]
  }

  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009206:	2201      	movs	r2, #1
 8009208:	21ff      	movs	r1, #255	; 0xff
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f002 f9e0 	bl	800b5d0 <VL53L0X_WrByte>
 8009210:	4603      	mov	r3, r0
 8009212:	461a      	mov	r2, r3
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	4313      	orrs	r3, r2
 8009218:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800921a:	2201      	movs	r2, #1
 800921c:	2100      	movs	r1, #0
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f002 f9d6 	bl	800b5d0 <VL53L0X_WrByte>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	4313      	orrs	r3, r2
 800922c:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800922e:	2200      	movs	r2, #0
 8009230:	21ff      	movs	r1, #255	; 0xff
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f002 f9cc 	bl	800b5d0 <VL53L0X_WrByte>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	4313      	orrs	r3, r2
 8009240:	73fb      	strb	r3, [r7, #15]

  *pPhaseCal = (uint8_t)(PhaseCalint & 0xEF);
 8009242:	7bbb      	ldrb	r3, [r7, #14]
 8009244:	f023 0310 	bic.w	r3, r3, #16
 8009248:	b2da      	uxtb	r2, r3
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	701a      	strb	r2, [r3, #0]

  return Status;
 800924e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <VL53L0X_perform_vhv_calibration>:

VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
                                              uint8_t *pVhvSettings,
                                              const uint8_t get_data_enable,
                                              const uint8_t restore_config) {
 800925a:	b580      	push	{r7, lr}
 800925c:	b08a      	sub	sp, #40	; 0x28
 800925e:	af04      	add	r7, sp, #16
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	4611      	mov	r1, r2
 8009266:	461a      	mov	r2, r3
 8009268:	460b      	mov	r3, r1
 800926a:	71fb      	strb	r3, [r7, #7]
 800926c:	4613      	mov	r3, r2
 800926e:	71bb      	strb	r3, [r7, #6]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009270:	2300      	movs	r3, #0
 8009272:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 8009274:	2300      	movs	r3, #0
 8009276:	75bb      	strb	r3, [r7, #22]
  uint8_t VhvSettings = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	757b      	strb	r3, [r7, #21]
  uint8_t PhaseCal = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	753b      	strb	r3, [r7, #20]
  uint8_t PhaseCalInt = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	74fb      	strb	r3, [r7, #19]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  if (restore_config)
 8009284:	79bb      	ldrb	r3, [r7, #6]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <VL53L0X_perform_vhv_calibration+0x38>
    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009290:	75bb      	strb	r3, [r7, #22]

  /* Run VHV */
  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009292:	2201      	movs	r2, #1
 8009294:	2101      	movs	r1, #1
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f002 f99a 	bl	800b5d0 <VL53L0X_WrByte>
 800929c:	4603      	mov	r3, r0
 800929e:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 80092a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d105      	bne.n	80092b4 <VL53L0X_perform_vhv_calibration+0x5a>
    Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80092a8:	2140      	movs	r1, #64	; 0x40
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f7ff ff01 	bl	80090b2 <VL53L0X_perform_single_ref_calibration>
 80092b0:	4603      	mov	r3, r0
 80092b2:	75fb      	strb	r3, [r7, #23]

  /* Read VHV from device */
  if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80092b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d115      	bne.n	80092e8 <VL53L0X_perform_vhv_calibration+0x8e>
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d112      	bne.n	80092e8 <VL53L0X_perform_vhv_calibration+0x8e>
    Status = VL53L0X_ref_calibration_io(Dev, 1, VhvSettings,
 80092c2:	7d39      	ldrb	r1, [r7, #20]
 80092c4:	7d7a      	ldrb	r2, [r7, #21]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9303      	str	r3, [sp, #12]
 80092ca:	2301      	movs	r3, #1
 80092cc:	9302      	str	r3, [sp, #8]
 80092ce:	f107 0313 	add.w	r3, r7, #19
 80092d2:	9301      	str	r3, [sp, #4]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	460b      	mov	r3, r1
 80092da:	2101      	movs	r1, #1
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f7ff ff23 	bl	8009128 <VL53L0X_ref_calibration_io>
 80092e2:	4603      	mov	r3, r0
 80092e4:	75fb      	strb	r3, [r7, #23]
 80092e6:	e002      	b.n	80092ee <VL53L0X_perform_vhv_calibration+0x94>
                                        PhaseCal, /* Not used here */
                                        pVhvSettings, &PhaseCalInt, 1, 0);
  } else
    *pVhvSettings = 0;
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2200      	movs	r2, #0
 80092ec:	701a      	strb	r2, [r3, #0]

  if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80092ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d112      	bne.n	800931c <VL53L0X_perform_vhv_calibration+0xc2>
 80092f6:	79bb      	ldrb	r3, [r7, #6]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00f      	beq.n	800931c <VL53L0X_perform_vhv_calibration+0xc2>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 80092fc:	7dbb      	ldrb	r3, [r7, #22]
 80092fe:	461a      	mov	r2, r3
 8009300:	2101      	movs	r1, #1
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	f002 f964 	bl	800b5d0 <VL53L0X_WrByte>
 8009308:	4603      	mov	r3, r0
 800930a:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 800930c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <VL53L0X_perform_vhv_calibration+0xc2>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	7dba      	ldrb	r2, [r7, #22]
 8009318:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 800931c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
                                                uint8_t *pPhaseCal,
                                                const uint8_t get_data_enable,
                                                const uint8_t restore_config) {
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	; 0x28
 800932c:	af04      	add	r7, sp, #16
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	4611      	mov	r1, r2
 8009334:	461a      	mov	r2, r3
 8009336:	460b      	mov	r3, r1
 8009338:	71fb      	strb	r3, [r7, #7]
 800933a:	4613      	mov	r3, r2
 800933c:	71bb      	strb	r3, [r7, #6]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	75bb      	strb	r3, [r7, #22]
  uint8_t VhvSettings = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	757b      	strb	r3, [r7, #21]
  uint8_t PhaseCal = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	753b      	strb	r3, [r7, #20]
   */
//	snprintf(txBuff, BUFLEN, "VC %d %u %u\n", Status, VcselPeriodType,
//			VCSELPulsePeriodPCLK);
//	CDC_Transmit_FS((uint8_t*) txBuff, strlen(txBuff));
//	HAL_Delay(100);
  if (restore_config)
 800934e:	79bb      	ldrb	r3, [r7, #6]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <VL53L0X_perform_phase_calibration+0x34>
    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800935a:	75bb      	strb	r3, [r7, #22]

  /* Run PhaseCal */
  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800935c:	2202      	movs	r2, #2
 800935e:	2101      	movs	r1, #1
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f002 f935 	bl	800b5d0 <VL53L0X_WrByte>
 8009366:	4603      	mov	r3, r0
 8009368:	75fb      	strb	r3, [r7, #23]
  if (Status == VL53L0X_ERROR_NONE){
 800936a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d105      	bne.n	800937e <VL53L0X_perform_phase_calibration+0x56>
    Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009372:	2100      	movs	r1, #0
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f7ff fe9c 	bl	80090b2 <VL53L0X_perform_single_ref_calibration>
 800937a:	4603      	mov	r3, r0
 800937c:	75fb      	strb	r3, [r7, #23]
  }

  /* Read PhaseCal from device */
  if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800937e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d115      	bne.n	80093b2 <VL53L0X_perform_phase_calibration+0x8a>
 8009386:	79fb      	ldrb	r3, [r7, #7]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d112      	bne.n	80093b2 <VL53L0X_perform_phase_calibration+0x8a>
    Status = VL53L0X_ref_calibration_io(Dev, 1, VhvSettings,
 800938c:	7d39      	ldrb	r1, [r7, #20]
 800938e:	7d7a      	ldrb	r2, [r7, #21]
 8009390:	2301      	movs	r3, #1
 8009392:	9303      	str	r3, [sp, #12]
 8009394:	2300      	movs	r3, #0
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	9301      	str	r3, [sp, #4]
 800939c:	f107 0313 	add.w	r3, r7, #19
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	460b      	mov	r3, r1
 80093a4:	2101      	movs	r1, #1
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7ff febe 	bl	8009128 <VL53L0X_ref_calibration_io>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]
 80093b0:	e002      	b.n	80093b8 <VL53L0X_perform_phase_calibration+0x90>
                                        PhaseCal, /* Not used here */
                                        &VhvSettingsint, pPhaseCal, 0, 1);

  } else
    *pPhaseCal = 0;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2200      	movs	r2, #0
 80093b6:	701a      	strb	r2, [r3, #0]

  if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80093b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d112      	bne.n	80093e6 <VL53L0X_perform_phase_calibration+0xbe>
 80093c0:	79bb      	ldrb	r3, [r7, #6]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00f      	beq.n	80093e6 <VL53L0X_perform_phase_calibration+0xbe>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 80093c6:	7dbb      	ldrb	r3, [r7, #22]
 80093c8:	461a      	mov	r2, r3
 80093ca:	2101      	movs	r1, #1
 80093cc:	68f8      	ldr	r0, [r7, #12]
 80093ce:	f002 f8ff 	bl	800b5d0 <VL53L0X_WrByte>
 80093d2:	4603      	mov	r3, r0
 80093d4:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 80093d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d103      	bne.n	80093e6 <VL53L0X_perform_phase_calibration+0xbe>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	7dba      	ldrb	r2, [r7, #22]
 80093e2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 80093e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
                                              uint8_t *pVhvSettings,
                                              uint8_t *pPhaseCal,
                                              uint8_t get_data_enable) {
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b086      	sub	sp, #24
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
 80093fe:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009400:	2300      	movs	r3, #0
 8009402:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 8009404:	2300      	movs	r3, #0
 8009406:	75bb      	strb	r3, [r7, #22]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800940e:	75bb      	strb	r3, [r7, #22]

  /* In the following function we don't save the config to optimize
   * writes on device. Config is saved and restored only once. */
  Status =
      VL53L0X_perform_vhv_calibration(Dev, pVhvSettings, get_data_enable, 0);
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	2300      	movs	r3, #0
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7ff ff1f 	bl	800925a <VL53L0X_perform_vhv_calibration>
 800941c:	4603      	mov	r3, r0
 800941e:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 8009420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d107      	bne.n	8009438 <VL53L0X_perform_ref_calibration+0x46>
    Status =
        VL53L0X_perform_phase_calibration(Dev, pPhaseCal, get_data_enable, 0);
 8009428:	78fa      	ldrb	r2, [r7, #3]
 800942a:	2300      	movs	r3, #0
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7ff ff7a 	bl	8009328 <VL53L0X_perform_phase_calibration>
 8009434:	4603      	mov	r3, r0
 8009436:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 8009438:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10f      	bne.n	8009460 <VL53L0X_perform_ref_calibration+0x6e>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 8009440:	7dbb      	ldrb	r3, [r7, #22]
 8009442:	461a      	mov	r2, r3
 8009444:	2101      	movs	r1, #1
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f002 f8c2 	bl	800b5d0 <VL53L0X_WrByte>
 800944c:	4603      	mov	r3, r0
 800944e:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 8009450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <VL53L0X_perform_ref_calibration+0x6e>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	7dba      	ldrb	r2, [r7, #22]
 800945c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 8009460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009464:	4618      	mov	r0, r3
 8009466:	3718      	adds	r7, #24
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <VL53L0X_measurement_poll_for_completion>:
    data[mirrorIndex] = tempData;
  }
  return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev) {
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009474:	2300      	movs	r3, #0
 8009476:	75fb      	strb	r3, [r7, #23]
  uint8_t NewDataReady = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;

  LOG_FUNCTION_START("");

  LoopNb = 0;
 800947c:	2300      	movs	r3, #0
 800947e:	613b      	str	r3, [r7, #16]

  do {
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009480:	f107 030f 	add.w	r3, r7, #15
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fe fe00 	bl	800808c <VL53L0X_GetMeasurementDataReady>
 800948c:	4603      	mov	r3, r0
 800948e:	75fb      	strb	r3, [r7, #23]
    if (Status != 0)
 8009490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10f      	bne.n	80094b8 <VL53L0X_measurement_poll_for_completion+0x4c>
      break; /* the error is set */

    if (NewDataReady == 1)
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d00e      	beq.n	80094bc <VL53L0X_measurement_poll_for_completion+0x50>
      break; /* done note that status == 0 */

    LoopNb++;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	3301      	adds	r3, #1
 80094a2:	613b      	str	r3, [r7, #16]
    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	2bc7      	cmp	r3, #199	; 0xc7
 80094a8:	d902      	bls.n	80094b0 <VL53L0X_measurement_poll_for_completion+0x44>
      Status = VL53L0X_ERROR_TIME_OUT;
 80094aa:	23f9      	movs	r3, #249	; 0xf9
 80094ac:	75fb      	strb	r3, [r7, #23]
      break;
 80094ae:	e006      	b.n	80094be <VL53L0X_measurement_poll_for_completion+0x52>
    }

    VL53L0X_PollingDelay(Dev);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f002 f9ad 	bl	800b810 <VL53L0X_PollingDelay>
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80094b6:	e7e3      	b.n	8009480 <VL53L0X_measurement_poll_for_completion+0x14>
      break; /* the error is set */
 80094b8:	bf00      	nop
 80094ba:	e000      	b.n	80094be <VL53L0X_measurement_poll_for_completion+0x52>
      break; /* done note that status == 0 */
 80094bc:	bf00      	nop
  } while (1);

  LOG_FUNCTION_END(Status);

  return Status;
 80094be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <VL53L0X_decode_vcsel_period>:

uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg) {
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	4603      	mov	r3, r0
 80094d2:	71fb      	strb	r3, [r7, #7]
  /*!
   * Converts the encoded VCSEL period register value into the real
   * period in PLL clocks
   */

  uint8_t vcsel_period_pclks = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]

  vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80094d8:	79fb      	ldrb	r3, [r7, #7]
 80094da:	3301      	adds	r3, #1
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	73fb      	strb	r3, [r7, #15]

  return vcsel_period_pclks;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <VL53L0X_isqrt>:
  vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;

  return vcsel_period_reg;
}

uint32_t VL53L0X_isqrt(uint32_t num) {
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
   * Implements an integer square root
   *
   * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
   */

  uint32_t res = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
  uint32_t bit = 1 << 30;
 80094fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009500:	60bb      	str	r3, [r7, #8]
  /* The second-to-top bit is set:
   *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

  /* "bit" starts at the highest power of four <= the argument. */
  while (bit > num)
 8009502:	e002      	b.n	800950a <VL53L0X_isqrt+0x1a>
    bit >>= 2;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	089b      	lsrs	r3, r3, #2
 8009508:	60bb      	str	r3, [r7, #8]
  while (bit > num)
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	429a      	cmp	r2, r3
 8009510:	d8f8      	bhi.n	8009504 <VL53L0X_isqrt+0x14>

  while (bit != 0) {
 8009512:	e017      	b.n	8009544 <VL53L0X_isqrt+0x54>
    if (num >= res + bit) {
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	4413      	add	r3, r2
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d30b      	bcc.n	8009538 <VL53L0X_isqrt+0x48>
      num -= res + bit;
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	4413      	add	r3, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	607b      	str	r3, [r7, #4]
      res = (res >> 1) + bit;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	085b      	lsrs	r3, r3, #1
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	4413      	add	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	e002      	b.n	800953e <VL53L0X_isqrt+0x4e>
    } else
      res >>= 1;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	085b      	lsrs	r3, r3, #1
 800953c:	60fb      	str	r3, [r7, #12]

    bit >>= 2;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	089b      	lsrs	r3, r3, #2
 8009542:	60bb      	str	r3, [r7, #8]
  while (bit != 0) {
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e4      	bne.n	8009514 <VL53L0X_isqrt+0x24>
  }

  return res;
 800954a:	68fb      	ldr	r3, [r7, #12]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <VL53L0X_device_read_strobe>:
    res = VL53L0X_isqrt(a * a + b * b);

  return res;
}

VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev) {
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009560:	2300      	movs	r3, #0
 8009562:	75fb      	strb	r3, [r7, #23]
  uint8_t strobe;
  uint32_t LoopNb;
  LOG_FUNCTION_START("");

  Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009564:	2200      	movs	r2, #0
 8009566:	2183      	movs	r1, #131	; 0x83
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f002 f831 	bl	800b5d0 <VL53L0X_WrByte>
 800956e:	4603      	mov	r3, r0
 8009570:	461a      	mov	r2, r3
 8009572:	7dfb      	ldrb	r3, [r7, #23]
 8009574:	4313      	orrs	r3, r2
 8009576:	75fb      	strb	r3, [r7, #23]

  /* polling
   * use timeout to avoid deadlock*/
  if (Status == VL53L0X_ERROR_NONE) {
 8009578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d11c      	bne.n	80095ba <VL53L0X_device_read_strobe+0x62>
    LoopNb = 0;
 8009580:	2300      	movs	r3, #0
 8009582:	613b      	str	r3, [r7, #16]
    do {
      Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009584:	f107 030f 	add.w	r3, r7, #15
 8009588:	461a      	mov	r2, r3
 800958a:	2183      	movs	r1, #131	; 0x83
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f002 f8a1 	bl	800b6d4 <VL53L0X_RdByte>
 8009592:	4603      	mov	r3, r0
 8009594:	75fb      	strb	r3, [r7, #23]
      if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <VL53L0X_device_read_strobe+0x58>
 800959c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d105      	bne.n	80095b0 <VL53L0X_device_read_strobe+0x58>
        break;

      LoopNb = LoopNb + 1;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	3301      	adds	r3, #1
 80095a8:	613b      	str	r3, [r7, #16]
    } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2bc7      	cmp	r3, #199	; 0xc7
 80095ae:	d9e9      	bls.n	8009584 <VL53L0X_device_read_strobe+0x2c>

    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2bc7      	cmp	r3, #199	; 0xc7
 80095b4:	d901      	bls.n	80095ba <VL53L0X_device_read_strobe+0x62>
      Status = VL53L0X_ERROR_TIME_OUT;
 80095b6:	23f9      	movs	r3, #249	; 0xf9
 80095b8:	75fb      	strb	r3, [r7, #23]
  }

  Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80095ba:	2201      	movs	r2, #1
 80095bc:	2183      	movs	r1, #131	; 0x83
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f002 f806 	bl	800b5d0 <VL53L0X_WrByte>
 80095c4:	4603      	mov	r3, r0
 80095c6:	461a      	mov	r2, r3
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);
  return Status;
 80095ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option) {
 80095da:	b580      	push	{r7, lr}
 80095dc:	b098      	sub	sp, #96	; 0x60
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095e6:	2300      	movs	r3, #0
 80095e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t byte;
  uint32_t TmpDWord;
  uint8_t ModuleId;
  uint8_t Revision;
  uint8_t ReferenceSpadCount = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  uint8_t ReferenceSpadType = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  uint32_t PartUIDUpper = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t PartUIDLower = 0;
 80095fc:	2300      	movs	r3, #0
 80095fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t OffsetFixed1104_mm = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	64bb      	str	r3, [r7, #72]	; 0x48
  int16_t OffsetMicroMeters = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800960a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800960e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t DistMeasFixed1104_400_mm = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	653b      	str	r3, [r7, #80]	; 0x50
  char ProductId[19];
  char *ProductId_tmp;
  uint8_t ReadDataFromDeviceDone;
  FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
  int i;

  LOG_FUNCTION_START("");

  ReadDataFromDeviceDone =
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8009622:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone);

  /* This access is done only once after that a GetDeviceInfo or
   * datainit is done*/
  if (ReadDataFromDeviceDone != 7) {
 8009626:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800962a:	2b07      	cmp	r3, #7
 800962c:	f000 8408 	beq.w	8009e40 <VL53L0X_get_info_from_device+0x866>

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009630:	2201      	movs	r2, #1
 8009632:	2180      	movs	r1, #128	; 0x80
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f001 ffcb 	bl	800b5d0 <VL53L0X_WrByte>
 800963a:	4603      	mov	r3, r0
 800963c:	461a      	mov	r2, r3
 800963e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009642:	4313      	orrs	r3, r2
 8009644:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009648:	2201      	movs	r2, #1
 800964a:	21ff      	movs	r1, #255	; 0xff
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 ffbf 	bl	800b5d0 <VL53L0X_WrByte>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800965a:	4313      	orrs	r3, r2
 800965c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009660:	2200      	movs	r2, #0
 8009662:	2100      	movs	r1, #0
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 ffb3 	bl	800b5d0 <VL53L0X_WrByte>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009672:	4313      	orrs	r3, r2
 8009674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009678:	2206      	movs	r2, #6
 800967a:	21ff      	movs	r1, #255	; 0xff
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 ffa7 	bl	800b5d0 <VL53L0X_WrByte>
 8009682:	4603      	mov	r3, r0
 8009684:	461a      	mov	r2, r3
 8009686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800968a:	4313      	orrs	r3, r2
 800968c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009690:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009694:	461a      	mov	r2, r3
 8009696:	2183      	movs	r1, #131	; 0x83
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f002 f81b 	bl	800b6d4 <VL53L0X_RdByte>
 800969e:	4603      	mov	r3, r0
 80096a0:	461a      	mov	r2, r3
 80096a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096a6:	4313      	orrs	r3, r2
 80096a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x83, byte | 4);
 80096ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80096b0:	f043 0304 	orr.w	r3, r3, #4
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	461a      	mov	r2, r3
 80096b8:	2183      	movs	r1, #131	; 0x83
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 ff88 	bl	800b5d0 <VL53L0X_WrByte>
 80096c0:	4603      	mov	r3, r0
 80096c2:	461a      	mov	r2, r3
 80096c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096c8:	4313      	orrs	r3, r2
 80096ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80096ce:	2207      	movs	r2, #7
 80096d0:	21ff      	movs	r1, #255	; 0xff
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 ff7c 	bl	800b5d0 <VL53L0X_WrByte>
 80096d8:	4603      	mov	r3, r0
 80096da:	461a      	mov	r2, r3
 80096dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096e0:	4313      	orrs	r3, r2
 80096e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 80096e6:	2201      	movs	r2, #1
 80096e8:	2181      	movs	r1, #129	; 0x81
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 ff70 	bl	800b5d0 <VL53L0X_WrByte>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096f8:	4313      	orrs	r3, r2
 80096fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_PollingDelay(Dev);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f002 f886 	bl	800b810 <VL53L0X_PollingDelay>
 8009704:	4603      	mov	r3, r0
 8009706:	461a      	mov	r2, r3
 8009708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800970c:	4313      	orrs	r3, r2
 800970e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009712:	2201      	movs	r2, #1
 8009714:	2180      	movs	r1, #128	; 0x80
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 ff5a 	bl	800b5d0 <VL53L0X_WrByte>
 800971c:	4603      	mov	r3, r0
 800971e:	461a      	mov	r2, r3
 8009720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009724:	4313      	orrs	r3, r2
 8009726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (((option & 1) == 1) && ((ReadDataFromDeviceDone & 1) == 0)) {
 800972a:	78fb      	ldrb	r3, [r7, #3]
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8098 	beq.w	8009866 <VL53L0X_get_info_from_device+0x28c>
 8009736:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	f040 8091 	bne.w	8009866 <VL53L0X_get_info_from_device+0x28c>
      Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009744:	226b      	movs	r2, #107	; 0x6b
 8009746:	2194      	movs	r1, #148	; 0x94
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 ff41 	bl	800b5d0 <VL53L0X_WrByte>
 800974e:	4603      	mov	r3, r0
 8009750:	461a      	mov	r2, r3
 8009752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009756:	4313      	orrs	r3, r2
 8009758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7ff fefb 	bl	8009558 <VL53L0X_device_read_strobe>
 8009762:	4603      	mov	r3, r0
 8009764:	461a      	mov	r2, r3
 8009766:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800976a:	4313      	orrs	r3, r2
 800976c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009774:	461a      	mov	r2, r3
 8009776:	2190      	movs	r1, #144	; 0x90
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f002 f80d 	bl	800b798 <VL53L0X_RdDWord>
 800977e:	4603      	mov	r3, r0
 8009780:	461a      	mov	r2, r3
 8009782:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009786:	4313      	orrs	r3, r2
 8009788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	0a1b      	lsrs	r3, r3, #8
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009796:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      ReferenceSpadType = (uint8_t)((TmpDWord >> 15) & 0x01);
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	0bdb      	lsrs	r3, r3, #15
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80097a8:	2224      	movs	r2, #36	; 0x24
 80097aa:	2194      	movs	r1, #148	; 0x94
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f001 ff0f 	bl	800b5d0 <VL53L0X_WrByte>
 80097b2:	4603      	mov	r3, r0
 80097b4:	461a      	mov	r2, r3
 80097b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097ba:	4313      	orrs	r3, r2
 80097bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff fec9 	bl	8009558 <VL53L0X_device_read_strobe>
 80097c6:	4603      	mov	r3, r0
 80097c8:	461a      	mov	r2, r3
 80097ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097ce:	4313      	orrs	r3, r2
 80097d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80097d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097d8:	461a      	mov	r2, r3
 80097da:	2190      	movs	r1, #144	; 0x90
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f001 ffdb 	bl	800b798 <VL53L0X_RdDWord>
 80097e2:	4603      	mov	r3, r0
 80097e4:	461a      	mov	r2, r3
 80097e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097ea:	4313      	orrs	r3, r2
 80097ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24) & 0xff);
 80097f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f2:	0e1b      	lsrs	r3, r3, #24
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	723b      	strb	r3, [r7, #8]
      NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16) & 0xff);
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	0c1b      	lsrs	r3, r3, #16
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	727b      	strb	r3, [r7, #9]
      NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8) & 0xff);
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	0a1b      	lsrs	r3, r3, #8
 8009804:	b2db      	uxtb	r3, r3
 8009806:	72bb      	strb	r3, [r7, #10]
      NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980a:	b2db      	uxtb	r3, r3
 800980c:	72fb      	strb	r3, [r7, #11]

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800980e:	2225      	movs	r2, #37	; 0x25
 8009810:	2194      	movs	r1, #148	; 0x94
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 fedc 	bl	800b5d0 <VL53L0X_WrByte>
 8009818:	4603      	mov	r3, r0
 800981a:	461a      	mov	r2, r3
 800981c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009820:	4313      	orrs	r3, r2
 8009822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff fe96 	bl	8009558 <VL53L0X_device_read_strobe>
 800982c:	4603      	mov	r3, r0
 800982e:	461a      	mov	r2, r3
 8009830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009834:	4313      	orrs	r3, r2
 8009836:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800983a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800983e:	461a      	mov	r2, r3
 8009840:	2190      	movs	r1, #144	; 0x90
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 ffa8 	bl	800b798 <VL53L0X_RdDWord>
 8009848:	4603      	mov	r3, r0
 800984a:	461a      	mov	r2, r3
 800984c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009850:	4313      	orrs	r3, r2
 8009852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24) & 0xff);
 8009856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009858:	0e1b      	lsrs	r3, r3, #24
 800985a:	b2db      	uxtb	r3, r3
 800985c:	733b      	strb	r3, [r7, #12]
      NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16) & 0xff);
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	0c1b      	lsrs	r3, r3, #16
 8009862:	b2db      	uxtb	r3, r3
 8009864:	737b      	strb	r3, [r7, #13]
    }

    if (((option & 2) == 2) && ((ReadDataFromDeviceDone & 2) == 0)) {
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8189 	beq.w	8009b84 <VL53L0X_get_info_from_device+0x5aa>
 8009872:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009876:	f003 0302 	and.w	r3, r3, #2
 800987a:	2b00      	cmp	r3, #0
 800987c:	f040 8182 	bne.w	8009b84 <VL53L0X_get_info_from_device+0x5aa>

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8009880:	2202      	movs	r2, #2
 8009882:	2194      	movs	r1, #148	; 0x94
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f001 fea3 	bl	800b5d0 <VL53L0X_WrByte>
 800988a:	4603      	mov	r3, r0
 800988c:	461a      	mov	r2, r3
 800988e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009892:	4313      	orrs	r3, r2
 8009894:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff fe5d 	bl	8009558 <VL53L0X_device_read_strobe>
 800989e:	4603      	mov	r3, r0
 80098a0:	461a      	mov	r2, r3
 80098a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098a6:	4313      	orrs	r3, r2
 80098a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80098ac:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80098b0:	461a      	mov	r2, r3
 80098b2:	2190      	movs	r1, #144	; 0x90
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f001 ff0d 	bl	800b6d4 <VL53L0X_RdByte>
 80098ba:	4603      	mov	r3, r0
 80098bc:	461a      	mov	r2, r3
 80098be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098c2:	4313      	orrs	r3, r2
 80098c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80098c8:	227b      	movs	r2, #123	; 0x7b
 80098ca:	2194      	movs	r1, #148	; 0x94
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 fe7f 	bl	800b5d0 <VL53L0X_WrByte>
 80098d2:	4603      	mov	r3, r0
 80098d4:	461a      	mov	r2, r3
 80098d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098da:	4313      	orrs	r3, r2
 80098dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff fe39 	bl	8009558 <VL53L0X_device_read_strobe>
 80098e6:	4603      	mov	r3, r0
 80098e8:	461a      	mov	r2, r3
 80098ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098ee:	4313      	orrs	r3, r2
 80098f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80098f4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80098f8:	461a      	mov	r2, r3
 80098fa:	2190      	movs	r1, #144	; 0x90
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f001 fee9 	bl	800b6d4 <VL53L0X_RdByte>
 8009902:	4603      	mov	r3, r0
 8009904:	461a      	mov	r2, r3
 8009906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800990a:	4313      	orrs	r3, r2
 800990c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009910:	2277      	movs	r2, #119	; 0x77
 8009912:	2194      	movs	r1, #148	; 0x94
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 fe5b 	bl	800b5d0 <VL53L0X_WrByte>
 800991a:	4603      	mov	r3, r0
 800991c:	461a      	mov	r2, r3
 800991e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009922:	4313      	orrs	r3, r2
 8009924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7ff fe15 	bl	8009558 <VL53L0X_device_read_strobe>
 800992e:	4603      	mov	r3, r0
 8009930:	461a      	mov	r2, r3
 8009932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009936:	4313      	orrs	r3, r2
 8009938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800993c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009940:	461a      	mov	r2, r3
 8009942:	2190      	movs	r1, #144	; 0x90
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 ff27 	bl	800b798 <VL53L0X_RdDWord>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009952:	4313      	orrs	r3, r2
 8009954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8009958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995a:	0e5b      	lsrs	r3, r3, #25
 800995c:	b2db      	uxtb	r3, r3
 800995e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009962:	b2db      	uxtb	r3, r3
 8009964:	743b      	strb	r3, [r7, #16]
      ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	0c9b      	lsrs	r3, r3, #18
 800996a:	b2db      	uxtb	r3, r3
 800996c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009970:	b2db      	uxtb	r3, r3
 8009972:	747b      	strb	r3, [r7, #17]
      ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009976:	0adb      	lsrs	r3, r3, #11
 8009978:	b2db      	uxtb	r3, r3
 800997a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800997e:	b2db      	uxtb	r3, r3
 8009980:	74bb      	strb	r3, [r7, #18]
      ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	091b      	lsrs	r3, r3, #4
 8009986:	b2db      	uxtb	r3, r3
 8009988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998c:	b2db      	uxtb	r3, r3
 800998e:	74fb      	strb	r3, [r7, #19]

      byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	b2db      	uxtb	r3, r3
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	b2db      	uxtb	r3, r3
 8009998:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80099a2:	2278      	movs	r2, #120	; 0x78
 80099a4:	2194      	movs	r1, #148	; 0x94
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f001 fe12 	bl	800b5d0 <VL53L0X_WrByte>
 80099ac:	4603      	mov	r3, r0
 80099ae:	461a      	mov	r2, r3
 80099b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099b4:	4313      	orrs	r3, r2
 80099b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff fdcc 	bl	8009558 <VL53L0X_device_read_strobe>
 80099c0:	4603      	mov	r3, r0
 80099c2:	461a      	mov	r2, r3
 80099c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099c8:	4313      	orrs	r3, r2
 80099ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80099ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099d2:	461a      	mov	r2, r3
 80099d4:	2190      	movs	r1, #144	; 0x90
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f001 fede 	bl	800b798 <VL53L0X_RdDWord>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e4:	4313      	orrs	r3, r2
 80099e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[4] = (char)(byte + ((TmpDWord >> 29) & 0x07f));
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	0f5b      	lsrs	r3, r3, #29
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099fa:	4413      	add	r3, r2
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	753b      	strb	r3, [r7, #20]
      ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a02:	0d9b      	lsrs	r3, r3, #22
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	757b      	strb	r3, [r7, #21]
      ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	0bdb      	lsrs	r3, r3, #15
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	75bb      	strb	r3, [r7, #22]
      ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	75fb      	strb	r3, [r7, #23]
      ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	085b      	lsrs	r3, r3, #1
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	763b      	strb	r3, [r7, #24]

      byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	019b      	lsls	r3, r3, #6
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8009a4a:	2279      	movs	r2, #121	; 0x79
 8009a4c:	2194      	movs	r1, #148	; 0x94
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f001 fdbe 	bl	800b5d0 <VL53L0X_WrByte>
 8009a54:	4603      	mov	r3, r0
 8009a56:	461a      	mov	r2, r3
 8009a58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_device_read_strobe(Dev);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f7ff fd78 	bl	8009558 <VL53L0X_device_read_strobe>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a70:	4313      	orrs	r3, r2
 8009a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009a76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	2190      	movs	r1, #144	; 0x90
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f001 fe8a 	bl	800b798 <VL53L0X_RdDWord>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[9] = (char)(byte + ((TmpDWord >> 26) & 0x07f));
 8009a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a94:	0e9b      	lsrs	r3, r3, #26
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009aa2:	4413      	add	r3, r2
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	767b      	strb	r3, [r7, #25]
      ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	0cdb      	lsrs	r3, r3, #19
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	76bb      	strb	r3, [r7, #26]
      ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	0b1b      	lsrs	r3, r3, #12
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	76fb      	strb	r3, [r7, #27]
      ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	095b      	lsrs	r3, r3, #5
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	773b      	strb	r3, [r7, #28]

      byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8009ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009ae4:	227a      	movs	r2, #122	; 0x7a
 8009ae6:	2194      	movs	r1, #148	; 0x94
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 fd71 	bl	800b5d0 <VL53L0X_WrByte>
 8009aee:	4603      	mov	r3, r0
 8009af0:	461a      	mov	r2, r3
 8009af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009af6:	4313      	orrs	r3, r2
 8009af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_device_read_strobe(Dev);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7ff fd2b 	bl	8009558 <VL53L0X_device_read_strobe>
 8009b02:	4603      	mov	r3, r0
 8009b04:	461a      	mov	r2, r3
 8009b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b14:	461a      	mov	r2, r3
 8009b16:	2190      	movs	r1, #144	; 0x90
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 fe3d 	bl	800b798 <VL53L0X_RdDWord>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	461a      	mov	r2, r3
 8009b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b26:	4313      	orrs	r3, r2
 8009b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[13] = (char)(byte + ((TmpDWord >> 30) & 0x07f));
 8009b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b2e:	0f9b      	lsrs	r3, r3, #30
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b3c:	4413      	add	r3, r2
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	777b      	strb	r3, [r7, #29]
      ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	0ddb      	lsrs	r3, r3, #23
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	77bb      	strb	r3, [r7, #30]
      ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	0c1b      	lsrs	r3, r3, #16
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	77fb      	strb	r3, [r7, #31]
      ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b60:	0a5b      	lsrs	r3, r3, #9
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	f887 3020 	strb.w	r3, [r7, #32]
      ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b70:	089b      	lsrs	r3, r3, #2
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      ProductId[18] = '\0';
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    }

    if (((option & 4) == 4) && ((ReadDataFromDeviceDone & 4) == 0)) {
 8009b84:	78fb      	ldrb	r3, [r7, #3]
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80f1 	beq.w	8009d72 <VL53L0X_get_info_from_device+0x798>
 8009b90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f040 80ea 	bne.w	8009d72 <VL53L0X_get_info_from_device+0x798>

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009b9e:	227b      	movs	r2, #123	; 0x7b
 8009ba0:	2194      	movs	r1, #148	; 0x94
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 fd14 	bl	800b5d0 <VL53L0X_WrByte>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	461a      	mov	r2, r3
 8009bac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fcce 	bl	8009558 <VL53L0X_device_read_strobe>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009bce:	461a      	mov	r2, r3
 8009bd0:	2190      	movs	r1, #144	; 0x90
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 fde0 	bl	800b798 <VL53L0X_RdDWord>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009be0:	4313      	orrs	r3, r2
 8009be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009be6:	227c      	movs	r2, #124	; 0x7c
 8009be8:	2194      	movs	r1, #148	; 0x94
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 fcf0 	bl	800b5d0 <VL53L0X_WrByte>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff fcaa 	bl	8009558 <VL53L0X_device_read_strobe>
 8009c04:	4603      	mov	r3, r0
 8009c06:	461a      	mov	r2, r3
 8009c08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c16:	461a      	mov	r2, r3
 8009c18:	2190      	movs	r1, #144	; 0x90
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 fdbc 	bl	800b798 <VL53L0X_RdDWord>
 8009c20:	4603      	mov	r3, r0
 8009c22:	461a      	mov	r2, r3
 8009c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009c2e:	2273      	movs	r2, #115	; 0x73
 8009c30:	2194      	movs	r1, #148	; 0x94
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 fccc 	bl	800b5d0 <VL53L0X_WrByte>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7ff fc86 	bl	8009558 <VL53L0X_device_read_strobe>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c54:	4313      	orrs	r3, r2
 8009c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c5e:	461a      	mov	r2, r3
 8009c60:	2190      	movs	r1, #144	; 0x90
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 fd98 	bl	800b798 <VL53L0X_RdDWord>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      SignalRateMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) << 8;
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	653b      	str	r3, [r7, #80]	; 0x50

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009c7e:	2274      	movs	r2, #116	; 0x74
 8009c80:	2194      	movs	r1, #148	; 0x94
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f001 fca4 	bl	800b5d0 <VL53L0X_WrByte>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c90:	4313      	orrs	r3, r2
 8009c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff fc5e 	bl	8009558 <VL53L0X_device_read_strobe>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009caa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009cae:	461a      	mov	r2, r3
 8009cb0:	2190      	movs	r1, #144	; 0x90
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f001 fd70 	bl	800b798 <VL53L0X_RdDWord>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      SignalRateMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >> 24);
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc8:	0e1b      	lsrs	r3, r3, #24
 8009cca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	653b      	str	r3, [r7, #80]	; 0x50

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009cd0:	2275      	movs	r2, #117	; 0x75
 8009cd2:	2194      	movs	r1, #148	; 0x94
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 fc7b 	bl	800b5d0 <VL53L0X_WrByte>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	461a      	mov	r2, r3
 8009cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fc35 	bl	8009558 <VL53L0X_device_read_strobe>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009cfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d00:	461a      	mov	r2, r3
 8009d02:	2190      	movs	r1, #144	; 0x90
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 fd47 	bl	800b798 <VL53L0X_RdDWord>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d12:	4313      	orrs	r3, r2
 8009d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) << 8;
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	021b      	lsls	r3, r3, #8
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	657b      	str	r3, [r7, #84]	; 0x54

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009d20:	2276      	movs	r2, #118	; 0x76
 8009d22:	2194      	movs	r1, #148	; 0x94
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f001 fc53 	bl	800b5d0 <VL53L0X_WrByte>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d32:	4313      	orrs	r3, r2
 8009d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff fc0d 	bl	8009558 <VL53L0X_device_read_strobe>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	461a      	mov	r2, r3
 8009d42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d46:	4313      	orrs	r3, r2
 8009d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009d4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d50:	461a      	mov	r2, r3
 8009d52:	2190      	movs	r1, #144	; 0x90
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 fd1f 	bl	800b798 <VL53L0X_RdDWord>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d62:	4313      	orrs	r3, r2
 8009d64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >> 24);
 8009d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6a:	0e1b      	lsrs	r3, r3, #24
 8009d6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	657b      	str	r3, [r7, #84]	; 0x54
    }

    Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009d72:	2200      	movs	r2, #0
 8009d74:	2181      	movs	r1, #129	; 0x81
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f001 fc2a 	bl	800b5d0 <VL53L0X_WrByte>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d84:	4313      	orrs	r3, r2
 8009d86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009d8a:	2206      	movs	r2, #6
 8009d8c:	21ff      	movs	r1, #255	; 0xff
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f001 fc1e 	bl	800b5d0 <VL53L0X_WrByte>
 8009d94:	4603      	mov	r3, r0
 8009d96:	461a      	mov	r2, r3
 8009d98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009da2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009da6:	461a      	mov	r2, r3
 8009da8:	2183      	movs	r1, #131	; 0x83
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 fc92 	bl	800b6d4 <VL53L0X_RdByte>
 8009db0:	4603      	mov	r3, r0
 8009db2:	461a      	mov	r2, r3
 8009db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009db8:	4313      	orrs	r3, r2
 8009dba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x83, byte & 0xfb);
 8009dbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dc2:	f023 0304 	bic.w	r3, r3, #4
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	461a      	mov	r2, r3
 8009dca:	2183      	movs	r1, #131	; 0x83
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f001 fbff 	bl	800b5d0 <VL53L0X_WrByte>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009de0:	2201      	movs	r2, #1
 8009de2:	21ff      	movs	r1, #255	; 0xff
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f001 fbf3 	bl	800b5d0 <VL53L0X_WrByte>
 8009dea:	4603      	mov	r3, r0
 8009dec:	461a      	mov	r2, r3
 8009dee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009df2:	4313      	orrs	r3, r2
 8009df4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009df8:	2201      	movs	r2, #1
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 fbe7 	bl	800b5d0 <VL53L0X_WrByte>
 8009e02:	4603      	mov	r3, r0
 8009e04:	461a      	mov	r2, r3
 8009e06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e10:	2200      	movs	r2, #0
 8009e12:	21ff      	movs	r1, #255	; 0xff
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 fbdb 	bl	800b5d0 <VL53L0X_WrByte>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e22:	4313      	orrs	r3, r2
 8009e24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2180      	movs	r1, #128	; 0x80
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 fbcf 	bl	800b5d0 <VL53L0X_WrByte>
 8009e32:	4603      	mov	r3, r0
 8009e34:	461a      	mov	r2, r3
 8009e36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  if ((Status == VL53L0X_ERROR_NONE) && (ReadDataFromDeviceDone != 7)) {
 8009e40:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f040 808f 	bne.w	8009f68 <VL53L0X_get_info_from_device+0x98e>
 8009e4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e4e:	2b07      	cmp	r3, #7
 8009e50:	f000 808a 	beq.w	8009f68 <VL53L0X_get_info_from_device+0x98e>
    /* Assign to variable if status is ok */
    if (((option & 1) == 1) && ((ReadDataFromDeviceDone & 1) == 0)) {
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	f003 0301 	and.w	r3, r3, #1
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d024      	beq.n	8009ea8 <VL53L0X_get_info_from_device+0x8ce>
 8009e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d11e      	bne.n	8009ea8 <VL53L0X_get_info_from_device+0x8ce>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009e70:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                         ReferenceSpadCount);

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType,
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009e7a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                         ReferenceSpadType);

      for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009e7e:	2300      	movs	r3, #0
 8009e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e82:	e00e      	b.n	8009ea2 <VL53L0X_get_info_from_device+0x8c8>
        Dev->Data.SpadData.RefGoodSpadMap[i] = NvmRefGoodSpadMap[i];
 8009e84:	f107 0208 	add.w	r2, r7, #8
 8009e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8a:	4413      	add	r3, r2
 8009e8c:	7819      	ldrb	r1, [r3, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009e98:	460a      	mov	r2, r1
 8009e9a:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ea4:	2b05      	cmp	r3, #5
 8009ea6:	dded      	ble.n	8009e84 <VL53L0X_get_info_from_device+0x8aa>
      }
    }

    if (((option & 2) == 2) && ((ReadDataFromDeviceDone & 2) == 0)) {
 8009ea8:	78fb      	ldrb	r3, [r7, #3]
 8009eaa:	f003 0302 	and.w	r3, r3, #2
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d018      	beq.n	8009ee4 <VL53L0X_get_info_from_device+0x90a>
 8009eb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009eb6:	f003 0302 	and.w	r3, r3, #2
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d112      	bne.n	8009ee4 <VL53L0X_get_info_from_device+0x90a>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ModuleId, ModuleId);
 8009ebe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Revision, Revision);
 8009ec8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2

      ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ProductId);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	33f3      	adds	r3, #243	; 0xf3
 8009ed6:	63bb      	str	r3, [r7, #56]	; 0x38
      VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009ed8:	f107 0310 	add.w	r3, r7, #16
 8009edc:	4619      	mov	r1, r3
 8009ede:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ee0:	f004 fc4b 	bl	800e77a <strcpy>
    }

    if (((option & 4) == 4) && ((ReadDataFromDeviceDone & 4) == 0)) {
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	f003 0304 	and.w	r3, r3, #4
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d030      	beq.n	8009f50 <VL53L0X_get_info_from_device+0x976>
 8009eee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009ef2:	f003 0304 	and.w	r3, r3, #4
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d12a      	bne.n	8009f50 <VL53L0X_get_info_from_device+0x976>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PartUIDUpper, PartUIDUpper);
 8009efa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PartUIDLower, PartUIDLower);
 8009f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

      SignalRateMeasFixed400mmFix =
 8009f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f0c:	025b      	lsls	r3, r3, #9
 8009f0e:	643b      	str	r3, [r7, #64]	; 0x40
          VL53L0X_FIXPOINT97TOFIXPOINT1616(SignalRateMeasFixed1104_400_mm);

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, SignalRateMeasFixed400mm,
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f14:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
                                         SignalRateMeasFixed400mmFix);

      OffsetMicroMeters = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      if (DistMeasFixed1104_400_mm != 0) {
 8009f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d011      	beq.n	8009f48 <VL53L0X_get_info_from_device+0x96e>
        OffsetFixed1104_mm = DistMeasFixed1104_400_mm - DistMeasTgtFixed1104_mm;
 8009f24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	64bb      	str	r3, [r7, #72]	; 0x48
        OffsetMicroMeters = (OffsetFixed1104_mm * 1000) >> 4;
 8009f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f32:	fb02 f303 	mul.w	r3, r2, r3
 8009f36:	091b      	lsrs	r3, r3, #4
 8009f38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        OffsetMicroMeters *= -1;
 8009f3c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009f40:	425b      	negs	r3, r3
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      }

      PALDevDataSet(Dev, Part2PartOffsetAdjustmentNVMMicroMeter,
 8009f48:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	60da      	str	r2, [r3, #12]
                    OffsetMicroMeters);
    }
    byte = (uint8_t)(ReadDataFromDeviceDone | option);
 8009f50:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, byte);
 8009f5e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8009f68:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3760      	adds	r7, #96	; 0x60
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <VL53L0X_calc_macro_period_ps>:

uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
                                      uint8_t vcsel_period_pclks) {
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  LOG_FUNCTION_START("");

  /* The above calculation will produce rounding errors,
     therefore set fixed value
  */
  PLL_period_ps = 1655;
 8009f80:	f240 6277 	movw	r2, #1655	; 0x677
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	e9c7 2304 	strd	r2, r3, [r7, #16]

  macro_period_vclks = 2304;
 8009f8c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009f90:	60fb      	str	r3, [r7, #12]
  macro_period_ps =
      (uint32_t)(macro_period_vclks * vcsel_period_pclks * PLL_period_ps);
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	fb02 f303 	mul.w	r3, r2, r3
 8009f9a:	693a      	ldr	r2, [r7, #16]
  macro_period_ps =
 8009f9c:	fb02 f303 	mul.w	r3, r2, r3
 8009fa0:	60bb      	str	r3, [r7, #8]

  LOG_FUNCTION_END("");
  return macro_period_ps;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	371c      	adds	r7, #28
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks) {
 8009fb0:	b480      	push	{r7}
 8009fb2:	b087      	sub	sp, #28
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /*!
   * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
   */

  uint16_t encoded_timeout = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	82fb      	strh	r3, [r7, #22]
  uint32_t ls_byte = 0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	613b      	str	r3, [r7, #16]
  uint16_t ms_byte = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	81fb      	strh	r3, [r7, #14]

  if (timeout_macro_clks > 0) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d017      	beq.n	8009ffa <VL53L0X_encode_timeout+0x4a>
    ls_byte = timeout_macro_clks - 1;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3b01      	subs	r3, #1
 8009fce:	613b      	str	r3, [r7, #16]

    while ((ls_byte & 0xFFFFFF00) > 0) {
 8009fd0:	e005      	b.n	8009fde <VL53L0X_encode_timeout+0x2e>
      ls_byte = ls_byte >> 1;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	085b      	lsrs	r3, r3, #1
 8009fd6:	613b      	str	r3, [r7, #16]
      ms_byte++;
 8009fd8:	89fb      	ldrh	r3, [r7, #14]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	81fb      	strh	r3, [r7, #14]
    while ((ls_byte & 0xFFFFFF00) > 0) {
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1f4      	bne.n	8009fd2 <VL53L0X_encode_timeout+0x22>
    }

    encoded_timeout = (ms_byte << 8) + (uint16_t)(ls_byte & 0x000000FF);
 8009fe8:	89fb      	ldrh	r3, [r7, #14]
 8009fea:	021b      	lsls	r3, r3, #8
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	4413      	add	r3, r2
 8009ff8:	82fb      	strh	r3, [r7, #22]
  }

  return encoded_timeout;
 8009ffa:	8afb      	ldrh	r3, [r7, #22]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	371c      	adds	r7, #28
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout) {
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	4603      	mov	r3, r0
 800a010:	80fb      	strh	r3, [r7, #6]
  /*!
   * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
   */

  uint32_t timeout_macro_clks = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]

  timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 800a016:	88fb      	ldrh	r3, [r7, #6]
 800a018:	b2db      	uxtb	r3, r3
                        << (uint32_t)((encoded_timeout & 0xFF00) >> 8)) +
 800a01a:	88fa      	ldrh	r2, [r7, #6]
 800a01c:	0a12      	lsrs	r2, r2, #8
 800a01e:	b292      	uxth	r2, r2
 800a020:	4093      	lsls	r3, r2
  timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 800a022:	3301      	adds	r3, #1
 800a024:	60fb      	str	r3, [r7, #12]
                       1;

  return timeout_macro_clks;
 800a026:	68fb      	ldr	r3, [r7, #12]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev, uint32_t timeout_period_us,
                                    uint8_t vcsel_period_pclks) {
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	4613      	mov	r3, r2
 800a040:	71fb      	strb	r3, [r7, #7]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t timeout_period_mclks = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	61fb      	str	r3, [r7, #28]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a046:	79fb      	ldrb	r3, [r7, #7]
 800a048:	4619      	mov	r1, r3
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7ff ff92 	bl	8009f74 <VL53L0X_calc_macro_period_ps>
 800a050:	61b8      	str	r0, [r7, #24]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a058:	4a0a      	ldr	r2, [pc, #40]	; (800a084 <VL53L0X_calc_timeout_mclks+0x50>)
 800a05a:	fba2 2303 	umull	r2, r3, r2, r3
 800a05e:	099b      	lsrs	r3, r3, #6
 800a060:	617b      	str	r3, [r7, #20]

  timeout_period_mclks =
      (uint32_t)(((timeout_period_us * 1000) + (macro_period_ns / 2)) /
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a068:	fb03 f202 	mul.w	r2, r3, r2
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	085b      	lsrs	r3, r3, #1
 800a070:	441a      	add	r2, r3
  timeout_period_mclks =
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	fbb2 f3f3 	udiv	r3, r2, r3
 800a078:	61fb      	str	r3, [r7, #28]
                 macro_period_ns);

  return timeout_period_mclks;
 800a07a:	69fb      	ldr	r3, [r7, #28]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	10624dd3 	.word	0x10624dd3

0800a088 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev, uint16_t timeout_period_mclks,
                                 uint8_t vcsel_period_pclks) {
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	807b      	strh	r3, [r7, #2]
 800a094:	4613      	mov	r3, r2
 800a096:	707b      	strb	r3, [r7, #1]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t actual_timeout_period_us = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	617b      	str	r3, [r7, #20]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a09c:	787b      	ldrb	r3, [r7, #1]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff ff67 	bl	8009f74 <VL53L0X_calc_macro_period_ps>
 800a0a6:	6138      	str	r0, [r7, #16]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a0ae:	4a0b      	ldr	r2, [pc, #44]	; (800a0dc <VL53L0X_calc_timeout_us+0x54>)
 800a0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b4:	099b      	lsrs	r3, r3, #6
 800a0b6:	60fb      	str	r3, [r7, #12]

  actual_timeout_period_us =
      ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800a0b8:	887b      	ldrh	r3, [r7, #2]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	fb03 f202 	mul.w	r2, r3, r2
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	085b      	lsrs	r3, r3, #1
 800a0c4:	4413      	add	r3, r2
  actual_timeout_period_us =
 800a0c6:	4a05      	ldr	r2, [pc, #20]	; (800a0dc <VL53L0X_calc_timeout_us+0x54>)
 800a0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0cc:	099b      	lsrs	r3, r3, #6
 800a0ce:	617b      	str	r3, [r7, #20]

  return actual_timeout_period_us;
 800a0d0:	697b      	ldr	r3, [r7, #20]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3718      	adds	r7, #24
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	10624dd3 	.word	0x10624dd3

0800a0e0 <get_sequence_step_timeout>:

VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
                                        VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t *pTimeOutMicroSecs) {
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08c      	sub	sp, #48	; 0x30
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t CurrentVCSELPulsePeriodPClk;
  uint8_t EncodedTimeOutByte = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f887 3020 	strb.w	r3, [r7, #32]
  uint32_t TimeoutMicroSeconds = 0;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t PreRangeEncodedTimeOut = 0;
 800a0fe:	2300      	movs	r3, #0
 800a100:	83fb      	strh	r3, [r7, #30]
  uint16_t MsrcTimeOutMClks;
  uint16_t PreRangeTimeOutMClks;
  uint16_t FinalRangeTimeOutMClks = 0;
 800a102:	2300      	movs	r3, #0
 800a104:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t FinalRangeEncodedTimeOut;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

  if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 800a106:	7afb      	ldrb	r3, [r7, #11]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d005      	beq.n	800a118 <get_sequence_step_timeout+0x38>
 800a10c:	7afb      	ldrb	r3, [r7, #11]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d002      	beq.n	800a118 <get_sequence_step_timeout+0x38>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 800a112:	7afb      	ldrb	r3, [r7, #11]
 800a114:	2b02      	cmp	r3, #2
 800a116:	d128      	bne.n	800a16a <get_sequence_step_timeout+0x8a>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800a118:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a11c:	461a      	mov	r2, r3
 800a11e:	2100      	movs	r1, #0
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f7fd fa53 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                         &CurrentVCSELPulsePeriodPClk);
    if (Status == VL53L0X_ERROR_NONE) {
 800a12c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a130:	2b00      	cmp	r3, #0
 800a132:	d109      	bne.n	800a148 <get_sequence_step_timeout+0x68>
      Status = VL53L0X_RdByte(Dev, VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
 800a134:	f107 0320 	add.w	r3, r7, #32
 800a138:	461a      	mov	r2, r3
 800a13a:	2146      	movs	r1, #70	; 0x46
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f001 fac9 	bl	800b6d4 <VL53L0X_RdByte>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                              &EncodedTimeOutByte);
    }
    MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a148:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff ff5a 	bl	800a008 <VL53L0X_decode_timeout>
 800a154:	4603      	mov	r3, r0
 800a156:	847b      	strh	r3, [r7, #34]	; 0x22

    TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev, MsrcTimeOutMClks,
 800a158:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a15c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a15e:	4619      	mov	r1, r3
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f7ff ff91 	bl	800a088 <VL53L0X_calc_timeout_us>
 800a166:	62b8      	str	r0, [r7, #40]	; 0x28
 800a168:	e092      	b.n	800a290 <get_sequence_step_timeout+0x1b0>
                                                  CurrentVCSELPulsePeriodPClk);
  } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d135      	bne.n	800a1dc <get_sequence_step_timeout+0xfc>
    /* Retrieve PRE-RANGE VCSEL Period */
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800a170:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a174:	461a      	mov	r2, r3
 800a176:	2100      	movs	r1, #0
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f7fd fa27 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a17e:	4603      	mov	r3, r0
 800a180:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                         &CurrentVCSELPulsePeriodPClk);

    /* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
    if (Status == VL53L0X_ERROR_NONE) {
 800a184:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f040 8081 	bne.w	800a290 <get_sequence_step_timeout+0x1b0>

      /* Retrieve PRE-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800a18e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a192:	461a      	mov	r2, r3
 800a194:	2100      	movs	r1, #0
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f7fd fa18 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a19c:	4603      	mov	r3, r0
 800a19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                           &CurrentVCSELPulsePeriodPClk);

      if (Status == VL53L0X_ERROR_NONE) {
 800a1a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d109      	bne.n	800a1be <get_sequence_step_timeout+0xde>
        Status =
            VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800a1aa:	f107 031e 	add.w	r3, r7, #30
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	2151      	movs	r1, #81	; 0x51
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f001 fab8 	bl	800b728 <VL53L0X_RdWord>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                           &PreRangeEncodedTimeOut);
      }

      PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800a1be:	8bfb      	ldrh	r3, [r7, #30]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7ff ff21 	bl	800a008 <VL53L0X_decode_timeout>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	84fb      	strh	r3, [r7, #38]	; 0x26

      TimeoutMicroSeconds = VL53L0X_calc_timeout_us(
 800a1ca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	68f8      	ldr	r0, [r7, #12]
 800a1d4:	f7ff ff58 	bl	800a088 <VL53L0X_calc_timeout_us>
 800a1d8:	62b8      	str	r0, [r7, #40]	; 0x28
 800a1da:	e059      	b.n	800a290 <get_sequence_step_timeout+0x1b0>
          Dev, PreRangeTimeOutMClks, CurrentVCSELPulsePeriodPClk);
    }
  } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a1dc:	7afb      	ldrb	r3, [r7, #11]
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d156      	bne.n	800a290 <get_sequence_step_timeout+0x1b0>

    VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a1e2:	f107 0314 	add.w	r3, r7, #20
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7fd faf9 	bl	80077e0 <VL53L0X_GetSequenceStepEnables>
    PreRangeTimeOutMClks = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (SchedulerSequenceSteps.PreRangeOn) {
 800a1f2:	7dfb      	ldrb	r3, [r7, #23]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01d      	beq.n	800a234 <get_sequence_step_timeout+0x154>
      /* Retrieve PRE-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800a1f8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	2100      	movs	r1, #0
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7fd f9e3 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a206:	4603      	mov	r3, r0
 800a208:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                           &CurrentVCSELPulsePeriodPClk);

      /* Retrieve PRE-RANGE Timeout in Macro periods
       * (MCLKS) */
      if (Status == VL53L0X_ERROR_NONE) {
 800a20c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10f      	bne.n	800a234 <get_sequence_step_timeout+0x154>
        Status =
            VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800a214:	f107 031e 	add.w	r3, r7, #30
 800a218:	461a      	mov	r2, r3
 800a21a:	2151      	movs	r1, #81	; 0x51
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f001 fa83 	bl	800b728 <VL53L0X_RdWord>
 800a222:	4603      	mov	r3, r0
 800a224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                           &PreRangeEncodedTimeOut);
        PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800a228:	8bfb      	ldrh	r3, [r7, #30]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff feec 	bl	800a008 <VL53L0X_decode_timeout>
 800a230:	4603      	mov	r3, r0
 800a232:	84fb      	strh	r3, [r7, #38]	; 0x26
      }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800a234:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d109      	bne.n	800a250 <get_sequence_step_timeout+0x170>
      /* Retrieve FINAL-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(
 800a23c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a240:	461a      	mov	r2, r3
 800a242:	2101      	movs	r1, #1
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f7fd f9c1 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a24a:	4603      	mov	r3, r0
 800a24c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, &CurrentVCSELPulsePeriodPClk);
    }

    /* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
    if (Status == VL53L0X_ERROR_NONE) {
 800a250:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10f      	bne.n	800a278 <get_sequence_step_timeout+0x198>
      Status =
          VL53L0X_RdWord(Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800a258:	f107 031c 	add.w	r3, r7, #28
 800a25c:	461a      	mov	r2, r3
 800a25e:	2171      	movs	r1, #113	; 0x71
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f001 fa61 	bl	800b728 <VL53L0X_RdWord>
 800a266:	4603      	mov	r3, r0
 800a268:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                         &FinalRangeEncodedTimeOut);
      FinalRangeTimeOutMClks = VL53L0X_decode_timeout(FinalRangeEncodedTimeOut);
 800a26c:	8bbb      	ldrh	r3, [r7, #28]
 800a26e:	4618      	mov	r0, r3
 800a270:	f7ff feca 	bl	800a008 <VL53L0X_decode_timeout>
 800a274:	4603      	mov	r3, r0
 800a276:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a27a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	84bb      	strh	r3, [r7, #36]	; 0x24
    TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev, FinalRangeTimeOutMClks,
 800a280:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a286:	4619      	mov	r1, r3
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f7ff fefd 	bl	800a088 <VL53L0X_calc_timeout_us>
 800a28e:	62b8      	str	r0, [r7, #40]	; 0x28
                                                  CurrentVCSELPulsePeriodPClk);
  }

  *pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a294:	601a      	str	r2, [r3, #0]

  return Status;
 800a296:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3730      	adds	r7, #48	; 0x30
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <set_sequence_step_timeout>:

VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
                                        VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t TimeOutMicroSecs) {
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b08a      	sub	sp, #40	; 0x28
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	60f8      	str	r0, [r7, #12]
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	607a      	str	r2, [r7, #4]
 800a2ae:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t MsrcRangeTimeOutMClks;
  uint16_t FinalRangeTimeOutMClks;
  uint16_t FinalRangeEncodedTimeOut;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

  if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 800a2b6:	7afb      	ldrb	r3, [r7, #11]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d005      	beq.n	800a2c8 <set_sequence_step_timeout+0x26>
 800a2bc:	7afb      	ldrb	r3, [r7, #11]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d002      	beq.n	800a2c8 <set_sequence_step_timeout+0x26>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 800a2c2:	7afb      	ldrb	r3, [r7, #11]
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d138      	bne.n	800a33a <set_sequence_step_timeout+0x98>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800a2c8:	f107 031d 	add.w	r3, r7, #29
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	2100      	movs	r1, #0
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f7fd f97b 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         &CurrentVCSELPulsePeriodPClk);

    if (Status == VL53L0X_ERROR_NONE) {
 800a2dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d11a      	bne.n	800a31a <set_sequence_step_timeout+0x78>
      MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800a2e4:	7f7b      	ldrb	r3, [r7, #29]
 800a2e6:	461a      	mov	r2, r3
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f7ff fea2 	bl	800a034 <VL53L0X_calc_timeout_mclks>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	83fb      	strh	r3, [r7, #30]
          Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);

      if (MsrcRangeTimeOutMClks > 256)
 800a2f4:	8bfb      	ldrh	r3, [r7, #30]
 800a2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2fa:	d903      	bls.n	800a304 <set_sequence_step_timeout+0x62>
        MsrcEncodedTimeOut = 255;
 800a2fc:	23ff      	movs	r3, #255	; 0xff
 800a2fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a302:	e004      	b.n	800a30e <set_sequence_step_timeout+0x6c>
      else
        MsrcEncodedTimeOut = (uint8_t)MsrcRangeTimeOutMClks - 1;
 800a304:	8bfb      	ldrh	r3, [r7, #30]
 800a306:	b2db      	uxtb	r3, r3
 800a308:	3b01      	subs	r3, #1
 800a30a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, LastEncodedTimeout,
 800a30e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a312:	b29a      	uxth	r2, r3
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                         MsrcEncodedTimeOut);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800a31a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f040 80ad 	bne.w	800a47e <set_sequence_step_timeout+0x1dc>
      Status = VL53L0X_WrByte(Dev, VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
 800a324:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a328:	461a      	mov	r2, r3
 800a32a:	2146      	movs	r1, #70	; 0x46
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f001 f94f 	bl	800b5d0 <VL53L0X_WrByte>
 800a332:	4603      	mov	r3, r0
 800a334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (Status == VL53L0X_ERROR_NONE) {
 800a338:	e0a1      	b.n	800a47e <set_sequence_step_timeout+0x1dc>
                              MsrcEncodedTimeOut);
    }
  } else {

    if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a33a:	7afb      	ldrb	r3, [r7, #11]
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d135      	bne.n	800a3ac <set_sequence_step_timeout+0x10a>

      if (Status == VL53L0X_ERROR_NONE) {
 800a340:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a344:	2b00      	cmp	r3, #0
 800a346:	d11b      	bne.n	800a380 <set_sequence_step_timeout+0xde>
        Status = VL53L0X_GetVcselPulsePeriod(
 800a348:	f107 031d 	add.w	r3, r7, #29
 800a34c:	461a      	mov	r2, r3
 800a34e:	2100      	movs	r1, #0
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f7fd f93b 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a356:	4603      	mov	r3, r0
 800a358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, &CurrentVCSELPulsePeriodPClk);
        PreRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800a35c:	7f7b      	ldrb	r3, [r7, #29]
 800a35e:	461a      	mov	r2, r3
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff fe66 	bl	800a034 <VL53L0X_calc_timeout_mclks>
 800a368:	4603      	mov	r3, r0
 800a36a:	84bb      	strh	r3, [r7, #36]	; 0x24
            Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);
        PreRangeEncodedTimeOut = VL53L0X_encode_timeout(PreRangeTimeOutMClks);
 800a36c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fe1e 	bl	8009fb0 <VL53L0X_encode_timeout>
 800a374:	4603      	mov	r3, r0
 800a376:	837b      	strh	r3, [r7, #26]

        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, LastEncodedTimeout,
 800a378:	8b7a      	ldrh	r2, [r7, #26]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                           PreRangeEncodedTimeOut);
      }

      if (Status == VL53L0X_ERROR_NONE) {
 800a380:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a384:	2b00      	cmp	r3, #0
 800a386:	d108      	bne.n	800a39a <set_sequence_step_timeout+0xf8>
        Status =
            VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800a388:	8b7b      	ldrh	r3, [r7, #26]
 800a38a:	461a      	mov	r2, r3
 800a38c:	2151      	movs	r1, #81	; 0x51
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f001 f942 	bl	800b618 <VL53L0X_WrWord>
 800a394:	4603      	mov	r3, r0
 800a396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                           PreRangeEncodedTimeOut);
      }

      if (Status == VL53L0X_ERROR_NONE) {
 800a39a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d16d      	bne.n	800a47e <set_sequence_step_timeout+0x1dc>
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs,
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a3aa:	e068      	b.n	800a47e <set_sequence_step_timeout+0x1dc>
                                           TimeOutMicroSecs);
      }
    } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a3ac:	7afb      	ldrb	r3, [r7, #11]
 800a3ae:	2b04      	cmp	r3, #4
 800a3b0:	d162      	bne.n	800a478 <set_sequence_step_timeout+0x1d6>
       * must be added. To do this both final and pre-range
       * timeouts must be expressed in macro periods MClks
       * because they have different vcsel periods.
       */

      VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a3b2:	f107 0314 	add.w	r3, r7, #20
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f7fd fa11 	bl	80077e0 <VL53L0X_GetSequenceStepEnables>
      PreRangeTimeOutMClks = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (SchedulerSequenceSteps.PreRangeOn) {
 800a3c2:	7dfb      	ldrb	r3, [r7, #23]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01d      	beq.n	800a404 <set_sequence_step_timeout+0x162>

        /* Retrieve PRE-RANGE VCSEL Period */
        Status = VL53L0X_GetVcselPulsePeriod(
 800a3c8:	f107 031d 	add.w	r3, r7, #29
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f7fd f8fb 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, &CurrentVCSELPulsePeriodPClk);

        /* Retrieve PRE-RANGE Timeout in Macro periods
         * (MCLKS) */
        if (Status == VL53L0X_ERROR_NONE) {
 800a3dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10f      	bne.n	800a404 <set_sequence_step_timeout+0x162>
          Status = VL53L0X_RdWord(Dev, 0x51, &PreRangeEncodedTimeOut);
 800a3e4:	f107 031a 	add.w	r3, r7, #26
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	2151      	movs	r1, #81	; 0x51
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f001 f99b 	bl	800b728 <VL53L0X_RdWord>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800a3f8:	8b7b      	ldrh	r3, [r7, #26]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fe04 	bl	800a008 <VL53L0X_decode_timeout>
 800a400:	4603      	mov	r3, r0
 800a402:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Calculate FINAL RANGE Timeout in Macro Periods
       * (MCLKS) and add PRE-RANGE value
       */
      if (Status == VL53L0X_ERROR_NONE) {
 800a404:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d109      	bne.n	800a420 <set_sequence_step_timeout+0x17e>

        Status =
            VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
 800a40c:	f107 031d 	add.w	r3, r7, #29
 800a410:	461a      	mov	r2, r3
 800a412:	2101      	movs	r1, #1
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7fd f8d9 	bl	80075cc <VL53L0X_GetVcselPulsePeriod>
 800a41a:	4603      	mov	r3, r0
 800a41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        &CurrentVCSELPulsePeriodPClk);
      }
      if (Status == VL53L0X_ERROR_NONE) {
 800a420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a424:	2b00      	cmp	r3, #0
 800a426:	d12a      	bne.n	800a47e <set_sequence_step_timeout+0x1dc>

        FinalRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800a428:	7f7b      	ldrb	r3, [r7, #29]
 800a42a:	461a      	mov	r2, r3
 800a42c:	6879      	ldr	r1, [r7, #4]
 800a42e:	68f8      	ldr	r0, [r7, #12]
 800a430:	f7ff fe00 	bl	800a034 <VL53L0X_calc_timeout_mclks>
 800a434:	4603      	mov	r3, r0
 800a436:	847b      	strh	r3, [r7, #34]	; 0x22
            Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);

        FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a438:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a43a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a43c:	4413      	add	r3, r2
 800a43e:	847b      	strh	r3, [r7, #34]	; 0x22

        FinalRangeEncodedTimeOut =
            VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a440:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a442:	4618      	mov	r0, r3
 800a444:	f7ff fdb4 	bl	8009fb0 <VL53L0X_encode_timeout>
 800a448:	4603      	mov	r3, r0
 800a44a:	843b      	strh	r3, [r7, #32]

        if (Status == VL53L0X_ERROR_NONE) {
 800a44c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a450:	2b00      	cmp	r3, #0
 800a452:	d108      	bne.n	800a466 <set_sequence_step_timeout+0x1c4>
          Status = VL53L0X_WrWord(Dev, 0x71, FinalRangeEncodedTimeOut);
 800a454:	8c3b      	ldrh	r3, [r7, #32]
 800a456:	461a      	mov	r2, r3
 800a458:	2171      	movs	r1, #113	; 0x71
 800a45a:	68f8      	ldr	r0, [r7, #12]
 800a45c:	f001 f8dc 	bl	800b618 <VL53L0X_WrWord>
 800a460:	4603      	mov	r3, r0
 800a462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (Status == VL53L0X_ERROR_NONE) {
 800a466:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d107      	bne.n	800a47e <set_sequence_step_timeout+0x1dc>
          VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs,
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a476:	e002      	b.n	800a47e <set_sequence_step_timeout+0x1dc>
                                             TimeOutMicroSecs);
        }
      }
    } else
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a478:	23fc      	movs	r3, #252	; 0xfc
 800a47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return Status;
 800a47e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a482:	4618      	mov	r0, r3
 800a484:	3728      	adds	r7, #40	; 0x28
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <VL53L0X_get_vcsel_pulse_period>:
}

VL53L0X_Error
VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
                               VL53L0X_VcselPeriod VcselPeriodType,
                               uint8_t *pVCSELPulsePeriodPCLK) {
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b086      	sub	sp, #24
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	460b      	mov	r3, r1
 800a494:	607a      	str	r2, [r7, #4]
 800a496:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a498:	2300      	movs	r3, #0
 800a49a:	75fb      	strb	r3, [r7, #23]
  uint8_t vcsel_period_reg;

  switch (VcselPeriodType) {
 800a49c:	7afb      	ldrb	r3, [r7, #11]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d002      	beq.n	800a4a8 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d00a      	beq.n	800a4bc <VL53L0X_get_vcsel_pulse_period+0x32>
 800a4a6:	e013      	b.n	800a4d0 <VL53L0X_get_vcsel_pulse_period+0x46>
  case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
 800a4a8:	f107 0316 	add.w	r3, r7, #22
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	2150      	movs	r1, #80	; 0x50
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f001 f90f 	bl	800b6d4 <VL53L0X_RdByte>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75fb      	strb	r3, [r7, #23]
                            &vcsel_period_reg);
    break;
 800a4ba:	e00b      	b.n	800a4d4 <VL53L0X_get_vcsel_pulse_period+0x4a>
  case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
 800a4bc:	f107 0316 	add.w	r3, r7, #22
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	2170      	movs	r1, #112	; 0x70
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f001 f905 	bl	800b6d4 <VL53L0X_RdByte>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	75fb      	strb	r3, [r7, #23]
                            &vcsel_period_reg);
    break;
 800a4ce:	e001      	b.n	800a4d4 <VL53L0X_get_vcsel_pulse_period+0x4a>
  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a4d0:	23fc      	movs	r3, #252	; 0xfc
 800a4d2:	75fb      	strb	r3, [r7, #23]
  }

  if (Status == VL53L0X_ERROR_NONE)
 800a4d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d107      	bne.n	800a4ec <VL53L0X_get_vcsel_pulse_period+0x62>
    *pVCSELPulsePeriodPCLK = VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a4dc:	7dbb      	ldrb	r3, [r7, #22]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7fe fff3 	bl	80094ca <VL53L0X_decode_vcsel_period>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	701a      	strb	r2, [r3, #0]

  return Status;
 800a4ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3718      	adds	r7, #24
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}

0800a4f8 <VL53L0X_set_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
    VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b092      	sub	sp, #72	; 0x48
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a502:	2300      	movs	r3, #0
 800a504:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t FinalRangeTimingBudgetMicroSeconds;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
  uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 800a508:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a50c:	613b      	str	r3, [r7, #16]
  uint32_t StartOverheadMicroSeconds = 1320;
 800a50e:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800a512:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t EndOverheadMicroSeconds = 960;
 800a514:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a518:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t MsrcOverheadMicroSeconds = 660;
 800a51a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a51e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t TccOverheadMicroSeconds = 590;
 800a520:	f240 234e 	movw	r3, #590	; 0x24e
 800a524:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t DssOverheadMicroSeconds = 690;
 800a526:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t PreRangeOverheadMicroSeconds = 660;
 800a52c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a530:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a532:	f240 2326 	movw	r3, #550	; 0x226
 800a536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PreRangeTimeoutMicroSeconds = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	60fb      	str	r3, [r7, #12]
  uint32_t cMinTimingBudgetMicroSeconds = 20000;
 800a53c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a540:	623b      	str	r3, [r7, #32]
  uint32_t SubTimeout = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	61fb      	str	r3, [r7, #28]

  LOG_FUNCTION_START("");

  if (MeasurementTimingBudgetMicroSeconds < cMinTimingBudgetMicroSeconds) {
 800a546:	683a      	ldr	r2, [r7, #0]
 800a548:	6a3b      	ldr	r3, [r7, #32]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d205      	bcs.n	800a55a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a54e:	23fc      	movs	r3, #252	; 0xfc
 800a550:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    return Status;
 800a554:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a558:	e0aa      	b.n	800a6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
  }

  FinalRangeTimingBudgetMicroSeconds =
      MeasurementTimingBudgetMicroSeconds -
      (StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a55a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	4413      	add	r3, r2
  FinalRangeTimingBudgetMicroSeconds =
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	643b      	str	r3, [r7, #64]	; 0x40

  Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a566:	f107 0314 	add.w	r3, r7, #20
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7fd f937 	bl	80077e0 <VL53L0X_GetSequenceStepEnables>
 800a572:	4603      	mov	r3, r0
 800a574:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if (Status == VL53L0X_ERROR_NONE &&
 800a578:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d15b      	bne.n	800a638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800a580:	7d3b      	ldrb	r3, [r7, #20]
  if (Status == VL53L0X_ERROR_NONE &&
 800a582:	2b00      	cmp	r3, #0
 800a584:	d105      	bne.n	800a592 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800a586:	7d7b      	ldrb	r3, [r7, #21]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d102      	bne.n	800a592 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
       SchedulerSequenceSteps.DssOn)) {
 800a58c:	7dbb      	ldrb	r3, [r7, #22]
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d052      	beq.n	800a638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

    /* TCC, MSRC and DSS all share the same timeout */
    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 800a592:	f107 0310 	add.w	r3, r7, #16
 800a596:	461a      	mov	r2, r3
 800a598:	2102      	movs	r1, #2
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff fda0 	bl	800a0e0 <get_sequence_step_timeout>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       &MsrcDccTccTimeoutMicroSeconds);

    /* Subtract the TCC, MSRC and DSS timeouts if they are
     * enabled. */

    if (Status != VL53L0X_ERROR_NONE)
 800a5a6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
      return Status;
 800a5ae:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a5b2:	e07d      	b.n	800a6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

    /* TCC */
    if (SchedulerSequenceSteps.TccOn) {
 800a5b4:	7d3b      	ldrb	r3, [r7, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00f      	beq.n	800a5da <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

      SubTimeout = MsrcDccTccTimeoutMicroSeconds + TccOverheadMicroSeconds;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5be:	4413      	add	r3, r2
 800a5c0:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a5c2:	69fa      	ldr	r2, [r7, #28]
 800a5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d204      	bcs.n	800a5d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a5ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	643b      	str	r3, [r7, #64]	; 0x40
 800a5d2:	e002      	b.n	800a5da <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a5d4:	23fc      	movs	r3, #252	; 0xfc
 800a5d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }

    if (Status != VL53L0X_ERROR_NONE) {
 800a5da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d002      	beq.n	800a5e8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
      LOG_FUNCTION_END(Status);
      return Status;
 800a5e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a5e6:	e063      	b.n	800a6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
    }

    /* DSS */
    if (SchedulerSequenceSteps.DssOn) {
 800a5e8:	7dbb      	ldrb	r3, [r7, #22]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d011      	beq.n	800a612 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

      SubTimeout =
          2 * (MsrcDccTccTimeoutMicroSeconds + DssOverheadMicroSeconds);
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f2:	4413      	add	r3, r2
      SubTimeout =
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a5f8:	69fa      	ldr	r2, [r7, #28]
 800a5fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d204      	bcs.n	800a60a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	643b      	str	r3, [r7, #64]	; 0x40
 800a608:	e016      	b.n	800a638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a60a:	23fc      	movs	r3, #252	; 0xfc
 800a60c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a610:	e012      	b.n	800a638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      }
    } else if (SchedulerSequenceSteps.MsrcOn) {
 800a612:	7d7b      	ldrb	r3, [r7, #21]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00f      	beq.n	800a638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      /* MSRC */
      SubTimeout = MsrcDccTccTimeoutMicroSeconds + MsrcOverheadMicroSeconds;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a61c:	4413      	add	r3, r2
 800a61e:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a624:	429a      	cmp	r2, r3
 800a626:	d204      	bcs.n	800a632 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	1ad3      	subs	r3, r2, r3
 800a62e:	643b      	str	r3, [r7, #64]	; 0x40
 800a630:	e002      	b.n	800a638 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a632:	23fc      	movs	r3, #252	; 0xfc
 800a634:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  if (Status != VL53L0X_ERROR_NONE) {
 800a638:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
    LOG_FUNCTION_END(Status);
    return Status;
 800a640:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a644:	e034      	b.n	800a6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
  }

  if (SchedulerSequenceSteps.PreRangeOn) {
 800a646:	7dfb      	ldrb	r3, [r7, #23]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d019      	beq.n	800a680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

    /* Subtract the Pre-range timeout if enabled. */

    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800a64c:	f107 030c 	add.w	r3, r7, #12
 800a650:	461a      	mov	r2, r3
 800a652:	2103      	movs	r1, #3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff fd43 	bl	800a0e0 <get_sequence_step_timeout>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       &PreRangeTimeoutMicroSeconds);

    SubTimeout = PreRangeTimeoutMicroSeconds + PreRangeOverheadMicroSeconds;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a664:	4413      	add	r3, r2
 800a666:	61fb      	str	r3, [r7, #28]

    if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a668:	69fa      	ldr	r2, [r7, #28]
 800a66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d204      	bcs.n	800a67a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
      FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	643b      	str	r3, [r7, #64]	; 0x40
 800a678:	e002      	b.n	800a680 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
    } else {
      /* Requested timeout too big. */
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a67a:	23fc      	movs	r3, #252	; 0xfc
 800a67c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
  }

  if (Status == VL53L0X_ERROR_NONE && SchedulerSequenceSteps.FinalRangeOn) {
 800a680:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a684:	2b00      	cmp	r3, #0
 800a686:	d111      	bne.n	800a6ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
 800a688:	7e3b      	ldrb	r3, [r7, #24]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00e      	beq.n	800a6ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

    FinalRangeTimingBudgetMicroSeconds -= FinalRangeOverheadMicroSeconds;
 800a68e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	1ad3      	subs	r3, r2, r3
 800a694:	643b      	str	r3, [r7, #64]	; 0x40
     * budget and the sum of all other timeouts within the sequence.
     * If there is no room for the final range timeout, then an error
     * will be set. Otherwise the remaining time will be applied to
     * the final range.
     */
    Status = set_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 800a696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a698:	2104      	movs	r1, #4
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff fe01 	bl	800a2a2 <set_sequence_step_timeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       FinalRangeTimingBudgetMicroSeconds);

    VL53L0X_SETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	683a      	ldr	r2, [r7, #0]
 800a6aa:	615a      	str	r2, [r3, #20]
                              MeasurementTimingBudgetMicroSeconds);
  }

  LOG_FUNCTION_END(Status);

  return Status;
 800a6ac:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3748      	adds	r7, #72	; 0x48
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
    VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b090      	sub	sp, #64	; 0x40
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
  uint32_t FinalRangeTimeoutMicroSeconds;
  uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 800a6c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a6cc:	613b      	str	r3, [r7, #16]
  uint32_t StartOverheadMicroSeconds = 1910;
 800a6ce:	f240 7376 	movw	r3, #1910	; 0x776
 800a6d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t EndOverheadMicroSeconds = 960;
 800a6d4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a6d8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t MsrcOverheadMicroSeconds = 660;
 800a6da:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a6de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t TccOverheadMicroSeconds = 590;
 800a6e0:	f240 234e 	movw	r3, #590	; 0x24e
 800a6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t DssOverheadMicroSeconds = 690;
 800a6e6:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a6ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t PreRangeOverheadMicroSeconds = 660;
 800a6ec:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a6f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a6f2:	f240 2326 	movw	r3, #550	; 0x226
 800a6f6:	623b      	str	r3, [r7, #32]
  uint32_t PreRangeTimeoutMicroSeconds = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60fb      	str	r3, [r7, #12]

  LOG_FUNCTION_START("");

  /* Start and end overhead times always present */
  *pMeasurementTimingBudgetMicroSeconds =
      StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a6fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a700:	441a      	add	r2, r3
  *pMeasurementTimingBudgetMicroSeconds =
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a706:	f107 0318 	add.w	r3, r7, #24
 800a70a:	4619      	mov	r1, r3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7fd f867 	bl	80077e0 <VL53L0X_GetSequenceStepEnables>
 800a712:	4603      	mov	r3, r0
 800a714:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status != VL53L0X_ERROR_NONE) {
 800a718:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
    LOG_FUNCTION_END(Status);
    return Status;
 800a720:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a724:	e075      	b.n	800a812 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
  }

  if (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800a726:	7e3b      	ldrb	r3, [r7, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d105      	bne.n	800a738 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
 800a72c:	7e7b      	ldrb	r3, [r7, #25]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d102      	bne.n	800a738 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
      SchedulerSequenceSteps.DssOn) {
 800a732:	7ebb      	ldrb	r3, [r7, #26]
  if (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800a734:	2b00      	cmp	r3, #0
 800a736:	d030      	beq.n	800a79a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 800a738:	f107 0310 	add.w	r3, r7, #16
 800a73c:	461a      	mov	r2, r3
 800a73e:	2102      	movs	r1, #2
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff fccd 	bl	800a0e0 <get_sequence_step_timeout>
 800a746:	4603      	mov	r3, r0
 800a748:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                       &MsrcDccTccTimeoutMicroSeconds);

    if (Status == VL53L0X_ERROR_NONE) {
 800a74c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a750:	2b00      	cmp	r3, #0
 800a752:	d122      	bne.n	800a79a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
      if (SchedulerSequenceSteps.TccOn) {
 800a754:	7e3b      	ldrb	r3, [r7, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d007      	beq.n	800a76a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
        *pMeasurementTimingBudgetMicroSeconds +=
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
            MsrcDccTccTimeoutMicroSeconds + TccOverheadMicroSeconds;
 800a75e:	6939      	ldr	r1, [r7, #16]
 800a760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a762:	440b      	add	r3, r1
        *pMeasurementTimingBudgetMicroSeconds +=
 800a764:	441a      	add	r2, r3
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	601a      	str	r2, [r3, #0]
      }

      if (SchedulerSequenceSteps.DssOn) {
 800a76a:	7ebb      	ldrb	r3, [r7, #26]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d009      	beq.n	800a784 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
        *pMeasurementTimingBudgetMicroSeconds +=
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681a      	ldr	r2, [r3, #0]
            2 * (MsrcDccTccTimeoutMicroSeconds + DssOverheadMicroSeconds);
 800a774:	6939      	ldr	r1, [r7, #16]
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	440b      	add	r3, r1
 800a77a:	005b      	lsls	r3, r3, #1
        *pMeasurementTimingBudgetMicroSeconds +=
 800a77c:	441a      	add	r2, r3
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	601a      	str	r2, [r3, #0]
 800a782:	e00a      	b.n	800a79a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
      } else if (SchedulerSequenceSteps.MsrcOn) {
 800a784:	7e7b      	ldrb	r3, [r7, #25]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d007      	beq.n	800a79a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
        *pMeasurementTimingBudgetMicroSeconds +=
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
            MsrcDccTccTimeoutMicroSeconds + MsrcOverheadMicroSeconds;
 800a78e:	6939      	ldr	r1, [r7, #16]
 800a790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a792:	440b      	add	r3, r1
        *pMeasurementTimingBudgetMicroSeconds +=
 800a794:	441a      	add	r2, r3
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800a79a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d114      	bne.n	800a7cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
    if (SchedulerSequenceSteps.PreRangeOn) {
 800a7a2:	7efb      	ldrb	r3, [r7, #27]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d011      	beq.n	800a7cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
      Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800a7a8:	f107 030c 	add.w	r3, r7, #12
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	2103      	movs	r1, #3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7ff fc95 	bl	800a0e0 <get_sequence_step_timeout>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &PreRangeTimeoutMicroSeconds);
      *pMeasurementTimingBudgetMicroSeconds +=
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
          PreRangeTimeoutMicroSeconds + PreRangeOverheadMicroSeconds;
 800a7c0:	68f9      	ldr	r1, [r7, #12]
 800a7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c4:	440b      	add	r3, r1
      *pMeasurementTimingBudgetMicroSeconds +=
 800a7c6:	441a      	add	r2, r3
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	601a      	str	r2, [r3, #0]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800a7cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d114      	bne.n	800a7fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
    if (SchedulerSequenceSteps.FinalRangeOn) {
 800a7d4:	7f3b      	ldrb	r3, [r7, #28]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d011      	beq.n	800a7fe <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
      Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 800a7da:	f107 0314 	add.w	r3, r7, #20
 800a7de:	461a      	mov	r2, r3
 800a7e0:	2104      	movs	r1, #4
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7ff fc7c 	bl	800a0e0 <get_sequence_step_timeout>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &FinalRangeTimeoutMicroSeconds);
      *pMeasurementTimingBudgetMicroSeconds +=
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
          (FinalRangeTimeoutMicroSeconds + FinalRangeOverheadMicroSeconds);
 800a7f2:	6979      	ldr	r1, [r7, #20]
 800a7f4:	6a3b      	ldr	r3, [r7, #32]
 800a7f6:	440b      	add	r3, r1
      *pMeasurementTimingBudgetMicroSeconds +=
 800a7f8:	441a      	add	r2, r3
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	601a      	str	r2, [r3, #0]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800a7fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
    VL53L0X_SETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	615a      	str	r2, [r3, #20]
                              *pMeasurementTimingBudgetMicroSeconds);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800a80e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a812:	4618      	mov	r0, r3
 800a814:	3740      	adds	r7, #64	; 0x40
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
	...

0800a81c <VL53L0X_load_tuning_settings>:

VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
                                           uint8_t *pTuningSettingBuffer) {
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a826:	2300      	movs	r3, #0
 800a828:	77fb      	strb	r3, [r7, #31]
  uint8_t localBuffer[4]; /* max */
  uint16_t Temp16;

  LOG_FUNCTION_START("");

  Index = 0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	617b      	str	r3, [r7, #20]

  while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a82e:	e0c6      	b.n	800a9be <VL53L0X_load_tuning_settings+0x1a2>
         (Status == VL53L0X_ERROR_NONE)) {
    NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	4413      	add	r3, r2
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	74fb      	strb	r3, [r7, #19]
    Index++;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	3301      	adds	r3, #1
 800a83e:	617b      	str	r3, [r7, #20]
    if (NumberOfWrites == 0xFF) {
 800a840:	7cfb      	ldrb	r3, [r7, #19]
 800a842:	2bff      	cmp	r3, #255	; 0xff
 800a844:	f040 808d 	bne.w	800a962 <VL53L0X_load_tuning_settings+0x146>
      /* internal parameters */
      SelectParam = *(pTuningSettingBuffer + Index);
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	4413      	add	r3, r2
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	747b      	strb	r3, [r7, #17]
      Index++;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	3301      	adds	r3, #1
 800a856:	617b      	str	r3, [r7, #20]
      switch (SelectParam) {
 800a858:	7c7b      	ldrb	r3, [r7, #17]
 800a85a:	2b03      	cmp	r3, #3
 800a85c:	d87e      	bhi.n	800a95c <VL53L0X_load_tuning_settings+0x140>
 800a85e:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <VL53L0X_load_tuning_settings+0x48>)
 800a860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a864:	0800a875 	.word	0x0800a875
 800a868:	0800a8af 	.word	0x0800a8af
 800a86c:	0800a8e9 	.word	0x0800a8e9
 800a870:	0800a923 	.word	0x0800a923
      case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	4413      	add	r3, r2
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	743b      	strb	r3, [r7, #16]
        Index++;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	3301      	adds	r3, #1
 800a882:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	4413      	add	r3, r2
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	73fb      	strb	r3, [r7, #15]
        Index++;
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	3301      	adds	r3, #1
 800a892:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a894:	7c3b      	ldrb	r3, [r7, #16]
 800a896:	b29b      	uxth	r3, r3
 800a898:	021b      	lsls	r3, r3, #8
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	89ba      	ldrh	r2, [r7, #12]
 800a8a8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
        break;
 800a8ac:	e087      	b.n	800a9be <VL53L0X_load_tuning_settings+0x1a2>
      case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	683a      	ldr	r2, [r7, #0]
 800a8b2:	4413      	add	r3, r2
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	743b      	strb	r3, [r7, #16]
        Index++;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	73fb      	strb	r3, [r7, #15]
        Index++;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a8ce:	7c3b      	ldrb	r3, [r7, #16]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	021b      	lsls	r3, r3, #8
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4413      	add	r3, r2
 800a8dc:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstEffPulseWidth, Temp16);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	89ba      	ldrh	r2, [r7, #12]
 800a8e2:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
        break;
 800a8e6:	e06a      	b.n	800a9be <VL53L0X_load_tuning_settings+0x1a2>
      case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	683a      	ldr	r2, [r7, #0]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	743b      	strb	r3, [r7, #16]
        Index++;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	73fb      	strb	r3, [r7, #15]
        Index++;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	3301      	adds	r3, #1
 800a906:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a908:	7c3b      	ldrb	r3, [r7, #16]
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	021b      	lsls	r3, r3, #8
 800a90e:	b29a      	uxth	r2, r3
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	b29b      	uxth	r3, r3
 800a914:	4413      	add	r3, r2
 800a916:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	89ba      	ldrh	r2, [r7, #12]
 800a91c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
        break;
 800a920:	e04d      	b.n	800a9be <VL53L0X_load_tuning_settings+0x1a2>
      case 3: /* uint16_t targetRefRate -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	4413      	add	r3, r2
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	743b      	strb	r3, [r7, #16]
        Index++;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	3301      	adds	r3, #1
 800a930:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	4413      	add	r3, r2
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	73fb      	strb	r3, [r7, #15]
        Index++;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	3301      	adds	r3, #1
 800a940:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a942:	7c3b      	ldrb	r3, [r7, #16]
 800a944:	b29b      	uxth	r3, r3
 800a946:	021b      	lsls	r3, r3, #8
 800a948:	b29a      	uxth	r2, r3
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	4413      	add	r3, r2
 800a950:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, targetRefRate, Temp16);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	89ba      	ldrh	r2, [r7, #12]
 800a956:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
        break;
 800a95a:	e030      	b.n	800a9be <VL53L0X_load_tuning_settings+0x1a2>
      default: /* invalid parameter */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a95c:	23fc      	movs	r3, #252	; 0xfc
 800a95e:	77fb      	strb	r3, [r7, #31]
 800a960:	e02d      	b.n	800a9be <VL53L0X_load_tuning_settings+0x1a2>
      }

    } else if (NumberOfWrites <= 4) {
 800a962:	7cfb      	ldrb	r3, [r7, #19]
 800a964:	2b04      	cmp	r3, #4
 800a966:	d828      	bhi.n	800a9ba <VL53L0X_load_tuning_settings+0x19e>
      Address = *(pTuningSettingBuffer + Index);
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	4413      	add	r3, r2
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	74bb      	strb	r3, [r7, #18]
      Index++;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	3301      	adds	r3, #1
 800a976:	617b      	str	r3, [r7, #20]

      for (i = 0; i < NumberOfWrites; i++) {
 800a978:	2300      	movs	r3, #0
 800a97a:	61bb      	str	r3, [r7, #24]
 800a97c:	e00f      	b.n	800a99e <VL53L0X_load_tuning_settings+0x182>
        localBuffer[i] = *(pTuningSettingBuffer + Index);
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	683a      	ldr	r2, [r7, #0]
 800a982:	4413      	add	r3, r2
 800a984:	7819      	ldrb	r1, [r3, #0]
 800a986:	f107 0208 	add.w	r2, r7, #8
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	4413      	add	r3, r2
 800a98e:	460a      	mov	r2, r1
 800a990:	701a      	strb	r2, [r3, #0]
        Index++;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	3301      	adds	r3, #1
 800a996:	617b      	str	r3, [r7, #20]
      for (i = 0; i < NumberOfWrites; i++) {
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	3301      	adds	r3, #1
 800a99c:	61bb      	str	r3, [r7, #24]
 800a99e:	7cfb      	ldrb	r3, [r7, #19]
 800a9a0:	69ba      	ldr	r2, [r7, #24]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	dbeb      	blt.n	800a97e <VL53L0X_load_tuning_settings+0x162>
      }

      Status = VL53L0X_WriteMulti(Dev, Address, localBuffer, NumberOfWrites);
 800a9a6:	7cfb      	ldrb	r3, [r7, #19]
 800a9a8:	f107 0208 	add.w	r2, r7, #8
 800a9ac:	7cb9      	ldrb	r1, [r7, #18]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fdb2 	bl	800b518 <VL53L0X_WriteMulti>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	77fb      	strb	r3, [r7, #31]
 800a9b8:	e001      	b.n	800a9be <VL53L0X_load_tuning_settings+0x1a2>

    } else {
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9ba:	23fc      	movs	r3, #252	; 0xfc
 800a9bc:	77fb      	strb	r3, [r7, #31]
  while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d004      	beq.n	800a9d4 <VL53L0X_load_tuning_settings+0x1b8>
 800a9ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f43f af2e 	beq.w	800a830 <VL53L0X_load_tuning_settings+0x14>
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800a9d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3720      	adds	r7, #32
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_xtalk_rate_mcps) {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	77fb      	strb	r3, [r7, #31]

  uint8_t xtalkCompEnable;
  FixPoint1616_t totalXtalkMegaCps;
  FixPoint1616_t xtalkPerSpadMegaCps;

  *ptotal_xtalk_rate_mcps = 0;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a9f6:	f107 0313 	add.w	r3, r7, #19
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7fc ffbb 	bl	8007978 <VL53L0X_GetXTalkCompensationEnable>
 800aa02:	4603      	mov	r3, r0
 800aa04:	77fb      	strb	r3, [r7, #31]
  if (Status == VL53L0X_ERROR_NONE) {
 800aa06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d111      	bne.n	800aa32 <VL53L0X_get_total_xtalk_rate+0x52>

    if (xtalkCompEnable) {
 800aa0e:	7cfb      	ldrb	r3, [r7, #19]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00e      	beq.n	800aa32 <VL53L0X_get_total_xtalk_rate+0x52>

      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	61bb      	str	r3, [r7, #24]
                                xtalkPerSpadMegaCps);

      /* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
      totalXtalkMegaCps =
          pRangingMeasurementData->EffectiveSpadRtnCount * xtalkPerSpadMegaCps;
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	8a9b      	ldrh	r3, [r3, #20]
 800aa1e:	461a      	mov	r2, r3
      totalXtalkMegaCps =
 800aa20:	69bb      	ldr	r3, [r7, #24]
 800aa22:	fb02 f303 	mul.w	r3, r2, r3
 800aa26:	617b      	str	r3, [r7, #20]

      /* FixPoint0824 >> 8 = FixPoint1616 */
      *ptotal_xtalk_rate_mcps = (totalXtalkMegaCps + 0x80) >> 8;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	3380      	adds	r3, #128	; 0x80
 800aa2c:	0a1a      	lsrs	r2, r3, #8
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	601a      	str	r2, [r3, #0]
    }
  }

  return Status;
 800aa32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3720      	adds	r7, #32
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_signal_rate_mcps) {
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b086      	sub	sp, #24
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t totalXtalkMegaCps;

  LOG_FUNCTION_START("");

  *ptotal_signal_rate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	68da      	ldr	r2, [r3, #12]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800aa56:	f107 0310 	add.w	r3, r7, #16
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	68b9      	ldr	r1, [r7, #8]
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f7ff ffbe 	bl	800a9e0 <VL53L0X_get_total_xtalk_rate>
 800aa64:	4603      	mov	r3, r0
 800aa66:	75fb      	strb	r3, [r7, #23]
                                        &totalXtalkMegaCps);

  if (Status == VL53L0X_ERROR_NONE)
 800aa68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d105      	bne.n	800aa7c <VL53L0X_get_total_signal_rate+0x3e>
    *ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	441a      	add	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	601a      	str	r2, [r3, #0]

  return Status;
 800aa7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3718      	adds	r7, #24
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <VL53L0X_calc_dmax>:
                                FixPoint1616_t totalSignalRate_mcps,
                                FixPoint1616_t totalCorrSignalRate_mcps,
                                FixPoint1616_t pwMult, uint32_t sigmaEstimateP1,
                                FixPoint1616_t sigmaEstimateP2,
                                uint32_t peakVcselDuration_us,
                                uint32_t *pdmax_mm) {
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b09a      	sub	sp, #104	; 0x68
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
  const uint32_t cSigmaLimit = 18;
 800aa96:	2312      	movs	r3, #18
 800aa98:	657b      	str	r3, [r7, #84]	; 0x54
  const FixPoint1616_t cSignalLimit = 0x4000;     /* 0.25 */
 800aa9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa9e:	653b      	str	r3, [r7, #80]	; 0x50
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800aaa0:	2342      	movs	r3, #66	; 0x42
 800aaa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800aaa4:	2306      	movs	r3, #6
 800aaa6:	64bb      	str	r3, [r7, #72]	; 0x48
  const uint32_t cAmbEffWidthDMax_ns = 7;
 800aaa8:	2307      	movs	r3, #7
 800aaaa:	647b      	str	r3, [r7, #68]	; 0x44
  FixPoint1616_t dmaxAmbient;
  FixPoint1616_t dmaxDarkTmp;
  FixPoint1616_t sigmaEstP2Tmp;
  uint32_t signalRateTemp_mcps;

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aaac:	2300      	movs	r3, #0
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  LOG_FUNCTION_START("");

  dmaxCalRange_mm = PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 800aab8:	63fb      	str	r3, [r7, #60]	; 0x3c

  dmaxCalSignalRateRtn_mcps = PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800aac0:	63bb      	str	r3, [r7, #56]	; 0x38

  /* uint32 * FixPoint1616 = FixPoint1616 */
  SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800aac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aac6:	fb02 f303 	mul.w	r3, r2, r3
 800aaca:	637b      	str	r3, [r7, #52]	; 0x34

  /* FixPoint1616 >> 8 = FixPoint2408 */
  SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800aacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aace:	3380      	adds	r3, #128	; 0x80
 800aad0:	0a1b      	lsrs	r3, r3, #8
 800aad2:	637b      	str	r3, [r7, #52]	; 0x34
  SignalAt0mm *= dmaxCalRange_mm;
 800aad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aad8:	fb02 f303 	mul.w	r3, r2, r3
 800aadc:	637b      	str	r3, [r7, #52]	; 0x34

  minSignalNeeded_p1 = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	667b      	str	r3, [r7, #100]	; 0x64
  if (totalCorrSignalRate_mcps > 0) {
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d01a      	beq.n	800ab1e <VL53L0X_calc_dmax+0x96>

    /* Shift by 10 bits to increase resolution prior to the
     * division */
    signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	029b      	lsls	r3, r3, #10
 800aaec:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add rounding value prior to division */
    minSignalNeeded_p1 = signalRateTemp_mcps + (totalCorrSignalRate_mcps / 2);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	085b      	lsrs	r3, r3, #1
 800aaf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf4:	4413      	add	r3, r2
 800aaf6:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint0626/FixPoint1616 = FixPoint2210 */
    minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800aaf8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab00:	667b      	str	r3, [r7, #100]	; 0x64

    /* Apply a factored version of the speed of light.
     Correction to be applied at the end */
    minSignalNeeded_p1 *= 3;
 800ab02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab04:	4613      	mov	r3, r2
 800ab06:	005b      	lsls	r3, r3, #1
 800ab08:	4413      	add	r3, r2
 800ab0a:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint2210 * FixPoint2210 = FixPoint1220 */
    minSignalNeeded_p1 *= minSignalNeeded_p1;
 800ab0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab0e:	fb03 f303 	mul.w	r3, r3, r3
 800ab12:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint1220 >> 16 = FixPoint2804 */
    minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800ab14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab16:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ab1a:	0c1b      	lsrs	r3, r3, #16
 800ab1c:	667b      	str	r3, [r7, #100]	; 0x64
  }

  minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ab22:	fb02 f303 	mul.w	r3, r2, r3
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* FixPoint1616 >> 16 =	 uint32 */
  minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ab2e:	0c1b      	lsrs	r3, r3, #16
 800ab30:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* uint32 * uint32	=  uint32 */
  minSignalNeeded_p2 *= minSignalNeeded_p2;
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	fb03 f303 	mul.w	r3, r3, r3
 800ab38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Check sigmaEstimateP2
   * If this value is too high there is not enough signal rate
   * to calculate dmax value so set a suitable value to ensure
   * a very small dmax.
   */
  sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ab3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ab40:	0c1b      	lsrs	r3, r3, #16
 800ab42:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp =
      (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns / 2) / cAmbEffWidthSigmaEst_ns;
 800ab44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab46:	085a      	lsrs	r2, r3, #1
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	441a      	add	r2, r3
  sigmaEstP2Tmp =
 800ab4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab52:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab58:	fb02 f303 	mul.w	r3, r2, r3
 800ab5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (sigmaEstP2Tmp > 0xffff) {
 800ab5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab64:	d302      	bcc.n	800ab6c <VL53L0X_calc_dmax+0xe4>
    minSignalNeeded_p3 = 0xfff00000;
 800ab66:	4b54      	ldr	r3, [pc, #336]	; (800acb8 <VL53L0X_calc_dmax+0x230>)
 800ab68:	663b      	str	r3, [r7, #96]	; 0x60
 800ab6a:	e015      	b.n	800ab98 <VL53L0X_calc_dmax+0x110>

    /* DMAX uses a different ambient width from sigma, so apply
     * correction.
     * Perform division before multiplication to prevent overflow.
     */
    sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns / 2) /
 800ab6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab6e:	085a      	lsrs	r2, r3, #1
 800ab70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab72:	441a      	add	r2, r3
 800ab74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7a:	677b      	str	r3, [r7, #116]	; 0x74
                      cAmbEffWidthSigmaEst_ns;
    sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ab7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab80:	fb02 f303 	mul.w	r3, r2, r3
 800ab84:	677b      	str	r3, [r7, #116]	; 0x74

    /* FixPoint1616 >> 16 = uint32 */
    minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ab86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ab8c:	0c1b      	lsrs	r3, r3, #16
 800ab8e:	663b      	str	r3, [r7, #96]	; 0x60

    minSignalNeeded_p3 *= minSignalNeeded_p3;
 800ab90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab92:	fb03 f303 	mul.w	r3, r3, r3
 800ab96:	663b      	str	r3, [r7, #96]	; 0x60
  }

  /* FixPoint1814 / uint32 = FixPoint1814 */
  sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800ab98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab9a:	039b      	lsls	r3, r3, #14
 800ab9c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aba0:	4a46      	ldr	r2, [pc, #280]	; (800acbc <VL53L0X_calc_dmax+0x234>)
 800aba2:	fba2 2303 	umull	r2, r3, r2, r3
 800aba6:	099b      	lsrs	r3, r3, #6
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
  sigmaLimitTmp *= sigmaLimitTmp;
 800abaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abac:	fb03 f303 	mul.w	r3, r3, r3
 800abb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
  sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800abb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb4:	fb03 f303 	mul.w	r3, r3, r3
 800abb8:	623b      	str	r3, [r7, #32]

  /* FixPoint3232 >> 4 = FixPoint0428 */
  sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	3308      	adds	r3, #8
 800abbe:	091b      	lsrs	r3, r3, #4
 800abc0:	623b      	str	r3, [r7, #32]

  /* FixPoint0428 - FixPoint0428	= FixPoint0428 */
  sigmaLimitTmp -= sigmaEstSqTmp;
 800abc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	1ad3      	subs	r3, r2, r3
 800abc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* uint32_t * FixPoint0428 = FixPoint0428 */
  minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800abca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abcc:	4613      	mov	r3, r2
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	4413      	add	r3, r2
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	61fb      	str	r3, [r7, #28]

  /* FixPoint0428 >> 14 = FixPoint1814 */
  minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800abdc:	0b9b      	lsrs	r3, r3, #14
 800abde:	61fb      	str	r3, [r7, #28]

  /* uint32 + uint32 = uint32 */
  minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800abe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abe4:	4413      	add	r3, r2
 800abe6:	61bb      	str	r3, [r7, #24]

  /* uint32 / uint32 = uint32 */
  minSignalNeeded += (peakVcselDuration_us / 2);
 800abe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abea:	085b      	lsrs	r3, r3, #1
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	4413      	add	r3, r2
 800abf0:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= peakVcselDuration_us;
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfa:	61bb      	str	r3, [r7, #24]

  /* uint32 << 14 = FixPoint1814 */
  minSignalNeeded <<= 14;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	039b      	lsls	r3, r3, #14
 800ac00:	61bb      	str	r3, [r7, #24]

  /* FixPoint1814 / FixPoint1814 = uint32 */
  minSignalNeeded += (minSignalNeeded_p4 / 2);
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	085b      	lsrs	r3, r3, #1
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	4413      	add	r3, r2
 800ac0a:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= minSignalNeeded_p4;
 800ac0c:	69ba      	ldr	r2, [r7, #24]
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac14:	61bb      	str	r3, [r7, #24]

  /* FixPoint3200 * FixPoint2804 := FixPoint2804*/
  minSignalNeeded *= minSignalNeeded_p1;
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ac1a:	fb02 f303 	mul.w	r3, r2, r3
 800ac1e:	61bb      	str	r3, [r7, #24]
   * and 10E-22 on the denominator.
   * We do this because 32bit fix point calculation can't
   * handle the larger and smaller elements of this equation,
   * i.e. speed of light and pulse widths.
   */
  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ac26:	4a25      	ldr	r2, [pc, #148]	; (800acbc <VL53L0X_calc_dmax+0x234>)
 800ac28:	fba2 2303 	umull	r2, r3, r2, r3
 800ac2c:	099b      	lsrs	r3, r3, #6
 800ac2e:	61bb      	str	r3, [r7, #24]
  minSignalNeeded <<= 4;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	61bb      	str	r3, [r7, #24]

  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ac3c:	4a1f      	ldr	r2, [pc, #124]	; (800acbc <VL53L0X_calc_dmax+0x234>)
 800ac3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac42:	099b      	lsrs	r3, r3, #6
 800ac44:	61bb      	str	r3, [r7, #24]

  /* FixPoint1616 >> 8 = FixPoint2408 */
  signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800ac46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac48:	3380      	adds	r3, #128	; 0x80
 800ac4a:	0a1b      	lsrs	r3, r3, #8
 800ac4c:	617b      	str	r3, [r7, #20]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (signalLimitTmp != 0)
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d008      	beq.n	800ac66 <VL53L0X_calc_dmax+0x1de>
    dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2)) / signalLimitTmp;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	085a      	lsrs	r2, r3, #1
 800ac58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5a:	441a      	add	r2, r3
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac62:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac64:	e001      	b.n	800ac6a <VL53L0X_calc_dmax+0x1e2>
  else
    dmaxDarkTmp = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	65bb      	str	r3, [r7, #88]	; 0x58

  dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ac6a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ac6c:	f7fe fc40 	bl	80094f0 <VL53L0X_isqrt>
 800ac70:	6138      	str	r0, [r7, #16]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (minSignalNeeded != 0)
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d008      	beq.n	800ac8a <VL53L0X_calc_dmax+0x202>
    dmaxAmbient = (SignalAt0mm + minSignalNeeded / 2) / minSignalNeeded;
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	085a      	lsrs	r2, r3, #1
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7e:	441a      	add	r2, r3
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac86:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac88:	e001      	b.n	800ac8e <VL53L0X_calc_dmax+0x206>
  else
    dmaxAmbient = 0;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	65fb      	str	r3, [r7, #92]	; 0x5c

  dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ac8e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ac90:	f7fe fc2e 	bl	80094f0 <VL53L0X_isqrt>
 800ac94:	65f8      	str	r0, [r7, #92]	; 0x5c

  *pdmax_mm = dmaxDark;
 800ac96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	601a      	str	r2, [r3, #0]
  if (dmaxDark > dmaxAmbient)
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d902      	bls.n	800acaa <VL53L0X_calc_dmax+0x222>
    *pdmax_mm = dmaxAmbient;
 800aca4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aca6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aca8:	601a      	str	r2, [r3, #0]

  LOG_FUNCTION_END(Status);

  return Status;
 800acaa:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3768      	adds	r7, #104	; 0x68
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	fff00000 	.word	0xfff00000
 800acbc:	10624dd3 	.word	0x10624dd3

0800acc0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *pSigmaEstimate, uint32_t *pDmax_mm) {
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b0b2      	sub	sp, #200	; 0xc8
 800acc4:	af04      	add	r7, sp, #16
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	603b      	str	r3, [r7, #0]
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cPulseEffectiveWidth_centi_ns = 800;
 800acce:	f44f 7348 	mov.w	r3, #800	; 0x320
 800acd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800acd6:	f44f 7316 	mov.w	r3, #600	; 0x258
 800acda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800acde:	2342      	movs	r3, #66	; 0x42
 800ace0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint32_t cVcselPulseWidth_ps = 4700;      /* pico secs */
 800ace4:	f241 235c 	movw	r3, #4700	; 0x125c
 800ace8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const FixPoint1616_t cSigmaEstMax = 0x028F87AE;
 800acec:	4b6b      	ldr	r3, [pc, #428]	; (800ae9c <VL53L0X_calc_sigma_estimate+0x1dc>)
 800acee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const FixPoint1616_t cSigmaEstRtnMax = 0xF000;
 800acf2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800acf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const FixPoint1616_t cAmbToSignalRatioMax =
 800acfa:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800acfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ad02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad06:	67fb      	str	r3, [r7, #124]	; 0x7c
      0xF0000000 / cAmbientEffectiveWidth_centi_ns;
  /* Time Of Flight per mm (6.6 pico secs) */
  const FixPoint1616_t cTOF_per_mm_ps = 0x0006999A;
 800ad08:	4b65      	ldr	r3, [pc, #404]	; (800aea0 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800ad0a:	67bb      	str	r3, [r7, #120]	; 0x78
  const uint32_t c16BitRoundingParam = 0x00008000;
 800ad0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad10:	677b      	str	r3, [r7, #116]	; 0x74
  const FixPoint1616_t cMaxXTalk_kcps = 0x00320000;
 800ad12:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800ad16:	673b      	str	r3, [r7, #112]	; 0x70
  const uint32_t cPllPeriod_ps = 1655;
 800ad18:	f240 6377 	movw	r3, #1655	; 0x677
 800ad1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  FixPoint1616_t xTalkCorrection;
  FixPoint1616_t ambientRate_kcps;
  FixPoint1616_t peakSignalRate_kcps;
  FixPoint1616_t xTalkCompRate_mcps;
  uint32_t xTalkCompRate_kcps;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
   *	- SigmaEstEffAmbWidth
   */

  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6a1b      	ldr	r3, [r3, #32]
 800ad28:	617b      	str	r3, [r7, #20]
   * We work in kcps rather than mcps as this helps keep within the
   * confines of the 32 Fix1616 type.
   */

  ambientRate_kcps =
      (pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad32:	fb02 f303 	mul.w	r3, r2, r3
  ambientRate_kcps =
 800ad36:	0c1b      	lsrs	r3, r3, #16
 800ad38:	66bb      	str	r3, [r7, #104]	; 0x68

  correctedSignalRate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	667b      	str	r3, [r7, #100]	; 0x64

  Status = VL53L0X_get_total_signal_rate(Dev, pRangingMeasurementData,
 800ad40:	f107 0310 	add.w	r3, r7, #16
 800ad44:	461a      	mov	r2, r3
 800ad46:	68b9      	ldr	r1, [r7, #8]
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f7ff fe78 	bl	800aa3e <VL53L0X_get_total_signal_rate>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                                         &totalSignalRate_mcps);
  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800ad54:	f107 0314 	add.w	r3, r7, #20
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7ff fe3f 	bl	800a9e0 <VL53L0X_get_total_xtalk_rate>
 800ad62:	4603      	mov	r3, r0
 800ad64:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                                        &xTalkCompRate_mcps);

  /* Signal rate measurement provided by device is the
   * peak signal rate, not average.
   */
  peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad6e:	fb02 f303 	mul.w	r3, r2, r3
 800ad72:	663b      	str	r3, [r7, #96]	; 0x60
  peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800ad74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad76:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad7a:	0c1b      	lsrs	r3, r3, #16
 800ad7c:	663b      	str	r3, [r7, #96]	; 0x60

  xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad84:	fb02 f303 	mul.w	r3, r2, r3
 800ad88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800ad8c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ad90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d902      	bls.n	800ad9c <VL53L0X_calc_sigma_estimate+0xdc>
    xTalkCompRate_kcps = cMaxXTalk_kcps;
 800ad96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  if (Status == VL53L0X_ERROR_NONE) {
 800ad9c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d164      	bne.n	800ae6e <VL53L0X_calc_sigma_estimate+0x1ae>

    /* Calculate final range macro periods */
    finalRangeTimeoutMicroSecs =
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800adaa:	65fb      	str	r3, [r7, #92]	; 0x5c
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs);

    finalRangeVcselPCLKS =
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800adb2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod);

    finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800adb6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800adba:	461a      	mov	r2, r3
 800adbc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f7ff f938 	bl	800a034 <VL53L0X_calc_timeout_mclks>
 800adc4:	6578      	str	r0, [r7, #84]	; 0x54
        Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

    /* Calculate pre-range macro periods */
    preRangeTimeoutMicroSecs =
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800adcc:	653b      	str	r3, [r7, #80]	; 0x50
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs);

    preRangeVcselPCLKS =
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800add4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod);

    preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800add8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800addc:	461a      	mov	r2, r3
 800adde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f7ff f927 	bl	800a034 <VL53L0X_calc_timeout_mclks>
 800ade6:	64b8      	str	r0, [r7, #72]	; 0x48
        Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

    vcselWidth = 3;
 800ade8:	2303      	movs	r3, #3
 800adea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (finalRangeVcselPCLKS == 8)
 800adee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800adf2:	2b08      	cmp	r3, #8
 800adf4:	d102      	bne.n	800adfc <VL53L0X_calc_sigma_estimate+0x13c>
      vcselWidth = 2;
 800adf6:	2302      	movs	r3, #2
 800adf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    peakVcselDuration_us =
        vcselWidth * 2048 * (preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800adfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae00:	4413      	add	r3, r2
 800ae02:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800ae06:	fb02 f303 	mul.w	r3, r2, r3
    peakVcselDuration_us =
 800ae0a:	02db      	lsls	r3, r3, #11
 800ae0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800ae10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ae18:	4a22      	ldr	r2, [pc, #136]	; (800aea4 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800ae1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1e:	099b      	lsrs	r3, r3, #6
 800ae20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us *= cPllPeriod_ps;
 800ae24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ae2a:	fb02 f303 	mul.w	r3, r2, r3
 800ae2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 800ae32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae36:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ae3a:	4a1a      	ldr	r2, [pc, #104]	; (800aea4 <VL53L0X_calc_sigma_estimate+0x1e4>)
 800ae3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae40:	099b      	lsrs	r3, r3, #6
 800ae42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Fix1616 >> 8 = Fix2408 */
    totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	3380      	adds	r3, #128	; 0x80
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	613b      	str	r3, [r7, #16]

    /* Fix2408 * uint32 = Fix2408 */
    vcselTotalEventsRtn = totalSignalRate_mcps * peakVcselDuration_us;
 800ae4e:	693a      	ldr	r2, [r7, #16]
 800ae50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae54:	fb02 f303 	mul.w	r3, r2, r3
 800ae58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 >> 8 = uint32 */
    vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800ae5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae60:	3380      	adds	r3, #128	; 0x80
 800ae62:	0a1b      	lsrs	r3, r3, #8
 800ae64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 << 8 = Fix1616 = */
    totalSignalRate_mcps <<= 8;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	021b      	lsls	r3, r3, #8
 800ae6c:	613b      	str	r3, [r7, #16]
  }

  if (Status != VL53L0X_ERROR_NONE) {
 800ae6e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d002      	beq.n	800ae7c <VL53L0X_calc_sigma_estimate+0x1bc>
    LOG_FUNCTION_END(Status);
    return Status;
 800ae76:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800ae7a:	e127      	b.n	800b0cc <VL53L0X_calc_sigma_estimate+0x40c>
  }

  if (peakSignalRate_kcps == 0) {
 800ae7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d112      	bne.n	800aea8 <VL53L0X_calc_sigma_estimate+0x1e8>
    *pSigmaEstimate = cSigmaEstMax;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ae88:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ae90:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    *pDmax_mm = 0;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	2200      	movs	r2, #0
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	e115      	b.n	800b0c8 <VL53L0X_calc_sigma_estimate+0x408>
 800ae9c:	028f87ae 	.word	0x028f87ae
 800aea0:	0006999a 	.word	0x0006999a
 800aea4:	10624dd3 	.word	0x10624dd3
  } else {
    if (vcselTotalEventsRtn < 1)
 800aea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <VL53L0X_calc_sigma_estimate+0x1f6>
      vcselTotalEventsRtn = 1;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
     * deltaT_ps represents the time of flight in pico secs for the
     * current range measurement, using the "TOF per mm" constant
     * (in ps).
     */

    sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800aeb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800aeba:	647b      	str	r3, [r7, #68]	; 0x44

    /* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
    sigmaEstimateP2 = (ambientRate_kcps << 16) / peakSignalRate_kcps;
 800aebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aebe:	041a      	lsls	r2, r3, #16
 800aec0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800aeca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d902      	bls.n	800aeda <VL53L0X_calc_sigma_estimate+0x21a>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstimateP2 = cAmbToSignalRatioMax;
 800aed4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    }
    sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800aeda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aede:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800aee2:	fb02 f303 	mul.w	r3, r2, r3
 800aee6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800aeea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aeee:	4613      	mov	r3, r2
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fe fafa 	bl	80094f0 <VL53L0X_isqrt>
 800aefc:	4603      	mov	r3, r0
 800aefe:	005b      	lsls	r3, r3, #1
 800af00:	643b      	str	r3, [r7, #64]	; 0x40

    /* uint32 * FixPoint1616 = FixPoint1616 */
    deltaT_ps = pRangingMeasurementData->RangeMilliMeter * cTOF_per_mm_ps;
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	891b      	ldrh	r3, [r3, #8]
 800af06:	461a      	mov	r2, r3
 800af08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af0a:	fb02 f303 	mul.w	r3, r2, r3
 800af0e:	63fb      	str	r3, [r7, #60]	; 0x3c
     * Divide result by 1000 to convert to mcps.
     * 500 is added to ensure rounding when integer division
     * truncates.
     */
    diff1_mcps =
        (((peakSignalRate_kcps << 16) - xTalkCompRate_kcps) + 500) / 1000;
 800af10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af12:	041a      	lsls	r2, r3, #16
 800af14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff1_mcps =
 800af1e:	4a6d      	ldr	r2, [pc, #436]	; (800b0d4 <VL53L0X_calc_sigma_estimate+0x414>)
 800af20:	fba2 2303 	umull	r2, r3, r2, r3
 800af24:	099b      	lsrs	r3, r3, #6
 800af26:	63bb      	str	r3, [r7, #56]	; 0x38

    /* vcselRate + xtalkCompRate */
    diff2_mcps =
        (((peakSignalRate_kcps << 16) + xTalkCompRate_kcps) + 500) / 1000;
 800af28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af2a:	041a      	lsls	r2, r3, #16
 800af2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af30:	4413      	add	r3, r2
 800af32:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff2_mcps =
 800af36:	4a67      	ldr	r2, [pc, #412]	; (800b0d4 <VL53L0X_calc_sigma_estimate+0x414>)
 800af38:	fba2 2303 	umull	r2, r3, r2, r3
 800af3c:	099b      	lsrs	r3, r3, #6
 800af3e:	637b      	str	r3, [r7, #52]	; 0x34

    /* Shift by 8 bits to increase resolution prior to the
     * division */
    diff1_mcps <<= 8;
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	021b      	lsls	r3, r3, #8
 800af44:	63bb      	str	r3, [r7, #56]	; 0x38

    /* FixPoint0824/FixPoint1616 = FixPoint2408 */
    xTalkCorrection = (FixPoint1616_t)abs((long long)(diff1_mcps / diff2_mcps));
 800af46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	bfb8      	it	lt
 800af52:	425b      	neglt	r3, r3
 800af54:	633b      	str	r3, [r7, #48]	; 0x30

    /* FixPoint2408 << 8 = FixPoint1616 */
    xTalkCorrection <<= 8;
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	021b      	lsls	r3, r3, #8
 800af5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* FixPoint1616/uint32 = FixPoint1616 */
    pwMult = deltaT_ps / cVcselPulseWidth_ps; /* smaller than 1.0f */
 800af5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af62:	fbb2 f3f3 	udiv	r3, r2, r3
 800af66:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*
     * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
     * values are small enough such that32 bits will not be
     * exceeded.
     */
    pwMult *= ((1 << 16) - xTalkCorrection);
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800af6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af70:	fb02 f303 	mul.w	r3, r2, r3
 800af74:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* (FixPoint3232 >> 16) = FixPoint1616 */
    pwMult = (pwMult + c16BitRoundingParam) >> 16;
 800af76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af7a:	4413      	add	r3, r2
 800af7c:	0c1b      	lsrs	r3, r3, #16
 800af7e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint1616 + FixPoint1616 = FixPoint1616 */
    pwMult += (1 << 16);
 800af80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af82:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800af86:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*
     * At this point the value will be 1.xx, therefore if we square
     * the value this will exceed 32 bits. To address this perform
     * a single shift to the right before the multiplication.
     */
    pwMult >>= 1;
 800af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8a:	085b      	lsrs	r3, r3, #1
 800af8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* FixPoint1715 * FixPoint1715 = FixPoint3430 */
    pwMult = pwMult * pwMult;
 800af8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af90:	fb03 f303 	mul.w	r3, r3, r3
 800af94:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* (FixPoint3430 >> 14) = Fix1616 */
    pwMult >>= 14;
 800af96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af98:	0b9b      	lsrs	r3, r3, #14
 800af9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint1616 * uint32 = FixPoint1616 */
    sqr1 = pwMult * sigmaEstimateP1;
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afa0:	fb02 f303 	mul.w	r3, r2, r3
 800afa4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr1 = (sqr1 + 0x8000) >> 16;
 800afa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afac:	0c1b      	lsrs	r3, r3, #16
 800afae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr1 *= sqr1;
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	fb03 f303 	mul.w	r3, r3, r3
 800afb6:	62bb      	str	r3, [r7, #40]	; 0x28

    sqr2 = sigmaEstimateP2;
 800afb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800afbc:	627b      	str	r3, [r7, #36]	; 0x24

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr2 = (sqr2 + 0x8000) >> 16;
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800afc4:	0c1b      	lsrs	r3, r3, #16
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr2 *= sqr2;
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	fb03 f303 	mul.w	r3, r3, r3
 800afce:	627b      	str	r3, [r7, #36]	; 0x24

    /* FixPoint64000 + FixPoint6400 = FixPoint6400 */
    sqrSum = sqr1 + sqr2;
 800afd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	4413      	add	r3, r2
 800afd6:	623b      	str	r3, [r7, #32]

    /* SQRT(FixPoin6400) = FixPoint3200 */
    sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800afd8:	6a38      	ldr	r0, [r7, #32]
 800afda:	f7fe fa89 	bl	80094f0 <VL53L0X_isqrt>
 800afde:	61f8      	str	r0, [r7, #28]

    /* (FixPoint3200 << 16) = FixPoint1616 */
    sqrtResult_centi_ns <<= 16;
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	041b      	lsls	r3, r3, #16
 800afe4:	61fb      	str	r3, [r7, #28]
    /*
     * Note that the Speed Of Light is expressed in um per 1E-10
     * seconds (2997) Therefore to get mm/ns we have to divide by
     * 10000
     */
    sigmaEstRtn = (((sqrtResult_centi_ns + 50) / 100) / sigmaEstimateP3);
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	3332      	adds	r3, #50	; 0x32
 800afea:	4a3b      	ldr	r2, [pc, #236]	; (800b0d8 <VL53L0X_calc_sigma_estimate+0x418>)
 800afec:	fba2 2303 	umull	r2, r3, r2, r3
 800aff0:	095a      	lsrs	r2, r3, #5
 800aff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800affc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b000:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b004:	fb02 f303 	mul.w	r3, r2, r3
 800b008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Add 5000 before dividing by 10000 to ensure rounding. */
    sigmaEstRtn += 5000;
 800b00c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b010:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800b014:	3308      	adds	r3, #8
 800b016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn /= 10000;
 800b01a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b01e:	4a2f      	ldr	r2, [pc, #188]	; (800b0dc <VL53L0X_calc_sigma_estimate+0x41c>)
 800b020:	fba2 2303 	umull	r2, r3, r2, r3
 800b024:	0b5b      	lsrs	r3, r3, #13
 800b026:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b02a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b02e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b032:	429a      	cmp	r2, r3
 800b034:	d903      	bls.n	800b03e <VL53L0X_calc_sigma_estimate+0x37e>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstRtn = cSigmaEstRtnMax;
 800b036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b03a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    }

    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b03e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b042:	fb03 f303 	mul.w	r3, r3, r3
 800b046:	62bb      	str	r3, [r7, #40]	; 0x28
    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr2 = cSigmaEstRef * cSigmaEstRef;
 800b048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b04c:	fb03 f303 	mul.w	r3, r3, r3
 800b050:	627b      	str	r3, [r7, #36]	; 0x24

    /* sqrt(FixPoint3232) = FixPoint1616 */
    sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	4413      	add	r3, r2
 800b058:	4618      	mov	r0, r3
 800b05a:	f7fe fa49 	bl	80094f0 <VL53L0X_isqrt>
 800b05e:	61b8      	str	r0, [r7, #24]
     * Note that the Shift by 4 bits increases resolution prior to
     * the sqrt, therefore the result must be shifted by 2 bits to
     * the right to revert back to the FixPoint1616 format.
     */

    sigmaEstimate = 1000 * sqrtResult;
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b066:	fb02 f303 	mul.w	r3, r2, r3
 800b06a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b06e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <VL53L0X_calc_sigma_estimate+0x3c8>
 800b074:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <VL53L0X_calc_sigma_estimate+0x3c8>
 800b07c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b084:	429a      	cmp	r2, r3
 800b086:	d903      	bls.n	800b090 <VL53L0X_calc_sigma_estimate+0x3d0>
        (sigmaEstimate > cSigmaEstMax)) {
      sigmaEstimate = cSigmaEstMax;
 800b088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b08c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    }

    *pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b096:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Status = VL53L0X_calc_dmax(
 800b0a2:	6939      	ldr	r1, [r7, #16]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff fce3 	bl	800aa88 <VL53L0X_calc_dmax>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        Dev, totalSignalRate_mcps, correctedSignalRate_mcps, pwMult,
        sigmaEstimateP1, sigmaEstimateP2, peakVcselDuration_us, pDmax_mm);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800b0c8:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	37b8      	adds	r7, #184	; 0xb8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	10624dd3 	.word	0x10624dd3
 800b0d8:	51eb851f 	.word	0x51eb851f
 800b0dc:	d1b71759 	.word	0xd1b71759

0800b0e0 <VL53L0X_get_pal_range_status>:

VL53L0X_Error VL53L0X_get_pal_range_status(
    VL53L0X_DEV Dev, uint8_t DeviceRangeStatus, FixPoint1616_t SignalRate,
    uint16_t EffectiveSpadRtnCount,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    uint8_t *pPalRangeStatus) {
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b090      	sub	sp, #64	; 0x40
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	60f8      	str	r0, [r7, #12]
 800b0e8:	607a      	str	r2, [r7, #4]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	72fb      	strb	r3, [r7, #11]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	813b      	strh	r3, [r7, #8]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t NoneFlag;
  uint8_t SigmaLimitflag = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint8_t SignalRefClipflag = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  uint8_t RangeIgnoreThresholdflag = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t SigmaLimitCheckEnable = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b112:	2300      	movs	r3, #0
 800b114:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t SignalRefClipLimitCheckEnable = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b11e:	2300      	movs	r3, #0
 800b120:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  FixPoint1616_t SigmaEstimate;
  FixPoint1616_t SigmaLimitValue;
  FixPoint1616_t SignalRefClipValue;
  FixPoint1616_t RangeIgnoreThresholdValue;
  FixPoint1616_t SignalRatePerSpad;
  uint8_t DeviceRangeStatusInternal = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint16_t tmpWord = 0;
 800b12a:	2300      	movs	r3, #0
 800b12c:	82fb      	strh	r3, [r7, #22]
  uint8_t Temp8;
  uint32_t Dmax_mm = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	613b      	str	r3, [r7, #16]
   * the value 11 in the DeviceRangeStatus.
   * In addition, the SigmaEstimator is not included in the VL53L0X
   * DeviceRangeStatus, this will be added in the PalRangeStatus.
   */

  DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b132:	7afb      	ldrb	r3, [r7, #11]
 800b134:	10db      	asrs	r3, r3, #3
 800b136:	b2db      	uxtb	r3, r3
 800b138:	f003 030f 	and.w	r3, r3, #15
 800b13c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  if (DeviceRangeStatusInternal == 0 || DeviceRangeStatusInternal == 5 ||
 800b140:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b144:	2b00      	cmp	r3, #0
 800b146:	d017      	beq.n	800b178 <VL53L0X_get_pal_range_status+0x98>
 800b148:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b14c:	2b05      	cmp	r3, #5
 800b14e:	d013      	beq.n	800b178 <VL53L0X_get_pal_range_status+0x98>
 800b150:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b154:	2b07      	cmp	r3, #7
 800b156:	d00f      	beq.n	800b178 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 7 || DeviceRangeStatusInternal == 12 ||
 800b158:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b15c:	2b0c      	cmp	r3, #12
 800b15e:	d00b      	beq.n	800b178 <VL53L0X_get_pal_range_status+0x98>
 800b160:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b164:	2b0d      	cmp	r3, #13
 800b166:	d007      	beq.n	800b178 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 13 || DeviceRangeStatusInternal == 14 ||
 800b168:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b16c:	2b0e      	cmp	r3, #14
 800b16e:	d003      	beq.n	800b178 <VL53L0X_get_pal_range_status+0x98>
 800b170:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b174:	2b0f      	cmp	r3, #15
 800b176:	d103      	bne.n	800b180 <VL53L0X_get_pal_range_status+0xa0>
      DeviceRangeStatusInternal == 15) {
    NoneFlag = 1;
 800b178:	2301      	movs	r3, #1
 800b17a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b17e:	e002      	b.n	800b186 <VL53L0X_get_pal_range_status+0xa6>
  } else {
    NoneFlag = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  }

  /* LastSignalRefMcps */
  if (Status == VL53L0X_ERROR_NONE)
 800b186:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d107      	bne.n	800b19e <VL53L0X_get_pal_range_status+0xbe>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b18e:	2201      	movs	r2, #1
 800b190:	21ff      	movs	r1, #255	; 0xff
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f000 fa1c 	bl	800b5d0 <VL53L0X_WrByte>
 800b198:	4603      	mov	r3, r0
 800b19a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status == VL53L0X_ERROR_NONE)
 800b19e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d109      	bne.n	800b1ba <VL53L0X_get_pal_range_status+0xda>
    Status =
        VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF, &tmpWord);
 800b1a6:	f107 0316 	add.w	r3, r7, #22
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	21b6      	movs	r1, #182	; 0xb6
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f000 faba 	bl	800b728 <VL53L0X_RdWord>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b1ba:	8afb      	ldrh	r3, [r7, #22]
 800b1bc:	025b      	lsls	r3, r3, #9
 800b1be:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (Status == VL53L0X_ERROR_NONE)
 800b1c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d107      	bne.n	800b1d8 <VL53L0X_get_pal_range_status+0xf8>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	21ff      	movs	r1, #255	; 0xff
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f000 f9ff 	bl	800b5d0 <VL53L0X_WrByte>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1dc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

  /*
   * Check if Sigma limit is enabled, if yes then do comparison with limit
   * value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 800b1e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d109      	bne.n	800b1fc <VL53L0X_get_pal_range_status+0x11c>
    Status = VL53L0X_GetLimitCheckEnable(
 800b1e8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f7fc fc95 	bl	8007b20 <VL53L0X_GetLimitCheckEnable>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitCheckEnable);

  if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b1fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b200:	2b00      	cmp	r3, #0
 800b202:	d02e      	beq.n	800b262 <VL53L0X_get_pal_range_status+0x182>
 800b204:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d12a      	bne.n	800b262 <VL53L0X_get_pal_range_status+0x182>
    /*
     * compute the Sigma and check with limit
     */
    Status = VL53L0X_calc_sigma_estimate(Dev, pRangingMeasurementData,
 800b20c:	f107 0310 	add.w	r3, r7, #16
 800b210:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b214:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f7ff fd52 	bl	800acc0 <VL53L0X_calc_sigma_estimate>
 800b21c:	4603      	mov	r3, r0
 800b21e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &SigmaEstimate, &Dmax_mm);
    if (Status == VL53L0X_ERROR_NONE)
 800b222:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b226:	2b00      	cmp	r3, #0
 800b228:	d103      	bne.n	800b232 <VL53L0X_get_pal_range_status+0x152>
      pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b230:	815a      	strh	r2, [r3, #10]

    if (Status == VL53L0X_ERROR_NONE) {
 800b232:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b236:	2b00      	cmp	r3, #0
 800b238:	d113      	bne.n	800b262 <VL53L0X_get_pal_range_status+0x182>
      Status = VL53L0X_GetLimitCheckValue(
 800b23a:	f107 0320 	add.w	r3, r7, #32
 800b23e:	461a      	mov	r2, r3
 800b240:	2100      	movs	r1, #0
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7fc fcf2 	bl	8007c2c <VL53L0X_GetLimitCheckValue>
 800b248:	4603      	mov	r3, r0
 800b24a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitValue);

      if ((SigmaLimitValue > 0) && (SigmaEstimate > SigmaLimitValue))
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d006      	beq.n	800b262 <VL53L0X_get_pal_range_status+0x182>
 800b254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d902      	bls.n	800b262 <VL53L0X_get_pal_range_status+0x182>
        /* Limit Fail */
        SigmaLimitflag = 1;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  /*
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 800b262:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b266:	2b00      	cmp	r3, #0
 800b268:	d109      	bne.n	800b27e <VL53L0X_get_pal_range_status+0x19e>
    Status =
        VL53L0X_GetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
 800b26a:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b26e:	461a      	mov	r2, r3
 800b270:	2102      	movs	r1, #2
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7fc fc54 	bl	8007b20 <VL53L0X_GetLimitCheckEnable>
 800b278:	4603      	mov	r3, r0
 800b27a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                    &SignalRefClipLimitCheckEnable);

  if ((SignalRefClipLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b27e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b282:	2b00      	cmp	r3, #0
 800b284:	d017      	beq.n	800b2b6 <VL53L0X_get_pal_range_status+0x1d6>
 800b286:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d113      	bne.n	800b2b6 <VL53L0X_get_pal_range_status+0x1d6>

    Status = VL53L0X_GetLimitCheckValue(
 800b28e:	f107 031c 	add.w	r3, r7, #28
 800b292:	461a      	mov	r2, r3
 800b294:	2102      	movs	r1, #2
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f7fc fcc8 	bl	8007c2c <VL53L0X_GetLimitCheckValue>
 800b29c:	4603      	mov	r3, r0
 800b29e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, &SignalRefClipValue);

    if ((SignalRefClipValue > 0) && (LastSignalRefMcps > SignalRefClipValue)) {
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d006      	beq.n	800b2b6 <VL53L0X_get_pal_range_status+0x1d6>
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d902      	bls.n	800b2b6 <VL53L0X_get_pal_range_status+0x1d6>
      /* Limit Fail */
      SignalRefClipflag = 1;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   * EffectiveSpadRtnCount has a format 8.8
   * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
   */
  if (Status == VL53L0X_ERROR_NONE)
 800b2b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d109      	bne.n	800b2d2 <VL53L0X_get_pal_range_status+0x1f2>
    Status = VL53L0X_GetLimitCheckEnable(
 800b2be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	2103      	movs	r1, #3
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f7fc fc2a 	bl	8007b20 <VL53L0X_GetLimitCheckEnable>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdLimitCheckEnable);

  if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b2d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d023      	beq.n	800b322 <VL53L0X_get_pal_range_status+0x242>
 800b2da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d11f      	bne.n	800b322 <VL53L0X_get_pal_range_status+0x242>
      (Status == VL53L0X_ERROR_NONE)) {

    /* Compute the signal rate per spad */
    if (EffectiveSpadRtnCount == 0) {
 800b2e2:	893b      	ldrh	r3, [r7, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d102      	bne.n	800b2ee <VL53L0X_get_pal_range_status+0x20e>
      SignalRatePerSpad = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b2ec:	e005      	b.n	800b2fa <VL53L0X_get_pal_range_status+0x21a>
    } else {
      SignalRatePerSpad =
          (FixPoint1616_t)((256 * SignalRate) / EffectiveSpadRtnCount);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	021a      	lsls	r2, r3, #8
 800b2f2:	893b      	ldrh	r3, [r7, #8]
      SignalRatePerSpad =
 800b2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2f8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    Status = VL53L0X_GetLimitCheckValue(
 800b2fa:	f107 0318 	add.w	r3, r7, #24
 800b2fe:	461a      	mov	r2, r3
 800b300:	2103      	movs	r1, #3
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f7fc fc92 	bl	8007c2c <VL53L0X_GetLimitCheckValue>
 800b308:	4603      	mov	r3, r0
 800b30a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdValue);

    if ((RangeIgnoreThresholdValue > 0) &&
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d006      	beq.n	800b322 <VL53L0X_get_pal_range_status+0x242>
        (SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b314:	69bb      	ldr	r3, [r7, #24]
    if ((RangeIgnoreThresholdValue > 0) &&
 800b316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b318:	429a      	cmp	r2, r3
 800b31a:	d202      	bcs.n	800b322 <VL53L0X_get_pal_range_status+0x242>
      /* Limit Fail add 2^6 to range status */
      RangeIgnoreThresholdflag = 1;
 800b31c:	2301      	movs	r3, #1
 800b31e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800b322:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b326:	2b00      	cmp	r3, #0
 800b328:	d14a      	bne.n	800b3c0 <VL53L0X_get_pal_range_status+0x2e0>
    if (NoneFlag == 1) {
 800b32a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d103      	bne.n	800b33a <VL53L0X_get_pal_range_status+0x25a>
      *pPalRangeStatus = 255; /* NONE */
 800b332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b334:	22ff      	movs	r2, #255	; 0xff
 800b336:	701a      	strb	r2, [r3, #0]
 800b338:	e042      	b.n	800b3c0 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 1 ||
 800b33a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d007      	beq.n	800b352 <VL53L0X_get_pal_range_status+0x272>
 800b342:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b346:	2b02      	cmp	r3, #2
 800b348:	d003      	beq.n	800b352 <VL53L0X_get_pal_range_status+0x272>
               DeviceRangeStatusInternal == 2 ||
 800b34a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b34e:	2b03      	cmp	r3, #3
 800b350:	d103      	bne.n	800b35a <VL53L0X_get_pal_range_status+0x27a>
               DeviceRangeStatusInternal == 3) {
      *pPalRangeStatus = 5; /* HW fail */
 800b352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b354:	2205      	movs	r2, #5
 800b356:	701a      	strb	r2, [r3, #0]
 800b358:	e032      	b.n	800b3c0 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 6 ||
 800b35a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b35e:	2b06      	cmp	r3, #6
 800b360:	d003      	beq.n	800b36a <VL53L0X_get_pal_range_status+0x28a>
 800b362:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b366:	2b09      	cmp	r3, #9
 800b368:	d103      	bne.n	800b372 <VL53L0X_get_pal_range_status+0x292>
               DeviceRangeStatusInternal == 9) {
      *pPalRangeStatus = 4; /* Phase fail */
 800b36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36c:	2204      	movs	r2, #4
 800b36e:	701a      	strb	r2, [r3, #0]
 800b370:	e026      	b.n	800b3c0 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 8 ||
 800b372:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b376:	2b08      	cmp	r3, #8
 800b378:	d007      	beq.n	800b38a <VL53L0X_get_pal_range_status+0x2aa>
 800b37a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b37e:	2b0a      	cmp	r3, #10
 800b380:	d003      	beq.n	800b38a <VL53L0X_get_pal_range_status+0x2aa>
               DeviceRangeStatusInternal == 10 || SignalRefClipflag == 1) {
 800b382:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b386:	2b01      	cmp	r3, #1
 800b388:	d103      	bne.n	800b392 <VL53L0X_get_pal_range_status+0x2b2>
      *pPalRangeStatus = 3; /* Min range */
 800b38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b38c:	2203      	movs	r2, #3
 800b38e:	701a      	strb	r2, [r3, #0]
 800b390:	e016      	b.n	800b3c0 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 4 ||
 800b392:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b396:	2b04      	cmp	r3, #4
 800b398:	d003      	beq.n	800b3a2 <VL53L0X_get_pal_range_status+0x2c2>
 800b39a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d103      	bne.n	800b3aa <VL53L0X_get_pal_range_status+0x2ca>
               RangeIgnoreThresholdflag == 1) {
      *pPalRangeStatus = 2; /* Signal Fail */
 800b3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3a4:	2202      	movs	r2, #2
 800b3a6:	701a      	strb	r2, [r3, #0]
 800b3a8:	e00a      	b.n	800b3c0 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (SigmaLimitflag == 1) {
 800b3aa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d103      	bne.n	800b3ba <VL53L0X_get_pal_range_status+0x2da>
      *pPalRangeStatus = 1; /* Sigma	 Fail */
 800b3b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	e002      	b.n	800b3c0 <VL53L0X_get_pal_range_status+0x2e0>
    } else {
      *pPalRangeStatus = 0; /* Range Valid */
 800b3ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3bc:	2200      	movs	r2, #0
 800b3be:	701a      	strb	r2, [r3, #0]
    }
  }

  /* DMAX only relevant during range error */
  if (*pPalRangeStatus == 0)
 800b3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <VL53L0X_get_pal_range_status+0x2ee>
    pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	815a      	strh	r2, [r3, #10]

  /* fill the Limit Check Status */

  Status = VL53L0X_GetLimitCheckEnable(
 800b3ce:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	2101      	movs	r1, #1
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7fc fba2 	bl	8007b20 <VL53L0X_GetLimitCheckEnable>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
      &SignalRateFinalRangeLimitCheckEnable);

  if (Status == VL53L0X_ERROR_NONE) {
 800b3e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d14f      	bne.n	800b48a <VL53L0X_get_pal_range_status+0x3aa>
    if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b3ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <VL53L0X_get_pal_range_status+0x31a>
 800b3f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d103      	bne.n	800b402 <VL53L0X_get_pal_range_status+0x322>
      Temp8 = 1;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b400:	e002      	b.n	800b408 <VL53L0X_get_pal_range_status+0x328>
    else
      Temp8 = 0;
 800b402:	2300      	movs	r3, #0
 800b404:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    VL53L0X_SETARRAYPARAMETERFIELD(
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b40e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        Dev, LimitChecksStatus, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

    if ((DeviceRangeStatusInternal == 4) ||
 800b412:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b416:	2b04      	cmp	r3, #4
 800b418:	d003      	beq.n	800b422 <VL53L0X_get_pal_range_status+0x342>
        (SignalRateFinalRangeLimitCheckEnable == 0))
 800b41a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    if ((DeviceRangeStatusInternal == 4) ||
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d103      	bne.n	800b42a <VL53L0X_get_pal_range_status+0x34a>
      Temp8 = 1;
 800b422:	2301      	movs	r3, #1
 800b424:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b428:	e002      	b.n	800b430 <VL53L0X_get_pal_range_status+0x350>
    else
      Temp8 = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b436:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                   VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
                                   Temp8);

    if ((SignalRefClipLimitCheckEnable == 0) || (SignalRefClipflag == 1))
 800b43a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <VL53L0X_get_pal_range_status+0x36a>
 800b442:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b446:	2b01      	cmp	r3, #1
 800b448:	d103      	bne.n	800b452 <VL53L0X_get_pal_range_status+0x372>
      Temp8 = 1;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b450:	e002      	b.n	800b458 <VL53L0X_get_pal_range_status+0x378>
    else
      Temp8 = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b45e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

    if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b462:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <VL53L0X_get_pal_range_status+0x392>
 800b46a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d103      	bne.n	800b47a <VL53L0X_get_pal_range_status+0x39a>
        (RangeIgnoreThresholdflag == 1))
      Temp8 = 1;
 800b472:	2301      	movs	r3, #1
 800b474:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b478:	e002      	b.n	800b480 <VL53L0X_get_pal_range_status+0x3a0>
    else
      Temp8 = 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b486:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   Temp8);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800b48a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3740      	adds	r7, #64	; 0x40
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b496:	b580      	push	{r7, lr}
 800b498:	b088      	sub	sp, #32
 800b49a:	af02      	add	r7, sp, #8
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	330a      	adds	r3, #10
 800b4a6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b4b4:	b299      	uxth	r1, r3
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	68ba      	ldr	r2, [r7, #8]
 800b4c2:	f7f6 fd77 	bl	8001fb4 <HAL_I2C_Master_Transmit>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	613b      	str	r3, [r7, #16]
//	snprintf(txBuff, BUFLEN, "TX %d %X %d\n", status, Dev->I2cDevAddr, (Dev->I2cHandle) == &hi2c1);
//	CDC_Transmit_FS((uint8_t*) txBuff, strlen(txBuff));
//	HAL_Delay(100);
    return status;
 800b4ca:	693b      	ldr	r3, [r7, #16]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3718      	adds	r7, #24
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b088      	sub	sp, #32
 800b4d8:	af02      	add	r7, sp, #8
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	330a      	adds	r3, #10
 800b4e4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b4f2:	f043 0301 	orr.w	r3, r3, #1
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	b299      	uxth	r1, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	4613      	mov	r3, r2
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	f7f6 fe53 	bl	80021b0 <HAL_I2C_Master_Receive>
 800b50a:	4603      	mov	r3, r0
 800b50c:	613b      	str	r3, [r7, #16]
//	snprintf(txBuff, BUFLEN, "RX %d %X %d\n", status, Dev->I2cDevAddr, (Dev->I2cHandle) == &hi2c1);
//	CDC_Transmit_FS((uint8_t*) txBuff, strlen(txBuff));
//	HAL_Delay(100);
    return status;
 800b50e:	693b      	ldr	r3, [r7, #16]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	607a      	str	r2, [r7, #4]
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	460b      	mov	r3, r1
 800b526:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b528:	2300      	movs	r3, #0
 800b52a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b3f      	cmp	r3, #63	; 0x3f
 800b530:	d902      	bls.n	800b538 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b532:	f06f 0303 	mvn.w	r3, #3
 800b536:	e016      	b.n	800b566 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b538:	4a0d      	ldr	r2, [pc, #52]	; (800b570 <VL53L0X_WriteMulti+0x58>)
 800b53a:	7afb      	ldrb	r3, [r7, #11]
 800b53c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	6879      	ldr	r1, [r7, #4]
 800b542:	480c      	ldr	r0, [pc, #48]	; (800b574 <VL53L0X_WriteMulti+0x5c>)
 800b544:	f003 f921 	bl	800e78a <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	3301      	adds	r3, #1
 800b54c:	461a      	mov	r2, r3
 800b54e:	4908      	ldr	r1, [pc, #32]	; (800b570 <VL53L0X_WriteMulti+0x58>)
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f7ff ffa0 	bl	800b496 <_I2CWrite>
 800b556:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b55e:	23ec      	movs	r3, #236	; 0xec
 800b560:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20000b28 	.word	0x20000b28
 800b574:	20000b29 	.word	0x20000b29

0800b578 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b578:	b580      	push	{r7, lr}
 800b57a:	b086      	sub	sp, #24
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	607a      	str	r2, [r7, #4]
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	460b      	mov	r3, r1
 800b586:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b588:	2300      	movs	r3, #0
 800b58a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b58c:	f107 030b 	add.w	r3, r7, #11
 800b590:	2201      	movs	r2, #1
 800b592:	4619      	mov	r1, r3
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7ff ff7e 	bl	800b496 <_I2CWrite>
 800b59a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b5a2:	23ec      	movs	r3, #236	; 0xec
 800b5a4:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b5a6:	e00c      	b.n	800b5c2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	6879      	ldr	r1, [r7, #4]
 800b5ac:	68f8      	ldr	r0, [r7, #12]
 800b5ae:	f7ff ff91 	bl	800b4d4 <_I2CRead>
 800b5b2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b5ba:	23ec      	movs	r3, #236	; 0xec
 800b5bc:	75fb      	strb	r3, [r7, #23]
 800b5be:	e000      	b.n	800b5c2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b5c0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b5c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b5e4:	4a0b      	ldr	r2, [pc, #44]	; (800b614 <VL53L0X_WrByte+0x44>)
 800b5e6:	78fb      	ldrb	r3, [r7, #3]
 800b5e8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b5ea:	4a0a      	ldr	r2, [pc, #40]	; (800b614 <VL53L0X_WrByte+0x44>)
 800b5ec:	78bb      	ldrb	r3, [r7, #2]
 800b5ee:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	4908      	ldr	r1, [pc, #32]	; (800b614 <VL53L0X_WrByte+0x44>)
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff ff4e 	bl	800b496 <_I2CWrite>
 800b5fa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b602:	23ec      	movs	r3, #236	; 0xec
 800b604:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	20000b28 	.word	0x20000b28

0800b618 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
 800b624:	4613      	mov	r3, r2
 800b626:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b628:	2300      	movs	r3, #0
 800b62a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b62c:	4a0e      	ldr	r2, [pc, #56]	; (800b668 <VL53L0X_WrWord+0x50>)
 800b62e:	78fb      	ldrb	r3, [r7, #3]
 800b630:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b632:	883b      	ldrh	r3, [r7, #0]
 800b634:	0a1b      	lsrs	r3, r3, #8
 800b636:	b29b      	uxth	r3, r3
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	4b0b      	ldr	r3, [pc, #44]	; (800b668 <VL53L0X_WrWord+0x50>)
 800b63c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b63e:	883b      	ldrh	r3, [r7, #0]
 800b640:	b2da      	uxtb	r2, r3
 800b642:	4b09      	ldr	r3, [pc, #36]	; (800b668 <VL53L0X_WrWord+0x50>)
 800b644:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b646:	2203      	movs	r2, #3
 800b648:	4907      	ldr	r1, [pc, #28]	; (800b668 <VL53L0X_WrWord+0x50>)
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7ff ff23 	bl	800b496 <_I2CWrite>
 800b650:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d001      	beq.n	800b65c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b658:	23ec      	movs	r3, #236	; 0xec
 800b65a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b65c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3710      	adds	r7, #16
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	20000b28 	.word	0x20000b28

0800b66c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	4608      	mov	r0, r1
 800b676:	4611      	mov	r1, r2
 800b678:	461a      	mov	r2, r3
 800b67a:	4603      	mov	r3, r0
 800b67c:	70fb      	strb	r3, [r7, #3]
 800b67e:	460b      	mov	r3, r1
 800b680:	70bb      	strb	r3, [r7, #2]
 800b682:	4613      	mov	r3, r2
 800b684:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b68a:	f107 020e 	add.w	r2, r7, #14
 800b68e:	78fb      	ldrb	r3, [r7, #3]
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f81e 	bl	800b6d4 <VL53L0X_RdByte>
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d110      	bne.n	800b6c6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b6a4:	7bba      	ldrb	r2, [r7, #14]
 800b6a6:	78bb      	ldrb	r3, [r7, #2]
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	b2da      	uxtb	r2, r3
 800b6ac:	787b      	ldrb	r3, [r7, #1]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b6b4:	7bba      	ldrb	r2, [r7, #14]
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff ff88 	bl	800b5d0 <VL53L0X_WrByte>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
 800b6c4:	e000      	b.n	800b6c8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b6c6:	bf00      	nop
done:
    return Status;
 800b6c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	460b      	mov	r3, r1
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b6e6:	f107 030b 	add.w	r3, r7, #11
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff fed1 	bl	800b496 <_I2CWrite>
 800b6f4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b6fc:	23ec      	movs	r3, #236	; 0xec
 800b6fe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b700:	e00c      	b.n	800b71c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b702:	2201      	movs	r2, #1
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7ff fee4 	bl	800b4d4 <_I2CRead>
 800b70c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b714:	23ec      	movs	r3, #236	; 0xec
 800b716:	75fb      	strb	r3, [r7, #23]
 800b718:	e000      	b.n	800b71c <VL53L0X_RdByte+0x48>
    }
done:
 800b71a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b71c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	460b      	mov	r3, r1
 800b732:	607a      	str	r2, [r7, #4]
 800b734:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b736:	2300      	movs	r3, #0
 800b738:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b73a:	f107 030b 	add.w	r3, r7, #11
 800b73e:	2201      	movs	r2, #1
 800b740:	4619      	mov	r1, r3
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff fea7 	bl	800b496 <_I2CWrite>
 800b748:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d002      	beq.n	800b756 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b750:	23ec      	movs	r3, #236	; 0xec
 800b752:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b754:	e017      	b.n	800b786 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b756:	2202      	movs	r2, #2
 800b758:	490e      	ldr	r1, [pc, #56]	; (800b794 <VL53L0X_RdWord+0x6c>)
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f7ff feba 	bl	800b4d4 <_I2CRead>
 800b760:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b768:	23ec      	movs	r3, #236	; 0xec
 800b76a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b76c:	e00b      	b.n	800b786 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b76e:	4b09      	ldr	r3, [pc, #36]	; (800b794 <VL53L0X_RdWord+0x6c>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	b29b      	uxth	r3, r3
 800b774:	021b      	lsls	r3, r3, #8
 800b776:	b29a      	uxth	r2, r3
 800b778:	4b06      	ldr	r3, [pc, #24]	; (800b794 <VL53L0X_RdWord+0x6c>)
 800b77a:	785b      	ldrb	r3, [r3, #1]
 800b77c:	b29b      	uxth	r3, r3
 800b77e:	4413      	add	r3, r2
 800b780:	b29a      	uxth	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b786:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	20000b28 	.word	0x20000b28

0800b798 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	460b      	mov	r3, r1
 800b7a2:	607a      	str	r2, [r7, #4]
 800b7a4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b7aa:	f107 030b 	add.w	r3, r7, #11
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f7ff fe6f 	bl	800b496 <_I2CWrite>
 800b7b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b7c0:	23ec      	movs	r3, #236	; 0xec
 800b7c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b7c4:	e01b      	b.n	800b7fe <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b7c6:	2204      	movs	r2, #4
 800b7c8:	4910      	ldr	r1, [pc, #64]	; (800b80c <VL53L0X_RdDWord+0x74>)
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff fe82 	bl	800b4d4 <_I2CRead>
 800b7d0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b7d8:	23ec      	movs	r3, #236	; 0xec
 800b7da:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b7dc:	e00f      	b.n	800b7fe <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b7de:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <VL53L0X_RdDWord+0x74>)
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	061a      	lsls	r2, r3, #24
 800b7e4:	4b09      	ldr	r3, [pc, #36]	; (800b80c <VL53L0X_RdDWord+0x74>)
 800b7e6:	785b      	ldrb	r3, [r3, #1]
 800b7e8:	041b      	lsls	r3, r3, #16
 800b7ea:	441a      	add	r2, r3
 800b7ec:	4b07      	ldr	r3, [pc, #28]	; (800b80c <VL53L0X_RdDWord+0x74>)
 800b7ee:	789b      	ldrb	r3, [r3, #2]
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	4413      	add	r3, r2
 800b7f4:	4a05      	ldr	r2, [pc, #20]	; (800b80c <VL53L0X_RdDWord+0x74>)
 800b7f6:	78d2      	ldrb	r2, [r2, #3]
 800b7f8:	441a      	add	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b7fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	20000b28 	.word	0x20000b28

0800b810 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b818:	2300      	movs	r3, #0
 800b81a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b81c:	2002      	movs	r0, #2
 800b81e:	f7f5 ff99 	bl	8001754 <HAL_Delay>
    return status;
 800b822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
	...

0800b830 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b83c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b840:	f002 fca4 	bl	800e18c <USBD_static_malloc>
 800b844:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d109      	bne.n	800b860 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	32b0      	adds	r2, #176	; 0xb0
 800b856:	2100      	movs	r1, #0
 800b858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b85c:	2302      	movs	r3, #2
 800b85e:	e0d4      	b.n	800ba0a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b860:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b864:	2100      	movs	r1, #0
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f002 fe9d 	bl	800e5a6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	32b0      	adds	r2, #176	; 0xb0
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	32b0      	adds	r2, #176	; 0xb0
 800b886:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	7c1b      	ldrb	r3, [r3, #16]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d138      	bne.n	800b90a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b898:	4b5e      	ldr	r3, [pc, #376]	; (800ba14 <USBD_CDC_Init+0x1e4>)
 800b89a:	7819      	ldrb	r1, [r3, #0]
 800b89c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f002 fb4f 	bl	800df46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b8a8:	4b5a      	ldr	r3, [pc, #360]	; (800ba14 <USBD_CDC_Init+0x1e4>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	f003 020f 	and.w	r2, r3, #15
 800b8b0:	6879      	ldr	r1, [r7, #4]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	440b      	add	r3, r1
 800b8bc:	3324      	adds	r3, #36	; 0x24
 800b8be:	2201      	movs	r2, #1
 800b8c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b8c2:	4b55      	ldr	r3, [pc, #340]	; (800ba18 <USBD_CDC_Init+0x1e8>)
 800b8c4:	7819      	ldrb	r1, [r3, #0]
 800b8c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8ca:	2202      	movs	r2, #2
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f002 fb3a 	bl	800df46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b8d2:	4b51      	ldr	r3, [pc, #324]	; (800ba18 <USBD_CDC_Init+0x1e8>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	f003 020f 	and.w	r2, r3, #15
 800b8da:	6879      	ldr	r1, [r7, #4]
 800b8dc:	4613      	mov	r3, r2
 800b8de:	009b      	lsls	r3, r3, #2
 800b8e0:	4413      	add	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	440b      	add	r3, r1
 800b8e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b8ee:	4b4b      	ldr	r3, [pc, #300]	; (800ba1c <USBD_CDC_Init+0x1ec>)
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	f003 020f 	and.w	r2, r3, #15
 800b8f6:	6879      	ldr	r1, [r7, #4]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	440b      	add	r3, r1
 800b902:	3326      	adds	r3, #38	; 0x26
 800b904:	2210      	movs	r2, #16
 800b906:	801a      	strh	r2, [r3, #0]
 800b908:	e035      	b.n	800b976 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b90a:	4b42      	ldr	r3, [pc, #264]	; (800ba14 <USBD_CDC_Init+0x1e4>)
 800b90c:	7819      	ldrb	r1, [r3, #0]
 800b90e:	2340      	movs	r3, #64	; 0x40
 800b910:	2202      	movs	r2, #2
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f002 fb17 	bl	800df46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b918:	4b3e      	ldr	r3, [pc, #248]	; (800ba14 <USBD_CDC_Init+0x1e4>)
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	f003 020f 	and.w	r2, r3, #15
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	4613      	mov	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	4413      	add	r3, r2
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	440b      	add	r3, r1
 800b92c:	3324      	adds	r3, #36	; 0x24
 800b92e:	2201      	movs	r2, #1
 800b930:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b932:	4b39      	ldr	r3, [pc, #228]	; (800ba18 <USBD_CDC_Init+0x1e8>)
 800b934:	7819      	ldrb	r1, [r3, #0]
 800b936:	2340      	movs	r3, #64	; 0x40
 800b938:	2202      	movs	r2, #2
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f002 fb03 	bl	800df46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b940:	4b35      	ldr	r3, [pc, #212]	; (800ba18 <USBD_CDC_Init+0x1e8>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	f003 020f 	and.w	r2, r3, #15
 800b948:	6879      	ldr	r1, [r7, #4]
 800b94a:	4613      	mov	r3, r2
 800b94c:	009b      	lsls	r3, r3, #2
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	440b      	add	r3, r1
 800b954:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b958:	2201      	movs	r2, #1
 800b95a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b95c:	4b2f      	ldr	r3, [pc, #188]	; (800ba1c <USBD_CDC_Init+0x1ec>)
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	f003 020f 	and.w	r2, r3, #15
 800b964:	6879      	ldr	r1, [r7, #4]
 800b966:	4613      	mov	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4413      	add	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	440b      	add	r3, r1
 800b970:	3326      	adds	r3, #38	; 0x26
 800b972:	2210      	movs	r2, #16
 800b974:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b976:	4b29      	ldr	r3, [pc, #164]	; (800ba1c <USBD_CDC_Init+0x1ec>)
 800b978:	7819      	ldrb	r1, [r3, #0]
 800b97a:	2308      	movs	r3, #8
 800b97c:	2203      	movs	r2, #3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f002 fae1 	bl	800df46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b984:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <USBD_CDC_Init+0x1ec>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	f003 020f 	and.w	r2, r3, #15
 800b98c:	6879      	ldr	r1, [r7, #4]
 800b98e:	4613      	mov	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4413      	add	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	440b      	add	r3, r1
 800b998:	3324      	adds	r3, #36	; 0x24
 800b99a:	2201      	movs	r2, #1
 800b99c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	33b0      	adds	r3, #176	; 0xb0
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4413      	add	r3, r2
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e018      	b.n	800ba0a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	7c1b      	ldrb	r3, [r3, #16]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10a      	bne.n	800b9f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ba18 <USBD_CDC_Init+0x1e8>)
 800b9e2:	7819      	ldrb	r1, [r3, #0]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f002 fb98 	bl	800e124 <USBD_LL_PrepareReceive>
 800b9f4:	e008      	b.n	800ba08 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b9f6:	4b08      	ldr	r3, [pc, #32]	; (800ba18 <USBD_CDC_Init+0x1e8>)
 800b9f8:	7819      	ldrb	r1, [r3, #0]
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ba00:	2340      	movs	r3, #64	; 0x40
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f002 fb8e 	bl	800e124 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	2000034f 	.word	0x2000034f
 800ba18:	20000350 	.word	0x20000350
 800ba1c:	20000351 	.word	0x20000351

0800ba20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ba2c:	4b3a      	ldr	r3, [pc, #232]	; (800bb18 <USBD_CDC_DeInit+0xf8>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f002 faad 	bl	800df92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ba38:	4b37      	ldr	r3, [pc, #220]	; (800bb18 <USBD_CDC_DeInit+0xf8>)
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	f003 020f 	and.w	r2, r3, #15
 800ba40:	6879      	ldr	r1, [r7, #4]
 800ba42:	4613      	mov	r3, r2
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	440b      	add	r3, r1
 800ba4c:	3324      	adds	r3, #36	; 0x24
 800ba4e:	2200      	movs	r2, #0
 800ba50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ba52:	4b32      	ldr	r3, [pc, #200]	; (800bb1c <USBD_CDC_DeInit+0xfc>)
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	4619      	mov	r1, r3
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f002 fa9a 	bl	800df92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ba5e:	4b2f      	ldr	r3, [pc, #188]	; (800bb1c <USBD_CDC_DeInit+0xfc>)
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	f003 020f 	and.w	r2, r3, #15
 800ba66:	6879      	ldr	r1, [r7, #4]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	440b      	add	r3, r1
 800ba72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba76:	2200      	movs	r2, #0
 800ba78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ba7a:	4b29      	ldr	r3, [pc, #164]	; (800bb20 <USBD_CDC_DeInit+0x100>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f002 fa86 	bl	800df92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ba86:	4b26      	ldr	r3, [pc, #152]	; (800bb20 <USBD_CDC_DeInit+0x100>)
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	f003 020f 	and.w	r2, r3, #15
 800ba8e:	6879      	ldr	r1, [r7, #4]
 800ba90:	4613      	mov	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	4413      	add	r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	440b      	add	r3, r1
 800ba9a:	3324      	adds	r3, #36	; 0x24
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800baa0:	4b1f      	ldr	r3, [pc, #124]	; (800bb20 <USBD_CDC_DeInit+0x100>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 020f 	and.w	r2, r3, #15
 800baa8:	6879      	ldr	r1, [r7, #4]
 800baaa:	4613      	mov	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4413      	add	r3, r2
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	440b      	add	r3, r1
 800bab4:	3326      	adds	r3, #38	; 0x26
 800bab6:	2200      	movs	r2, #0
 800bab8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	32b0      	adds	r2, #176	; 0xb0
 800bac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d01f      	beq.n	800bb0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	33b0      	adds	r3, #176	; 0xb0
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	32b0      	adds	r2, #176	; 0xb0
 800baea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baee:	4618      	mov	r0, r3
 800baf0:	f002 fb5a 	bl	800e1a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	32b0      	adds	r2, #176	; 0xb0
 800bafe:	2100      	movs	r1, #0
 800bb00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	2000034f 	.word	0x2000034f
 800bb1c:	20000350 	.word	0x20000350
 800bb20:	20000351 	.word	0x20000351

0800bb24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	32b0      	adds	r2, #176	; 0xb0
 800bb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bb42:	2300      	movs	r3, #0
 800bb44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bb50:	2303      	movs	r3, #3
 800bb52:	e0bf      	b.n	800bcd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d050      	beq.n	800bc02 <USBD_CDC_Setup+0xde>
 800bb60:	2b20      	cmp	r3, #32
 800bb62:	f040 80af 	bne.w	800bcc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	88db      	ldrh	r3, [r3, #6]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d03a      	beq.n	800bbe4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	b25b      	sxtb	r3, r3
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	da1b      	bge.n	800bbb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	33b0      	adds	r3, #176	; 0xb0
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	4413      	add	r3, r2
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	683a      	ldr	r2, [r7, #0]
 800bb8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bb8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	88d2      	ldrh	r2, [r2, #6]
 800bb94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	88db      	ldrh	r3, [r3, #6]
 800bb9a:	2b07      	cmp	r3, #7
 800bb9c:	bf28      	it	cs
 800bb9e:	2307      	movcs	r3, #7
 800bba0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	89fa      	ldrh	r2, [r7, #14]
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f001 fd89 	bl	800d6c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bbae:	e090      	b.n	800bcd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	785a      	ldrb	r2, [r3, #1]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	88db      	ldrh	r3, [r3, #6]
 800bbbe:	2b3f      	cmp	r3, #63	; 0x3f
 800bbc0:	d803      	bhi.n	800bbca <USBD_CDC_Setup+0xa6>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	88db      	ldrh	r3, [r3, #6]
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	e000      	b.n	800bbcc <USBD_CDC_Setup+0xa8>
 800bbca:	2240      	movs	r2, #64	; 0x40
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bbd2:	6939      	ldr	r1, [r7, #16]
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bbda:	461a      	mov	r2, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f001 fd9b 	bl	800d718 <USBD_CtlPrepareRx>
      break;
 800bbe2:	e076      	b.n	800bcd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	33b0      	adds	r3, #176	; 0xb0
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	7850      	ldrb	r0, [r2, #1]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	4798      	blx	r3
      break;
 800bc00:	e067      	b.n	800bcd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	785b      	ldrb	r3, [r3, #1]
 800bc06:	2b0b      	cmp	r3, #11
 800bc08:	d851      	bhi.n	800bcae <USBD_CDC_Setup+0x18a>
 800bc0a:	a201      	add	r2, pc, #4	; (adr r2, 800bc10 <USBD_CDC_Setup+0xec>)
 800bc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc10:	0800bc41 	.word	0x0800bc41
 800bc14:	0800bcbd 	.word	0x0800bcbd
 800bc18:	0800bcaf 	.word	0x0800bcaf
 800bc1c:	0800bcaf 	.word	0x0800bcaf
 800bc20:	0800bcaf 	.word	0x0800bcaf
 800bc24:	0800bcaf 	.word	0x0800bcaf
 800bc28:	0800bcaf 	.word	0x0800bcaf
 800bc2c:	0800bcaf 	.word	0x0800bcaf
 800bc30:	0800bcaf 	.word	0x0800bcaf
 800bc34:	0800bcaf 	.word	0x0800bcaf
 800bc38:	0800bc6b 	.word	0x0800bc6b
 800bc3c:	0800bc95 	.word	0x0800bc95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d107      	bne.n	800bc5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bc4c:	f107 030a 	add.w	r3, r7, #10
 800bc50:	2202      	movs	r2, #2
 800bc52:	4619      	mov	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f001 fd33 	bl	800d6c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc5a:	e032      	b.n	800bcc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 fcbd 	bl	800d5de <USBD_CtlError>
            ret = USBD_FAIL;
 800bc64:	2303      	movs	r3, #3
 800bc66:	75fb      	strb	r3, [r7, #23]
          break;
 800bc68:	e02b      	b.n	800bcc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	2b03      	cmp	r3, #3
 800bc74:	d107      	bne.n	800bc86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bc76:	f107 030d 	add.w	r3, r7, #13
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f001 fd1e 	bl	800d6c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bc84:	e01d      	b.n	800bcc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f001 fca8 	bl	800d5de <USBD_CtlError>
            ret = USBD_FAIL;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	75fb      	strb	r3, [r7, #23]
          break;
 800bc92:	e016      	b.n	800bcc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	d00f      	beq.n	800bcc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bca0:	6839      	ldr	r1, [r7, #0]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 fc9b 	bl	800d5de <USBD_CtlError>
            ret = USBD_FAIL;
 800bca8:	2303      	movs	r3, #3
 800bcaa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bcac:	e008      	b.n	800bcc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f001 fc94 	bl	800d5de <USBD_CtlError>
          ret = USBD_FAIL;
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	75fb      	strb	r3, [r7, #23]
          break;
 800bcba:	e002      	b.n	800bcc2 <USBD_CDC_Setup+0x19e>
          break;
 800bcbc:	bf00      	nop
 800bcbe:	e008      	b.n	800bcd2 <USBD_CDC_Setup+0x1ae>
          break;
 800bcc0:	bf00      	nop
      }
      break;
 800bcc2:	e006      	b.n	800bcd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 fc89 	bl	800d5de <USBD_CtlError>
      ret = USBD_FAIL;
 800bccc:	2303      	movs	r3, #3
 800bcce:	75fb      	strb	r3, [r7, #23]
      break;
 800bcd0:	bf00      	nop
  }

  return (uint8_t)ret;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3718      	adds	r7, #24
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b084      	sub	sp, #16
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	460b      	mov	r3, r1
 800bce6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bcee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	32b0      	adds	r2, #176	; 0xb0
 800bcfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d101      	bne.n	800bd06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bd02:	2303      	movs	r3, #3
 800bd04:	e065      	b.n	800bdd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	32b0      	adds	r2, #176	; 0xb0
 800bd10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd16:	78fb      	ldrb	r3, [r7, #3]
 800bd18:	f003 020f 	and.w	r2, r3, #15
 800bd1c:	6879      	ldr	r1, [r7, #4]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	440b      	add	r3, r1
 800bd28:	3318      	adds	r3, #24
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d02f      	beq.n	800bd90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bd30:	78fb      	ldrb	r3, [r7, #3]
 800bd32:	f003 020f 	and.w	r2, r3, #15
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	440b      	add	r3, r1
 800bd42:	3318      	adds	r3, #24
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	78fb      	ldrb	r3, [r7, #3]
 800bd48:	f003 010f 	and.w	r1, r3, #15
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	460b      	mov	r3, r1
 800bd50:	00db      	lsls	r3, r3, #3
 800bd52:	440b      	add	r3, r1
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4403      	add	r3, r0
 800bd58:	331c      	adds	r3, #28
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800bd60:	fb01 f303 	mul.w	r3, r1, r3
 800bd64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d112      	bne.n	800bd90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bd6a:	78fb      	ldrb	r3, [r7, #3]
 800bd6c:	f003 020f 	and.w	r2, r3, #15
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3318      	adds	r3, #24
 800bd7e:	2200      	movs	r2, #0
 800bd80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bd82:	78f9      	ldrb	r1, [r7, #3]
 800bd84:	2300      	movs	r3, #0
 800bd86:	2200      	movs	r2, #0
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f002 f9aa 	bl	800e0e2 <USBD_LL_Transmit>
 800bd8e:	e01f      	b.n	800bdd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2200      	movs	r2, #0
 800bd94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	33b0      	adds	r3, #176	; 0xb0
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d010      	beq.n	800bdd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	33b0      	adds	r3, #176	; 0xb0
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	68ba      	ldr	r2, [r7, #8]
 800bdc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b084      	sub	sp, #16
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	460b      	mov	r3, r1
 800bde4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	32b0      	adds	r2, #176	; 0xb0
 800bdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	32b0      	adds	r2, #176	; 0xb0
 800be00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800be08:	2303      	movs	r3, #3
 800be0a:	e01a      	b.n	800be42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800be0c:	78fb      	ldrb	r3, [r7, #3]
 800be0e:	4619      	mov	r1, r3
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f002 f9a8 	bl	800e166 <USBD_LL_GetRxDataSize>
 800be16:	4602      	mov	r2, r0
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	33b0      	adds	r3, #176	; 0xb0
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	68fa      	ldr	r2, [r7, #12]
 800be32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800be3c:	4611      	mov	r1, r2
 800be3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	32b0      	adds	r2, #176	; 0xb0
 800be5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800be68:	2303      	movs	r3, #3
 800be6a:	e025      	b.n	800beb8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	33b0      	adds	r3, #176	; 0xb0
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d01a      	beq.n	800beb6 <USBD_CDC_EP0_RxReady+0x6c>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800be86:	2bff      	cmp	r3, #255	; 0xff
 800be88:	d015      	beq.n	800beb6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	33b0      	adds	r3, #176	; 0xb0
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bea2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800beaa:	b292      	uxth	r2, r2
 800beac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	22ff      	movs	r2, #255	; 0xff
 800beb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bec8:	2182      	movs	r1, #130	; 0x82
 800beca:	4818      	ldr	r0, [pc, #96]	; (800bf2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800becc:	f000 fd4f 	bl	800c96e <USBD_GetEpDesc>
 800bed0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bed2:	2101      	movs	r1, #1
 800bed4:	4815      	ldr	r0, [pc, #84]	; (800bf2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bed6:	f000 fd4a 	bl	800c96e <USBD_GetEpDesc>
 800beda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bedc:	2181      	movs	r1, #129	; 0x81
 800bede:	4813      	ldr	r0, [pc, #76]	; (800bf2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bee0:	f000 fd45 	bl	800c96e <USBD_GetEpDesc>
 800bee4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d002      	beq.n	800bef2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	2210      	movs	r2, #16
 800bef0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d006      	beq.n	800bf06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	2200      	movs	r2, #0
 800befc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf00:	711a      	strb	r2, [r3, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d006      	beq.n	800bf1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf14:	711a      	strb	r2, [r3, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2243      	movs	r2, #67	; 0x43
 800bf1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf20:	4b02      	ldr	r3, [pc, #8]	; (800bf2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	2000030c 	.word	0x2000030c

0800bf30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bf38:	2182      	movs	r1, #130	; 0x82
 800bf3a:	4818      	ldr	r0, [pc, #96]	; (800bf9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf3c:	f000 fd17 	bl	800c96e <USBD_GetEpDesc>
 800bf40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bf42:	2101      	movs	r1, #1
 800bf44:	4815      	ldr	r0, [pc, #84]	; (800bf9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf46:	f000 fd12 	bl	800c96e <USBD_GetEpDesc>
 800bf4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bf4c:	2181      	movs	r1, #129	; 0x81
 800bf4e:	4813      	ldr	r0, [pc, #76]	; (800bf9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bf50:	f000 fd0d 	bl	800c96e <USBD_GetEpDesc>
 800bf54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2210      	movs	r2, #16
 800bf60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d006      	beq.n	800bf76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	711a      	strb	r2, [r3, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f042 0202 	orr.w	r2, r2, #2
 800bf74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d006      	beq.n	800bf8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	711a      	strb	r2, [r3, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f042 0202 	orr.w	r2, r2, #2
 800bf88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	2243      	movs	r2, #67	; 0x43
 800bf8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bf90:	4b02      	ldr	r3, [pc, #8]	; (800bf9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3718      	adds	r7, #24
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	2000030c 	.word	0x2000030c

0800bfa0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bfa8:	2182      	movs	r1, #130	; 0x82
 800bfaa:	4818      	ldr	r0, [pc, #96]	; (800c00c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bfac:	f000 fcdf 	bl	800c96e <USBD_GetEpDesc>
 800bfb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bfb2:	2101      	movs	r1, #1
 800bfb4:	4815      	ldr	r0, [pc, #84]	; (800c00c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bfb6:	f000 fcda 	bl	800c96e <USBD_GetEpDesc>
 800bfba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bfbc:	2181      	movs	r1, #129	; 0x81
 800bfbe:	4813      	ldr	r0, [pc, #76]	; (800c00c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bfc0:	f000 fcd5 	bl	800c96e <USBD_GetEpDesc>
 800bfc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	2210      	movs	r2, #16
 800bfd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d006      	beq.n	800bfe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfe0:	711a      	strb	r2, [r3, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d006      	beq.n	800bffa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bff4:	711a      	strb	r2, [r3, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2243      	movs	r2, #67	; 0x43
 800bffe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c000:	4b02      	ldr	r3, [pc, #8]	; (800c00c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c002:	4618      	mov	r0, r3
 800c004:	3718      	adds	r7, #24
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	2000030c 	.word	0x2000030c

0800c010 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	220a      	movs	r2, #10
 800c01c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c01e:	4b03      	ldr	r3, [pc, #12]	; (800c02c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c020:	4618      	mov	r0, r3
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	200002c8 	.word	0x200002c8

0800c030 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d101      	bne.n	800c044 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c040:	2303      	movs	r3, #3
 800c042:	e009      	b.n	800c058 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	33b0      	adds	r3, #176	; 0xb0
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c064:	b480      	push	{r7}
 800c066:	b087      	sub	sp, #28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	32b0      	adds	r2, #176	; 0xb0
 800c07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c086:	2303      	movs	r3, #3
 800c088:	e008      	b.n	800c09c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	371c      	adds	r7, #28
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	32b0      	adds	r2, #176	; 0xb0
 800c0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e004      	b.n	800c0d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
	...

0800c0e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	32b0      	adds	r2, #176	; 0xb0
 800c0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c106:	2303      	movs	r3, #3
 800c108:	e025      	b.n	800c156 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c110:	2b00      	cmp	r3, #0
 800c112:	d11f      	bne.n	800c154 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	2201      	movs	r2, #1
 800c118:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c11c:	4b10      	ldr	r3, [pc, #64]	; (800c160 <USBD_CDC_TransmitPacket+0x7c>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	f003 020f 	and.w	r2, r3, #15
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	4613      	mov	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4413      	add	r3, r2
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	4403      	add	r3, r0
 800c136:	3318      	adds	r3, #24
 800c138:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c13a:	4b09      	ldr	r3, [pc, #36]	; (800c160 <USBD_CDC_TransmitPacket+0x7c>)
 800c13c:	7819      	ldrb	r1, [r3, #0]
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f001 ffc9 	bl	800e0e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c154:	7bfb      	ldrb	r3, [r7, #15]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	2000034f 	.word	0x2000034f

0800c164 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	32b0      	adds	r2, #176	; 0xb0
 800c176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c17a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	32b0      	adds	r2, #176	; 0xb0
 800c186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c18e:	2303      	movs	r3, #3
 800c190:	e018      	b.n	800c1c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	7c1b      	ldrb	r3, [r3, #16]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10a      	bne.n	800c1b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c19a:	4b0c      	ldr	r3, [pc, #48]	; (800c1cc <USBD_CDC_ReceivePacket+0x68>)
 800c19c:	7819      	ldrb	r1, [r3, #0]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 ffbb 	bl	800e124 <USBD_LL_PrepareReceive>
 800c1ae:	e008      	b.n	800c1c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c1b0:	4b06      	ldr	r3, [pc, #24]	; (800c1cc <USBD_CDC_ReceivePacket+0x68>)
 800c1b2:	7819      	ldrb	r1, [r3, #0]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1ba:	2340      	movs	r3, #64	; 0x40
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f001 ffb1 	bl	800e124 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c1c2:	2300      	movs	r3, #0
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	20000350 	.word	0x20000350

0800c1d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	60f8      	str	r0, [r7, #12]
 800c1d8:	60b9      	str	r1, [r7, #8]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d101      	bne.n	800c1e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	e01f      	b.n	800c228 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d003      	beq.n	800c20e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	68ba      	ldr	r2, [r7, #8]
 800c20a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	79fa      	ldrb	r2, [r7, #7]
 800c21a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f001 fe2b 	bl	800de78 <USBD_LL_Init>
 800c222:	4603      	mov	r3, r0
 800c224:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c226:	7dfb      	ldrb	r3, [r7, #23]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3718      	adds	r7, #24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c23a:	2300      	movs	r3, #0
 800c23c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c244:	2303      	movs	r3, #3
 800c246:	e025      	b.n	800c294 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	32ae      	adds	r2, #174	; 0xae
 800c25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00f      	beq.n	800c284 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	32ae      	adds	r2, #174	; 0xae
 800c26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c274:	f107 020e 	add.w	r2, r7, #14
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
 800c27c:	4602      	mov	r2, r0
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f001 fe33 	bl	800df10 <USBD_LL_Start>
 800c2aa:	4603      	mov	r3, r0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2ca:	b580      	push	{r7, lr}
 800c2cc:	b084      	sub	sp, #16
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d009      	beq.n	800c2f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	78fa      	ldrb	r2, [r7, #3]
 800c2ee:	4611      	mov	r1, r2
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	4798      	blx	r3
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b084      	sub	sp, #16
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	460b      	mov	r3, r1
 800c30c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	78fa      	ldrb	r2, [r7, #3]
 800c31c:	4611      	mov	r1, r2
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	4798      	blx	r3
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d001      	beq.n	800c32c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	4618      	mov	r0, r3
 800c34a:	f001 f90e 	bl	800d56a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2201      	movs	r2, #1
 800c352:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c35c:	461a      	mov	r2, r3
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c36a:	f003 031f 	and.w	r3, r3, #31
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d01a      	beq.n	800c3a8 <USBD_LL_SetupStage+0x72>
 800c372:	2b02      	cmp	r3, #2
 800c374:	d822      	bhi.n	800c3bc <USBD_LL_SetupStage+0x86>
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <USBD_LL_SetupStage+0x4a>
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d00a      	beq.n	800c394 <USBD_LL_SetupStage+0x5e>
 800c37e:	e01d      	b.n	800c3bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c386:	4619      	mov	r1, r3
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fb65 	bl	800ca58 <USBD_StdDevReq>
 800c38e:	4603      	mov	r3, r0
 800c390:	73fb      	strb	r3, [r7, #15]
      break;
 800c392:	e020      	b.n	800c3d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c39a:	4619      	mov	r1, r3
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fbcd 	bl	800cb3c <USBD_StdItfReq>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	73fb      	strb	r3, [r7, #15]
      break;
 800c3a6:	e016      	b.n	800c3d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 fc2f 	bl	800cc14 <USBD_StdEPReq>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ba:	e00c      	b.n	800c3d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f001 fe00 	bl	800dfd0 <USBD_LL_StallEP>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c3d4:	bf00      	nop
  }

  return ret;
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	607a      	str	r2, [r7, #4]
 800c3ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c3f2:	7afb      	ldrb	r3, [r7, #11]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d16e      	bne.n	800c4d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c3fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c406:	2b03      	cmp	r3, #3
 800c408:	f040 8098 	bne.w	800c53c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	689a      	ldr	r2, [r3, #8]
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	429a      	cmp	r2, r3
 800c416:	d913      	bls.n	800c440 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	1ad2      	subs	r2, r2, r3
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	68da      	ldr	r2, [r3, #12]
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	4293      	cmp	r3, r2
 800c430:	bf28      	it	cs
 800c432:	4613      	movcs	r3, r2
 800c434:	461a      	mov	r2, r3
 800c436:	6879      	ldr	r1, [r7, #4]
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f001 f98a 	bl	800d752 <USBD_CtlContinueRx>
 800c43e:	e07d      	b.n	800c53c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c446:	f003 031f 	and.w	r3, r3, #31
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d014      	beq.n	800c478 <USBD_LL_DataOutStage+0x98>
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d81d      	bhi.n	800c48e <USBD_LL_DataOutStage+0xae>
 800c452:	2b00      	cmp	r3, #0
 800c454:	d002      	beq.n	800c45c <USBD_LL_DataOutStage+0x7c>
 800c456:	2b01      	cmp	r3, #1
 800c458:	d003      	beq.n	800c462 <USBD_LL_DataOutStage+0x82>
 800c45a:	e018      	b.n	800c48e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c45c:	2300      	movs	r3, #0
 800c45e:	75bb      	strb	r3, [r7, #22]
            break;
 800c460:	e018      	b.n	800c494 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	4619      	mov	r1, r3
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 fa64 	bl	800c93a <USBD_CoreFindIF>
 800c472:	4603      	mov	r3, r0
 800c474:	75bb      	strb	r3, [r7, #22]
            break;
 800c476:	e00d      	b.n	800c494 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	4619      	mov	r1, r3
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f000 fa66 	bl	800c954 <USBD_CoreFindEP>
 800c488:	4603      	mov	r3, r0
 800c48a:	75bb      	strb	r3, [r7, #22]
            break;
 800c48c:	e002      	b.n	800c494 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c48e:	2300      	movs	r3, #0
 800c490:	75bb      	strb	r3, [r7, #22]
            break;
 800c492:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c494:	7dbb      	ldrb	r3, [r7, #22]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d119      	bne.n	800c4ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d113      	bne.n	800c4ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c4a6:	7dba      	ldrb	r2, [r7, #22]
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	32ae      	adds	r2, #174	; 0xae
 800c4ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00b      	beq.n	800c4ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c4b6:	7dba      	ldrb	r2, [r7, #22]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c4be:	7dba      	ldrb	r2, [r7, #22]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	32ae      	adds	r2, #174	; 0xae
 800c4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f001 f950 	bl	800d774 <USBD_CtlSendStatus>
 800c4d4:	e032      	b.n	800c53c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c4d6:	7afb      	ldrb	r3, [r7, #11]
 800c4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 fa37 	bl	800c954 <USBD_CoreFindEP>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4ea:	7dbb      	ldrb	r3, [r7, #22]
 800c4ec:	2bff      	cmp	r3, #255	; 0xff
 800c4ee:	d025      	beq.n	800c53c <USBD_LL_DataOutStage+0x15c>
 800c4f0:	7dbb      	ldrb	r3, [r7, #22]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d122      	bne.n	800c53c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4fc:	b2db      	uxtb	r3, r3
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d117      	bne.n	800c532 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c502:	7dba      	ldrb	r2, [r7, #22]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	32ae      	adds	r2, #174	; 0xae
 800c508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c50c:	699b      	ldr	r3, [r3, #24]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00f      	beq.n	800c532 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c512:	7dba      	ldrb	r2, [r7, #22]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c51a:	7dba      	ldrb	r2, [r7, #22]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	32ae      	adds	r2, #174	; 0xae
 800c520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c524:	699b      	ldr	r3, [r3, #24]
 800c526:	7afa      	ldrb	r2, [r7, #11]
 800c528:	4611      	mov	r1, r2
 800c52a:	68f8      	ldr	r0, [r7, #12]
 800c52c:	4798      	blx	r3
 800c52e:	4603      	mov	r3, r0
 800c530:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d001      	beq.n	800c53c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c538:	7dfb      	ldrb	r3, [r7, #23]
 800c53a:	e000      	b.n	800c53e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b086      	sub	sp, #24
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	60f8      	str	r0, [r7, #12]
 800c54e:	460b      	mov	r3, r1
 800c550:	607a      	str	r2, [r7, #4]
 800c552:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c554:	7afb      	ldrb	r3, [r7, #11]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d16f      	bne.n	800c63a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3314      	adds	r3, #20
 800c55e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c566:	2b02      	cmp	r3, #2
 800c568:	d15a      	bne.n	800c620 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	689a      	ldr	r2, [r3, #8]
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	429a      	cmp	r2, r3
 800c574:	d914      	bls.n	800c5a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	689a      	ldr	r2, [r3, #8]
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	1ad2      	subs	r2, r2, r3
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	461a      	mov	r2, r3
 800c58a:	6879      	ldr	r1, [r7, #4]
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f001 f8b2 	bl	800d6f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c592:	2300      	movs	r3, #0
 800c594:	2200      	movs	r2, #0
 800c596:	2100      	movs	r1, #0
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f001 fdc3 	bl	800e124 <USBD_LL_PrepareReceive>
 800c59e:	e03f      	b.n	800c620 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d11c      	bne.n	800c5e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d316      	bcc.n	800c5e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d20f      	bcs.n	800c5e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2100      	movs	r1, #0
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f001 f893 	bl	800d6f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5d8:	2300      	movs	r3, #0
 800c5da:	2200      	movs	r2, #0
 800c5dc:	2100      	movs	r1, #0
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f001 fda0 	bl	800e124 <USBD_LL_PrepareReceive>
 800c5e4:	e01c      	b.n	800c620 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b03      	cmp	r3, #3
 800c5f0:	d10f      	bne.n	800c612 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d009      	beq.n	800c612 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2200      	movs	r2, #0
 800c602:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c612:	2180      	movs	r1, #128	; 0x80
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f001 fcdb 	bl	800dfd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f001 f8bd 	bl	800d79a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d03a      	beq.n	800c6a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff fe42 	bl	800c2b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2200      	movs	r2, #0
 800c634:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c638:	e032      	b.n	800c6a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c63a:	7afb      	ldrb	r3, [r7, #11]
 800c63c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c640:	b2db      	uxtb	r3, r3
 800c642:	4619      	mov	r1, r3
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f000 f985 	bl	800c954 <USBD_CoreFindEP>
 800c64a:	4603      	mov	r3, r0
 800c64c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c64e:	7dfb      	ldrb	r3, [r7, #23]
 800c650:	2bff      	cmp	r3, #255	; 0xff
 800c652:	d025      	beq.n	800c6a0 <USBD_LL_DataInStage+0x15a>
 800c654:	7dfb      	ldrb	r3, [r7, #23]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d122      	bne.n	800c6a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c660:	b2db      	uxtb	r3, r3
 800c662:	2b03      	cmp	r3, #3
 800c664:	d11c      	bne.n	800c6a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c666:	7dfa      	ldrb	r2, [r7, #23]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	32ae      	adds	r2, #174	; 0xae
 800c66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d014      	beq.n	800c6a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c676:	7dfa      	ldrb	r2, [r7, #23]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c67e:	7dfa      	ldrb	r2, [r7, #23]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	32ae      	adds	r2, #174	; 0xae
 800c684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	7afa      	ldrb	r2, [r7, #11]
 800c68c:	4611      	mov	r1, r2
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	4798      	blx	r3
 800c692:	4603      	mov	r3, r0
 800c694:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c696:	7dbb      	ldrb	r3, [r7, #22]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c69c:	7dbb      	ldrb	r3, [r7, #22]
 800c69e:	e000      	b.n	800c6a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3718      	adds	r7, #24
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d014      	beq.n	800c710 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00e      	beq.n	800c710 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	6852      	ldr	r2, [r2, #4]
 800c6fe:	b2d2      	uxtb	r2, r2
 800c700:	4611      	mov	r1, r2
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	4798      	blx	r3
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c70c:	2303      	movs	r3, #3
 800c70e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c710:	2340      	movs	r3, #64	; 0x40
 800c712:	2200      	movs	r2, #0
 800c714:	2100      	movs	r1, #0
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f001 fc15 	bl	800df46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2201      	movs	r2, #1
 800c720:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2240      	movs	r2, #64	; 0x40
 800c728:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c72c:	2340      	movs	r3, #64	; 0x40
 800c72e:	2200      	movs	r2, #0
 800c730:	2180      	movs	r1, #128	; 0x80
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f001 fc07 	bl	800df46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2240      	movs	r2, #64	; 0x40
 800c742:	621a      	str	r2, [r3, #32]

  return ret;
 800c744:	7bfb      	ldrb	r3, [r7, #15]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c74e:	b480      	push	{r7}
 800c750:	b083      	sub	sp, #12
 800c752:	af00      	add	r7, sp, #0
 800c754:	6078      	str	r0, [r7, #4]
 800c756:	460b      	mov	r3, r1
 800c758:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	78fa      	ldrb	r2, [r7, #3]
 800c75e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2b04      	cmp	r3, #4
 800c780:	d006      	beq.n	800c790 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2204      	movs	r2, #4
 800c794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b04      	cmp	r3, #4
 800c7b8:	d106      	bne.n	800c7c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr

0800c7d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b082      	sub	sp, #8
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d110      	bne.n	800c80c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d00b      	beq.n	800c80c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7fa:	69db      	ldr	r3, [r3, #28]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d005      	beq.n	800c80c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c806:	69db      	ldr	r3, [r3, #28]
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b082      	sub	sp, #8
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	460b      	mov	r3, r1
 800c820:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	32ae      	adds	r2, #174	; 0xae
 800c82c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d101      	bne.n	800c838 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c834:	2303      	movs	r3, #3
 800c836:	e01c      	b.n	800c872 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b03      	cmp	r3, #3
 800c842:	d115      	bne.n	800c870 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	32ae      	adds	r2, #174	; 0xae
 800c84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c852:	6a1b      	ldr	r3, [r3, #32]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d00b      	beq.n	800c870 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	32ae      	adds	r2, #174	; 0xae
 800c862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c866:	6a1b      	ldr	r3, [r3, #32]
 800c868:	78fa      	ldrb	r2, [r7, #3]
 800c86a:	4611      	mov	r1, r2
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b082      	sub	sp, #8
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
 800c882:	460b      	mov	r3, r1
 800c884:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	32ae      	adds	r2, #174	; 0xae
 800c890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c898:	2303      	movs	r3, #3
 800c89a:	e01c      	b.n	800c8d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	2b03      	cmp	r3, #3
 800c8a6:	d115      	bne.n	800c8d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	32ae      	adds	r2, #174	; 0xae
 800c8b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00b      	beq.n	800c8d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	32ae      	adds	r2, #174	; 0xae
 800c8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8cc:	78fa      	ldrb	r2, [r7, #3]
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b083      	sub	sp, #12
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	370c      	adds	r7, #12
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2201      	movs	r2, #1
 800c904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00e      	beq.n	800c930 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	6852      	ldr	r2, [r2, #4]
 800c91e:	b2d2      	uxtb	r2, r2
 800c920:	4611      	mov	r1, r2
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	4798      	blx	r3
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c92c:	2303      	movs	r3, #3
 800c92e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c930:	7bfb      	ldrb	r3, [r7, #15]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c93a:	b480      	push	{r7}
 800c93c:	b083      	sub	sp, #12
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	460b      	mov	r3, r1
 800c944:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c946:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c948:	4618      	mov	r0, r3
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c960:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c962:	4618      	mov	r0, r3
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr

0800c96e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c96e:	b580      	push	{r7, lr}
 800c970:	b086      	sub	sp, #24
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
 800c976:	460b      	mov	r3, r1
 800c978:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c982:	2300      	movs	r3, #0
 800c984:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	885b      	ldrh	r3, [r3, #2]
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	b29b      	uxth	r3, r3
 800c992:	429a      	cmp	r2, r3
 800c994:	d920      	bls.n	800c9d8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c99e:	e013      	b.n	800c9c8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c9a0:	f107 030a 	add.w	r3, r7, #10
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	6978      	ldr	r0, [r7, #20]
 800c9a8:	f000 f81b 	bl	800c9e2 <USBD_GetNextDesc>
 800c9ac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	785b      	ldrb	r3, [r3, #1]
 800c9b2:	2b05      	cmp	r3, #5
 800c9b4:	d108      	bne.n	800c9c8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	789b      	ldrb	r3, [r3, #2]
 800c9be:	78fa      	ldrb	r2, [r7, #3]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d008      	beq.n	800c9d6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	885b      	ldrh	r3, [r3, #2]
 800c9cc:	b29a      	uxth	r2, r3
 800c9ce:	897b      	ldrh	r3, [r7, #10]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d8e5      	bhi.n	800c9a0 <USBD_GetEpDesc+0x32>
 800c9d4:	e000      	b.n	800c9d8 <USBD_GetEpDesc+0x6a>
          break;
 800c9d6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c9d8:	693b      	ldr	r3, [r7, #16]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b085      	sub	sp, #20
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	881a      	ldrh	r2, [r3, #0]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	4413      	add	r3, r2
 800c9fc:	b29a      	uxth	r2, r3
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3714      	adds	r7, #20
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	3301      	adds	r3, #1
 800ca32:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ca3a:	8a3b      	ldrh	r3, [r7, #16]
 800ca3c:	021b      	lsls	r3, r3, #8
 800ca3e:	b21a      	sxth	r2, r3
 800ca40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca44:	4313      	orrs	r3, r2
 800ca46:	b21b      	sxth	r3, r3
 800ca48:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ca4a:	89fb      	ldrh	r3, [r7, #14]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca6e:	2b40      	cmp	r3, #64	; 0x40
 800ca70:	d005      	beq.n	800ca7e <USBD_StdDevReq+0x26>
 800ca72:	2b40      	cmp	r3, #64	; 0x40
 800ca74:	d857      	bhi.n	800cb26 <USBD_StdDevReq+0xce>
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00f      	beq.n	800ca9a <USBD_StdDevReq+0x42>
 800ca7a:	2b20      	cmp	r3, #32
 800ca7c:	d153      	bne.n	800cb26 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	32ae      	adds	r2, #174	; 0xae
 800ca88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8c:	689b      	ldr	r3, [r3, #8]
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	4798      	blx	r3
 800ca94:	4603      	mov	r3, r0
 800ca96:	73fb      	strb	r3, [r7, #15]
      break;
 800ca98:	e04a      	b.n	800cb30 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	785b      	ldrb	r3, [r3, #1]
 800ca9e:	2b09      	cmp	r3, #9
 800caa0:	d83b      	bhi.n	800cb1a <USBD_StdDevReq+0xc2>
 800caa2:	a201      	add	r2, pc, #4	; (adr r2, 800caa8 <USBD_StdDevReq+0x50>)
 800caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa8:	0800cafd 	.word	0x0800cafd
 800caac:	0800cb11 	.word	0x0800cb11
 800cab0:	0800cb1b 	.word	0x0800cb1b
 800cab4:	0800cb07 	.word	0x0800cb07
 800cab8:	0800cb1b 	.word	0x0800cb1b
 800cabc:	0800cadb 	.word	0x0800cadb
 800cac0:	0800cad1 	.word	0x0800cad1
 800cac4:	0800cb1b 	.word	0x0800cb1b
 800cac8:	0800caf3 	.word	0x0800caf3
 800cacc:	0800cae5 	.word	0x0800cae5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cad0:	6839      	ldr	r1, [r7, #0]
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fa3c 	bl	800cf50 <USBD_GetDescriptor>
          break;
 800cad8:	e024      	b.n	800cb24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cada:	6839      	ldr	r1, [r7, #0]
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fba1 	bl	800d224 <USBD_SetAddress>
          break;
 800cae2:	e01f      	b.n	800cb24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cae4:	6839      	ldr	r1, [r7, #0]
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fbe0 	bl	800d2ac <USBD_SetConfig>
 800caec:	4603      	mov	r3, r0
 800caee:	73fb      	strb	r3, [r7, #15]
          break;
 800caf0:	e018      	b.n	800cb24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800caf2:	6839      	ldr	r1, [r7, #0]
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fc83 	bl	800d400 <USBD_GetConfig>
          break;
 800cafa:	e013      	b.n	800cb24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cafc:	6839      	ldr	r1, [r7, #0]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fcb4 	bl	800d46c <USBD_GetStatus>
          break;
 800cb04:	e00e      	b.n	800cb24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fce3 	bl	800d4d4 <USBD_SetFeature>
          break;
 800cb0e:	e009      	b.n	800cb24 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fd07 	bl	800d526 <USBD_ClrFeature>
          break;
 800cb18:	e004      	b.n	800cb24 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fd5e 	bl	800d5de <USBD_CtlError>
          break;
 800cb22:	bf00      	nop
      }
      break;
 800cb24:	e004      	b.n	800cb30 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fd58 	bl	800d5de <USBD_CtlError>
      break;
 800cb2e:	bf00      	nop
  }

  return ret;
 800cb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop

0800cb3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb52:	2b40      	cmp	r3, #64	; 0x40
 800cb54:	d005      	beq.n	800cb62 <USBD_StdItfReq+0x26>
 800cb56:	2b40      	cmp	r3, #64	; 0x40
 800cb58:	d852      	bhi.n	800cc00 <USBD_StdItfReq+0xc4>
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <USBD_StdItfReq+0x26>
 800cb5e:	2b20      	cmp	r3, #32
 800cb60:	d14e      	bne.n	800cc00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	3b01      	subs	r3, #1
 800cb6c:	2b02      	cmp	r3, #2
 800cb6e:	d840      	bhi.n	800cbf2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	889b      	ldrh	r3, [r3, #4]
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d836      	bhi.n	800cbe8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	889b      	ldrh	r3, [r3, #4]
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	4619      	mov	r1, r3
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f7ff fed9 	bl	800c93a <USBD_CoreFindIF>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb8c:	7bbb      	ldrb	r3, [r7, #14]
 800cb8e:	2bff      	cmp	r3, #255	; 0xff
 800cb90:	d01d      	beq.n	800cbce <USBD_StdItfReq+0x92>
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d11a      	bne.n	800cbce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cb98:	7bba      	ldrb	r2, [r7, #14]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	32ae      	adds	r2, #174	; 0xae
 800cb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00f      	beq.n	800cbc8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cba8:	7bba      	ldrb	r2, [r7, #14]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cbb0:	7bba      	ldrb	r2, [r7, #14]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	32ae      	adds	r2, #174	; 0xae
 800cbb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	4798      	blx	r3
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cbc6:	e004      	b.n	800cbd2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cbc8:	2303      	movs	r3, #3
 800cbca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cbcc:	e001      	b.n	800cbd2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	88db      	ldrh	r3, [r3, #6]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d110      	bne.n	800cbfc <USBD_StdItfReq+0xc0>
 800cbda:	7bfb      	ldrb	r3, [r7, #15]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10d      	bne.n	800cbfc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fdc7 	bl	800d774 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cbe6:	e009      	b.n	800cbfc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fcf7 	bl	800d5de <USBD_CtlError>
          break;
 800cbf0:	e004      	b.n	800cbfc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fcf2 	bl	800d5de <USBD_CtlError>
          break;
 800cbfa:	e000      	b.n	800cbfe <USBD_StdItfReq+0xc2>
          break;
 800cbfc:	bf00      	nop
      }
      break;
 800cbfe:	e004      	b.n	800cc0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 fceb 	bl	800d5de <USBD_CtlError>
      break;
 800cc08:	bf00      	nop
  }

  return ret;
 800cc0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	889b      	ldrh	r3, [r3, #4]
 800cc26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc30:	2b40      	cmp	r3, #64	; 0x40
 800cc32:	d007      	beq.n	800cc44 <USBD_StdEPReq+0x30>
 800cc34:	2b40      	cmp	r3, #64	; 0x40
 800cc36:	f200 817f 	bhi.w	800cf38 <USBD_StdEPReq+0x324>
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d02a      	beq.n	800cc94 <USBD_StdEPReq+0x80>
 800cc3e:	2b20      	cmp	r3, #32
 800cc40:	f040 817a 	bne.w	800cf38 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc44:	7bbb      	ldrb	r3, [r7, #14]
 800cc46:	4619      	mov	r1, r3
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f7ff fe83 	bl	800c954 <USBD_CoreFindEP>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc52:	7b7b      	ldrb	r3, [r7, #13]
 800cc54:	2bff      	cmp	r3, #255	; 0xff
 800cc56:	f000 8174 	beq.w	800cf42 <USBD_StdEPReq+0x32e>
 800cc5a:	7b7b      	ldrb	r3, [r7, #13]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f040 8170 	bne.w	800cf42 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cc62:	7b7a      	ldrb	r2, [r7, #13]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cc6a:	7b7a      	ldrb	r2, [r7, #13]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	32ae      	adds	r2, #174	; 0xae
 800cc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f000 8163 	beq.w	800cf42 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cc7c:	7b7a      	ldrb	r2, [r7, #13]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	32ae      	adds	r2, #174	; 0xae
 800cc82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	4798      	blx	r3
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cc92:	e156      	b.n	800cf42 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	785b      	ldrb	r3, [r3, #1]
 800cc98:	2b03      	cmp	r3, #3
 800cc9a:	d008      	beq.n	800ccae <USBD_StdEPReq+0x9a>
 800cc9c:	2b03      	cmp	r3, #3
 800cc9e:	f300 8145 	bgt.w	800cf2c <USBD_StdEPReq+0x318>
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f000 809b 	beq.w	800cdde <USBD_StdEPReq+0x1ca>
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d03c      	beq.n	800cd26 <USBD_StdEPReq+0x112>
 800ccac:	e13e      	b.n	800cf2c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d002      	beq.n	800ccc0 <USBD_StdEPReq+0xac>
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	d016      	beq.n	800ccec <USBD_StdEPReq+0xd8>
 800ccbe:	e02c      	b.n	800cd1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccc0:	7bbb      	ldrb	r3, [r7, #14]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d00d      	beq.n	800cce2 <USBD_StdEPReq+0xce>
 800ccc6:	7bbb      	ldrb	r3, [r7, #14]
 800ccc8:	2b80      	cmp	r3, #128	; 0x80
 800ccca:	d00a      	beq.n	800cce2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
 800ccce:	4619      	mov	r1, r3
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f001 f97d 	bl	800dfd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccd6:	2180      	movs	r1, #128	; 0x80
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f001 f979 	bl	800dfd0 <USBD_LL_StallEP>
 800ccde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cce0:	e020      	b.n	800cd24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fc7a 	bl	800d5de <USBD_CtlError>
              break;
 800ccea:	e01b      	b.n	800cd24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	885b      	ldrh	r3, [r3, #2]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10e      	bne.n	800cd12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <USBD_StdEPReq+0xfe>
 800ccfa:	7bbb      	ldrb	r3, [r7, #14]
 800ccfc:	2b80      	cmp	r3, #128	; 0x80
 800ccfe:	d008      	beq.n	800cd12 <USBD_StdEPReq+0xfe>
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	88db      	ldrh	r3, [r3, #6]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d104      	bne.n	800cd12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd08:	7bbb      	ldrb	r3, [r7, #14]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f001 f95f 	bl	800dfd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 fd2e 	bl	800d774 <USBD_CtlSendStatus>

              break;
 800cd18:	e004      	b.n	800cd24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fc5e 	bl	800d5de <USBD_CtlError>
              break;
 800cd22:	bf00      	nop
          }
          break;
 800cd24:	e107      	b.n	800cf36 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd2c:	b2db      	uxtb	r3, r3
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d002      	beq.n	800cd38 <USBD_StdEPReq+0x124>
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d016      	beq.n	800cd64 <USBD_StdEPReq+0x150>
 800cd36:	e04b      	b.n	800cdd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd38:	7bbb      	ldrb	r3, [r7, #14]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00d      	beq.n	800cd5a <USBD_StdEPReq+0x146>
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
 800cd40:	2b80      	cmp	r3, #128	; 0x80
 800cd42:	d00a      	beq.n	800cd5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd44:	7bbb      	ldrb	r3, [r7, #14]
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f001 f941 	bl	800dfd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd4e:	2180      	movs	r1, #128	; 0x80
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f001 f93d 	bl	800dfd0 <USBD_LL_StallEP>
 800cd56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd58:	e040      	b.n	800cddc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cd5a:	6839      	ldr	r1, [r7, #0]
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 fc3e 	bl	800d5de <USBD_CtlError>
              break;
 800cd62:	e03b      	b.n	800cddc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	885b      	ldrh	r3, [r3, #2]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d136      	bne.n	800cdda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd6c:	7bbb      	ldrb	r3, [r7, #14]
 800cd6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d004      	beq.n	800cd80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd76:	7bbb      	ldrb	r3, [r7, #14]
 800cd78:	4619      	mov	r1, r3
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f001 f947 	bl	800e00e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 fcf7 	bl	800d774 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd86:	7bbb      	ldrb	r3, [r7, #14]
 800cd88:	4619      	mov	r1, r3
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff fde2 	bl	800c954 <USBD_CoreFindEP>
 800cd90:	4603      	mov	r3, r0
 800cd92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd94:	7b7b      	ldrb	r3, [r7, #13]
 800cd96:	2bff      	cmp	r3, #255	; 0xff
 800cd98:	d01f      	beq.n	800cdda <USBD_StdEPReq+0x1c6>
 800cd9a:	7b7b      	ldrb	r3, [r7, #13]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d11c      	bne.n	800cdda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cda0:	7b7a      	ldrb	r2, [r7, #13]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cda8:	7b7a      	ldrb	r2, [r7, #13]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	32ae      	adds	r2, #174	; 0xae
 800cdae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d010      	beq.n	800cdda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cdb8:	7b7a      	ldrb	r2, [r7, #13]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	32ae      	adds	r2, #174	; 0xae
 800cdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	4798      	blx	r3
 800cdca:	4603      	mov	r3, r0
 800cdcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cdce:	e004      	b.n	800cdda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cdd0:	6839      	ldr	r1, [r7, #0]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 fc03 	bl	800d5de <USBD_CtlError>
              break;
 800cdd8:	e000      	b.n	800cddc <USBD_StdEPReq+0x1c8>
              break;
 800cdda:	bf00      	nop
          }
          break;
 800cddc:	e0ab      	b.n	800cf36 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b02      	cmp	r3, #2
 800cde8:	d002      	beq.n	800cdf0 <USBD_StdEPReq+0x1dc>
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d032      	beq.n	800ce54 <USBD_StdEPReq+0x240>
 800cdee:	e097      	b.n	800cf20 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdf0:	7bbb      	ldrb	r3, [r7, #14]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d007      	beq.n	800ce06 <USBD_StdEPReq+0x1f2>
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
 800cdf8:	2b80      	cmp	r3, #128	; 0x80
 800cdfa:	d004      	beq.n	800ce06 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cdfc:	6839      	ldr	r1, [r7, #0]
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 fbed 	bl	800d5de <USBD_CtlError>
                break;
 800ce04:	e091      	b.n	800cf2a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	da0b      	bge.n	800ce26 <USBD_StdEPReq+0x212>
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
 800ce10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce14:	4613      	mov	r3, r2
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	4413      	add	r3, r2
 800ce1a:	009b      	lsls	r3, r3, #2
 800ce1c:	3310      	adds	r3, #16
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4413      	add	r3, r2
 800ce22:	3304      	adds	r3, #4
 800ce24:	e00b      	b.n	800ce3e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce26:	7bbb      	ldrb	r3, [r7, #14]
 800ce28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	4413      	add	r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	2200      	movs	r2, #0
 800ce44:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	2202      	movs	r2, #2
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 fc37 	bl	800d6c0 <USBD_CtlSendData>
              break;
 800ce52:	e06a      	b.n	800cf2a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ce54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	da11      	bge.n	800ce80 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
 800ce5e:	f003 020f 	and.w	r2, r3, #15
 800ce62:	6879      	ldr	r1, [r7, #4]
 800ce64:	4613      	mov	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	440b      	add	r3, r1
 800ce6e:	3324      	adds	r3, #36	; 0x24
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d117      	bne.n	800cea6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 fbb0 	bl	800d5de <USBD_CtlError>
                  break;
 800ce7e:	e054      	b.n	800cf2a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ce80:	7bbb      	ldrb	r3, [r7, #14]
 800ce82:	f003 020f 	and.w	r2, r3, #15
 800ce86:	6879      	ldr	r1, [r7, #4]
 800ce88:	4613      	mov	r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	4413      	add	r3, r2
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	440b      	add	r3, r1
 800ce92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d104      	bne.n	800cea6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fb9d 	bl	800d5de <USBD_CtlError>
                  break;
 800cea4:	e041      	b.n	800cf2a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cea6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	da0b      	bge.n	800cec6 <USBD_StdEPReq+0x2b2>
 800ceae:	7bbb      	ldrb	r3, [r7, #14]
 800ceb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	3310      	adds	r3, #16
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	4413      	add	r3, r2
 800cec2:	3304      	adds	r3, #4
 800cec4:	e00b      	b.n	800cede <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cecc:	4613      	mov	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	4413      	add	r3, r2
 800cedc:	3304      	adds	r3, #4
 800cede:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <USBD_StdEPReq+0x2d8>
 800cee6:	7bbb      	ldrb	r3, [r7, #14]
 800cee8:	2b80      	cmp	r3, #128	; 0x80
 800ceea:	d103      	bne.n	800cef4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	2200      	movs	r2, #0
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	e00e      	b.n	800cf12 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
 800cef6:	4619      	mov	r1, r3
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f001 f8a7 	bl	800e04c <USBD_LL_IsStallEP>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d003      	beq.n	800cf0c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	2201      	movs	r2, #1
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	e002      	b.n	800cf12 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	2202      	movs	r2, #2
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 fbd1 	bl	800d6c0 <USBD_CtlSendData>
              break;
 800cf1e:	e004      	b.n	800cf2a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fb5b 	bl	800d5de <USBD_CtlError>
              break;
 800cf28:	bf00      	nop
          }
          break;
 800cf2a:	e004      	b.n	800cf36 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cf2c:	6839      	ldr	r1, [r7, #0]
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fb55 	bl	800d5de <USBD_CtlError>
          break;
 800cf34:	bf00      	nop
      }
      break;
 800cf36:	e005      	b.n	800cf44 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fb4f 	bl	800d5de <USBD_CtlError>
      break;
 800cf40:	e000      	b.n	800cf44 <USBD_StdEPReq+0x330>
      break;
 800cf42:	bf00      	nop
  }

  return ret;
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
	...

0800cf50 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf62:	2300      	movs	r3, #0
 800cf64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	885b      	ldrh	r3, [r3, #2]
 800cf6a:	0a1b      	lsrs	r3, r3, #8
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	2b06      	cmp	r3, #6
 800cf72:	f200 8128 	bhi.w	800d1c6 <USBD_GetDescriptor+0x276>
 800cf76:	a201      	add	r2, pc, #4	; (adr r2, 800cf7c <USBD_GetDescriptor+0x2c>)
 800cf78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf7c:	0800cf99 	.word	0x0800cf99
 800cf80:	0800cfb1 	.word	0x0800cfb1
 800cf84:	0800cff1 	.word	0x0800cff1
 800cf88:	0800d1c7 	.word	0x0800d1c7
 800cf8c:	0800d1c7 	.word	0x0800d1c7
 800cf90:	0800d167 	.word	0x0800d167
 800cf94:	0800d193 	.word	0x0800d193
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	7c12      	ldrb	r2, [r2, #16]
 800cfa4:	f107 0108 	add.w	r1, r7, #8
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4798      	blx	r3
 800cfac:	60f8      	str	r0, [r7, #12]
      break;
 800cfae:	e112      	b.n	800d1d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	7c1b      	ldrb	r3, [r3, #16]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d10d      	bne.n	800cfd4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfc0:	f107 0208 	add.w	r2, r7, #8
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	4798      	blx	r3
 800cfc8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	2202      	movs	r2, #2
 800cfd0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cfd2:	e100      	b.n	800d1d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfdc:	f107 0208 	add.w	r2, r7, #8
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	4798      	blx	r3
 800cfe4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	2202      	movs	r2, #2
 800cfec:	701a      	strb	r2, [r3, #0]
      break;
 800cfee:	e0f2      	b.n	800d1d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	885b      	ldrh	r3, [r3, #2]
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b05      	cmp	r3, #5
 800cff8:	f200 80ac 	bhi.w	800d154 <USBD_GetDescriptor+0x204>
 800cffc:	a201      	add	r2, pc, #4	; (adr r2, 800d004 <USBD_GetDescriptor+0xb4>)
 800cffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d002:	bf00      	nop
 800d004:	0800d01d 	.word	0x0800d01d
 800d008:	0800d051 	.word	0x0800d051
 800d00c:	0800d085 	.word	0x0800d085
 800d010:	0800d0b9 	.word	0x0800d0b9
 800d014:	0800d0ed 	.word	0x0800d0ed
 800d018:	0800d121 	.word	0x0800d121
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00b      	beq.n	800d040 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	7c12      	ldrb	r2, [r2, #16]
 800d034:	f107 0108 	add.w	r1, r7, #8
 800d038:	4610      	mov	r0, r2
 800d03a:	4798      	blx	r3
 800d03c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d03e:	e091      	b.n	800d164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 facb 	bl	800d5de <USBD_CtlError>
            err++;
 800d048:	7afb      	ldrb	r3, [r7, #11]
 800d04a:	3301      	adds	r3, #1
 800d04c:	72fb      	strb	r3, [r7, #11]
          break;
 800d04e:	e089      	b.n	800d164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d056:	689b      	ldr	r3, [r3, #8]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d00b      	beq.n	800d074 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	7c12      	ldrb	r2, [r2, #16]
 800d068:	f107 0108 	add.w	r1, r7, #8
 800d06c:	4610      	mov	r0, r2
 800d06e:	4798      	blx	r3
 800d070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d072:	e077      	b.n	800d164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fab1 	bl	800d5de <USBD_CtlError>
            err++;
 800d07c:	7afb      	ldrb	r3, [r7, #11]
 800d07e:	3301      	adds	r3, #1
 800d080:	72fb      	strb	r3, [r7, #11]
          break;
 800d082:	e06f      	b.n	800d164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d00b      	beq.n	800d0a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	7c12      	ldrb	r2, [r2, #16]
 800d09c:	f107 0108 	add.w	r1, r7, #8
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	4798      	blx	r3
 800d0a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0a6:	e05d      	b.n	800d164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0a8:	6839      	ldr	r1, [r7, #0]
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 fa97 	bl	800d5de <USBD_CtlError>
            err++;
 800d0b0:	7afb      	ldrb	r3, [r7, #11]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d0b6:	e055      	b.n	800d164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0be:	691b      	ldr	r3, [r3, #16]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00b      	beq.n	800d0dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	7c12      	ldrb	r2, [r2, #16]
 800d0d0:	f107 0108 	add.w	r1, r7, #8
 800d0d4:	4610      	mov	r0, r2
 800d0d6:	4798      	blx	r3
 800d0d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0da:	e043      	b.n	800d164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 fa7d 	bl	800d5de <USBD_CtlError>
            err++;
 800d0e4:	7afb      	ldrb	r3, [r7, #11]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ea:	e03b      	b.n	800d164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0f2:	695b      	ldr	r3, [r3, #20]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00b      	beq.n	800d110 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0fe:	695b      	ldr	r3, [r3, #20]
 800d100:	687a      	ldr	r2, [r7, #4]
 800d102:	7c12      	ldrb	r2, [r2, #16]
 800d104:	f107 0108 	add.w	r1, r7, #8
 800d108:	4610      	mov	r0, r2
 800d10a:	4798      	blx	r3
 800d10c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d10e:	e029      	b.n	800d164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d110:	6839      	ldr	r1, [r7, #0]
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 fa63 	bl	800d5de <USBD_CtlError>
            err++;
 800d118:	7afb      	ldrb	r3, [r7, #11]
 800d11a:	3301      	adds	r3, #1
 800d11c:	72fb      	strb	r3, [r7, #11]
          break;
 800d11e:	e021      	b.n	800d164 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d126:	699b      	ldr	r3, [r3, #24]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00b      	beq.n	800d144 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d132:	699b      	ldr	r3, [r3, #24]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	7c12      	ldrb	r2, [r2, #16]
 800d138:	f107 0108 	add.w	r1, r7, #8
 800d13c:	4610      	mov	r0, r2
 800d13e:	4798      	blx	r3
 800d140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d142:	e00f      	b.n	800d164 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 fa49 	bl	800d5de <USBD_CtlError>
            err++;
 800d14c:	7afb      	ldrb	r3, [r7, #11]
 800d14e:	3301      	adds	r3, #1
 800d150:	72fb      	strb	r3, [r7, #11]
          break;
 800d152:	e007      	b.n	800d164 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fa41 	bl	800d5de <USBD_CtlError>
          err++;
 800d15c:	7afb      	ldrb	r3, [r7, #11]
 800d15e:	3301      	adds	r3, #1
 800d160:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d162:	bf00      	nop
      }
      break;
 800d164:	e037      	b.n	800d1d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	7c1b      	ldrb	r3, [r3, #16]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d109      	bne.n	800d182 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d176:	f107 0208 	add.w	r2, r7, #8
 800d17a:	4610      	mov	r0, r2
 800d17c:	4798      	blx	r3
 800d17e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d180:	e029      	b.n	800d1d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fa2a 	bl	800d5de <USBD_CtlError>
        err++;
 800d18a:	7afb      	ldrb	r3, [r7, #11]
 800d18c:	3301      	adds	r3, #1
 800d18e:	72fb      	strb	r3, [r7, #11]
      break;
 800d190:	e021      	b.n	800d1d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	7c1b      	ldrb	r3, [r3, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d10d      	bne.n	800d1b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a2:	f107 0208 	add.w	r2, r7, #8
 800d1a6:	4610      	mov	r0, r2
 800d1a8:	4798      	blx	r3
 800d1aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	2207      	movs	r2, #7
 800d1b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1b4:	e00f      	b.n	800d1d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fa10 	bl	800d5de <USBD_CtlError>
        err++;
 800d1be:	7afb      	ldrb	r3, [r7, #11]
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	72fb      	strb	r3, [r7, #11]
      break;
 800d1c4:	e007      	b.n	800d1d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d1c6:	6839      	ldr	r1, [r7, #0]
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fa08 	bl	800d5de <USBD_CtlError>
      err++;
 800d1ce:	7afb      	ldrb	r3, [r7, #11]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	72fb      	strb	r3, [r7, #11]
      break;
 800d1d4:	bf00      	nop
  }

  if (err != 0U)
 800d1d6:	7afb      	ldrb	r3, [r7, #11]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d11e      	bne.n	800d21a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	88db      	ldrh	r3, [r3, #6]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d016      	beq.n	800d212 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d1e4:	893b      	ldrh	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d00e      	beq.n	800d208 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	88da      	ldrh	r2, [r3, #6]
 800d1ee:	893b      	ldrh	r3, [r7, #8]
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	bf28      	it	cs
 800d1f4:	4613      	movcs	r3, r2
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d1fa:	893b      	ldrh	r3, [r7, #8]
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	68f9      	ldr	r1, [r7, #12]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 fa5d 	bl	800d6c0 <USBD_CtlSendData>
 800d206:	e009      	b.n	800d21c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 f9e7 	bl	800d5de <USBD_CtlError>
 800d210:	e004      	b.n	800d21c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 faae 	bl	800d774 <USBD_CtlSendStatus>
 800d218:	e000      	b.n	800d21c <USBD_GetDescriptor+0x2cc>
    return;
 800d21a:	bf00      	nop
  }
}
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop

0800d224 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	889b      	ldrh	r3, [r3, #4]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d131      	bne.n	800d29a <USBD_SetAddress+0x76>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	88db      	ldrh	r3, [r3, #6]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d12d      	bne.n	800d29a <USBD_SetAddress+0x76>
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	885b      	ldrh	r3, [r3, #2]
 800d242:	2b7f      	cmp	r3, #127	; 0x7f
 800d244:	d829      	bhi.n	800d29a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	885b      	ldrh	r3, [r3, #2]
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d250:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	d104      	bne.n	800d268 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f9bc 	bl	800d5de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d266:	e01d      	b.n	800d2a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	7bfa      	ldrb	r2, [r7, #15]
 800d26c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d270:	7bfb      	ldrb	r3, [r7, #15]
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 ff15 	bl	800e0a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fa7a 	bl	800d774 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d004      	beq.n	800d290 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2202      	movs	r2, #2
 800d28a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d28e:	e009      	b.n	800d2a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2201      	movs	r2, #1
 800d294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d298:	e004      	b.n	800d2a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f99e 	bl	800d5de <USBD_CtlError>
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	bf00      	nop
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	885b      	ldrh	r3, [r3, #2]
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	4b4e      	ldr	r3, [pc, #312]	; (800d3fc <USBD_SetConfig+0x150>)
 800d2c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d2c4:	4b4d      	ldr	r3, [pc, #308]	; (800d3fc <USBD_SetConfig+0x150>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d905      	bls.n	800d2d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d2cc:	6839      	ldr	r1, [r7, #0]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f985 	bl	800d5de <USBD_CtlError>
    return USBD_FAIL;
 800d2d4:	2303      	movs	r3, #3
 800d2d6:	e08c      	b.n	800d3f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	d002      	beq.n	800d2ea <USBD_SetConfig+0x3e>
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d029      	beq.n	800d33c <USBD_SetConfig+0x90>
 800d2e8:	e075      	b.n	800d3d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d2ea:	4b44      	ldr	r3, [pc, #272]	; (800d3fc <USBD_SetConfig+0x150>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d020      	beq.n	800d334 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d2f2:	4b42      	ldr	r3, [pc, #264]	; (800d3fc <USBD_SetConfig+0x150>)
 800d2f4:	781b      	ldrb	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2fc:	4b3f      	ldr	r3, [pc, #252]	; (800d3fc <USBD_SetConfig+0x150>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	4619      	mov	r1, r3
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7fe ffe1 	bl	800c2ca <USBD_SetClassConfig>
 800d308:	4603      	mov	r3, r0
 800d30a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d30c:	7bfb      	ldrb	r3, [r7, #15]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d008      	beq.n	800d324 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d312:	6839      	ldr	r1, [r7, #0]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 f962 	bl	800d5de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2202      	movs	r2, #2
 800d31e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d322:	e065      	b.n	800d3f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fa25 	bl	800d774 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2203      	movs	r2, #3
 800d32e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d332:	e05d      	b.n	800d3f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 fa1d 	bl	800d774 <USBD_CtlSendStatus>
      break;
 800d33a:	e059      	b.n	800d3f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d33c:	4b2f      	ldr	r3, [pc, #188]	; (800d3fc <USBD_SetConfig+0x150>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d112      	bne.n	800d36a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2202      	movs	r2, #2
 800d348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d34c:	4b2b      	ldr	r3, [pc, #172]	; (800d3fc <USBD_SetConfig+0x150>)
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	461a      	mov	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d356:	4b29      	ldr	r3, [pc, #164]	; (800d3fc <USBD_SetConfig+0x150>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f7fe ffd0 	bl	800c302 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 fa06 	bl	800d774 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d368:	e042      	b.n	800d3f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d36a:	4b24      	ldr	r3, [pc, #144]	; (800d3fc <USBD_SetConfig+0x150>)
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	461a      	mov	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	685b      	ldr	r3, [r3, #4]
 800d374:	429a      	cmp	r2, r3
 800d376:	d02a      	beq.n	800d3ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	4619      	mov	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7fe ffbe 	bl	800c302 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d386:	4b1d      	ldr	r3, [pc, #116]	; (800d3fc <USBD_SetConfig+0x150>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d390:	4b1a      	ldr	r3, [pc, #104]	; (800d3fc <USBD_SetConfig+0x150>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	4619      	mov	r1, r3
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f7fe ff97 	bl	800c2ca <USBD_SetClassConfig>
 800d39c:	4603      	mov	r3, r0
 800d39e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d00f      	beq.n	800d3c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f918 	bl	800d5de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7fe ffa3 	bl	800c302 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2202      	movs	r2, #2
 800d3c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3c4:	e014      	b.n	800d3f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 f9d4 	bl	800d774 <USBD_CtlSendStatus>
      break;
 800d3cc:	e010      	b.n	800d3f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f9d0 	bl	800d774 <USBD_CtlSendStatus>
      break;
 800d3d4:	e00c      	b.n	800d3f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f900 	bl	800d5de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3de:	4b07      	ldr	r3, [pc, #28]	; (800d3fc <USBD_SetConfig+0x150>)
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f7fe ff8c 	bl	800c302 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d3ea:	2303      	movs	r3, #3
 800d3ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d3ee:	bf00      	nop
  }

  return ret;
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	20000b68 	.word	0x20000b68

0800d400 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	88db      	ldrh	r3, [r3, #6]
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d004      	beq.n	800d41c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d412:	6839      	ldr	r1, [r7, #0]
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 f8e2 	bl	800d5de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d41a:	e023      	b.n	800d464 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b02      	cmp	r3, #2
 800d426:	dc02      	bgt.n	800d42e <USBD_GetConfig+0x2e>
 800d428:	2b00      	cmp	r3, #0
 800d42a:	dc03      	bgt.n	800d434 <USBD_GetConfig+0x34>
 800d42c:	e015      	b.n	800d45a <USBD_GetConfig+0x5a>
 800d42e:	2b03      	cmp	r3, #3
 800d430:	d00b      	beq.n	800d44a <USBD_GetConfig+0x4a>
 800d432:	e012      	b.n	800d45a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	3308      	adds	r3, #8
 800d43e:	2201      	movs	r2, #1
 800d440:	4619      	mov	r1, r3
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f93c 	bl	800d6c0 <USBD_CtlSendData>
        break;
 800d448:	e00c      	b.n	800d464 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	3304      	adds	r3, #4
 800d44e:	2201      	movs	r2, #1
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f934 	bl	800d6c0 <USBD_CtlSendData>
        break;
 800d458:	e004      	b.n	800d464 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d45a:	6839      	ldr	r1, [r7, #0]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 f8be 	bl	800d5de <USBD_CtlError>
        break;
 800d462:	bf00      	nop
}
 800d464:	bf00      	nop
 800d466:	3708      	adds	r7, #8
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	3b01      	subs	r3, #1
 800d480:	2b02      	cmp	r3, #2
 800d482:	d81e      	bhi.n	800d4c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	88db      	ldrh	r3, [r3, #6]
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d004      	beq.n	800d496 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f8a5 	bl	800d5de <USBD_CtlError>
        break;
 800d494:	e01a      	b.n	800d4cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2201      	movs	r2, #1
 800d49a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d005      	beq.n	800d4b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	f043 0202 	orr.w	r2, r3, #2
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	330c      	adds	r3, #12
 800d4b6:	2202      	movs	r2, #2
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f900 	bl	800d6c0 <USBD_CtlSendData>
      break;
 800d4c0:	e004      	b.n	800d4cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 f88a 	bl	800d5de <USBD_CtlError>
      break;
 800d4ca:	bf00      	nop
  }
}
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	885b      	ldrh	r3, [r3, #2]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d107      	bne.n	800d4f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f940 	bl	800d774 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d4f4:	e013      	b.n	800d51e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	885b      	ldrh	r3, [r3, #2]
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d10b      	bne.n	800d516 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	889b      	ldrh	r3, [r3, #4]
 800d502:	0a1b      	lsrs	r3, r3, #8
 800d504:	b29b      	uxth	r3, r3
 800d506:	b2da      	uxtb	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f930 	bl	800d774 <USBD_CtlSendStatus>
}
 800d514:	e003      	b.n	800d51e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d516:	6839      	ldr	r1, [r7, #0]
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f860 	bl	800d5de <USBD_CtlError>
}
 800d51e:	bf00      	nop
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d536:	b2db      	uxtb	r3, r3
 800d538:	3b01      	subs	r3, #1
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d80b      	bhi.n	800d556 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	885b      	ldrh	r3, [r3, #2]
 800d542:	2b01      	cmp	r3, #1
 800d544:	d10c      	bne.n	800d560 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f910 	bl	800d774 <USBD_CtlSendStatus>
      }
      break;
 800d554:	e004      	b.n	800d560 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d556:	6839      	ldr	r1, [r7, #0]
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 f840 	bl	800d5de <USBD_CtlError>
      break;
 800d55e:	e000      	b.n	800d562 <USBD_ClrFeature+0x3c>
      break;
 800d560:	bf00      	nop
  }
}
 800d562:	bf00      	nop
 800d564:	3708      	adds	r7, #8
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b084      	sub	sp, #16
 800d56e:	af00      	add	r7, sp, #0
 800d570:	6078      	str	r0, [r7, #4]
 800d572:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	781a      	ldrb	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3301      	adds	r3, #1
 800d584:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	781a      	ldrb	r2, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3301      	adds	r3, #1
 800d592:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d594:	68f8      	ldr	r0, [r7, #12]
 800d596:	f7ff fa41 	bl	800ca1c <SWAPBYTE>
 800d59a:	4603      	mov	r3, r0
 800d59c:	461a      	mov	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f7ff fa34 	bl	800ca1c <SWAPBYTE>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7ff fa27 	bl	800ca1c <SWAPBYTE>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	80da      	strh	r2, [r3, #6]
}
 800d5d6:	bf00      	nop
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
 800d5e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5e8:	2180      	movs	r1, #128	; 0x80
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fcf0 	bl	800dfd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d5f0:	2100      	movs	r1, #0
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 fcec 	bl	800dfd0 <USBD_LL_StallEP>
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b086      	sub	sp, #24
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d60c:	2300      	movs	r3, #0
 800d60e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d036      	beq.n	800d684 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d61a:	6938      	ldr	r0, [r7, #16]
 800d61c:	f000 f836 	bl	800d68c <USBD_GetLen>
 800d620:	4603      	mov	r3, r0
 800d622:	3301      	adds	r3, #1
 800d624:	b29b      	uxth	r3, r3
 800d626:	005b      	lsls	r3, r3, #1
 800d628:	b29a      	uxth	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d62e:	7dfb      	ldrb	r3, [r7, #23]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	4413      	add	r3, r2
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	7812      	ldrb	r2, [r2, #0]
 800d638:	701a      	strb	r2, [r3, #0]
  idx++;
 800d63a:	7dfb      	ldrb	r3, [r7, #23]
 800d63c:	3301      	adds	r3, #1
 800d63e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d640:	7dfb      	ldrb	r3, [r7, #23]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	4413      	add	r3, r2
 800d646:	2203      	movs	r2, #3
 800d648:	701a      	strb	r2, [r3, #0]
  idx++;
 800d64a:	7dfb      	ldrb	r3, [r7, #23]
 800d64c:	3301      	adds	r3, #1
 800d64e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d650:	e013      	b.n	800d67a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d652:	7dfb      	ldrb	r3, [r7, #23]
 800d654:	68ba      	ldr	r2, [r7, #8]
 800d656:	4413      	add	r3, r2
 800d658:	693a      	ldr	r2, [r7, #16]
 800d65a:	7812      	ldrb	r2, [r2, #0]
 800d65c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	3301      	adds	r3, #1
 800d662:	613b      	str	r3, [r7, #16]
    idx++;
 800d664:	7dfb      	ldrb	r3, [r7, #23]
 800d666:	3301      	adds	r3, #1
 800d668:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d66a:	7dfb      	ldrb	r3, [r7, #23]
 800d66c:	68ba      	ldr	r2, [r7, #8]
 800d66e:	4413      	add	r3, r2
 800d670:	2200      	movs	r2, #0
 800d672:	701a      	strb	r2, [r3, #0]
    idx++;
 800d674:	7dfb      	ldrb	r3, [r7, #23]
 800d676:	3301      	adds	r3, #1
 800d678:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d1e7      	bne.n	800d652 <USBD_GetString+0x52>
 800d682:	e000      	b.n	800d686 <USBD_GetString+0x86>
    return;
 800d684:	bf00      	nop
  }
}
 800d686:	3718      	adds	r7, #24
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b085      	sub	sp, #20
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d694:	2300      	movs	r3, #0
 800d696:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d69c:	e005      	b.n	800d6aa <USBD_GetLen+0x1e>
  {
    len++;
 800d69e:	7bfb      	ldrb	r3, [r7, #15]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d1f5      	bne.n	800d69e <USBD_GetLen+0x12>
  }

  return len;
 800d6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3714      	adds	r7, #20
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2202      	movs	r2, #2
 800d6d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	68f8      	ldr	r0, [r7, #12]
 800d6e8:	f000 fcfb 	bl	800e0e2 <USBD_LL_Transmit>

  return USBD_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b084      	sub	sp, #16
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	60f8      	str	r0, [r7, #12]
 800d6fe:	60b9      	str	r1, [r7, #8]
 800d700:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	2100      	movs	r1, #0
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f000 fcea 	bl	800e0e2 <USBD_LL_Transmit>

  return USBD_OK;
 800d70e:	2300      	movs	r3, #0
}
 800d710:	4618      	mov	r0, r3
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	60b9      	str	r1, [r7, #8]
 800d722:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2203      	movs	r2, #3
 800d728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68ba      	ldr	r2, [r7, #8]
 800d740:	2100      	movs	r1, #0
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f000 fcee 	bl	800e124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3710      	adds	r7, #16
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b084      	sub	sp, #16
 800d756:	af00      	add	r7, sp, #0
 800d758:	60f8      	str	r0, [r7, #12]
 800d75a:	60b9      	str	r1, [r7, #8]
 800d75c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	2100      	movs	r1, #0
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 fcdd 	bl	800e124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2204      	movs	r2, #4
 800d780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d784:	2300      	movs	r3, #0
 800d786:	2200      	movs	r2, #0
 800d788:	2100      	movs	r1, #0
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 fca9 	bl	800e0e2 <USBD_LL_Transmit>

  return USBD_OK;
 800d790:	2300      	movs	r3, #0
}
 800d792:	4618      	mov	r0, r3
 800d794:	3708      	adds	r7, #8
 800d796:	46bd      	mov	sp, r7
 800d798:	bd80      	pop	{r7, pc}

0800d79a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d79a:	b580      	push	{r7, lr}
 800d79c:	b082      	sub	sp, #8
 800d79e:	af00      	add	r7, sp, #0
 800d7a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2205      	movs	r2, #5
 800d7a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 fcb7 	bl	800e124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	4912      	ldr	r1, [pc, #72]	; (800d810 <MX_USB_DEVICE_Init+0x50>)
 800d7c8:	4812      	ldr	r0, [pc, #72]	; (800d814 <MX_USB_DEVICE_Init+0x54>)
 800d7ca:	f7fe fd01 	bl	800c1d0 <USBD_Init>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d7d4:	f7f3 fcf8 	bl	80011c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d7d8:	490f      	ldr	r1, [pc, #60]	; (800d818 <MX_USB_DEVICE_Init+0x58>)
 800d7da:	480e      	ldr	r0, [pc, #56]	; (800d814 <MX_USB_DEVICE_Init+0x54>)
 800d7dc:	f7fe fd28 	bl	800c230 <USBD_RegisterClass>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d001      	beq.n	800d7ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d7e6:	f7f3 fcef 	bl	80011c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d7ea:	490c      	ldr	r1, [pc, #48]	; (800d81c <MX_USB_DEVICE_Init+0x5c>)
 800d7ec:	4809      	ldr	r0, [pc, #36]	; (800d814 <MX_USB_DEVICE_Init+0x54>)
 800d7ee:	f7fe fc1f 	bl	800c030 <USBD_CDC_RegisterInterface>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d7f8:	f7f3 fce6 	bl	80011c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d7fc:	4805      	ldr	r0, [pc, #20]	; (800d814 <MX_USB_DEVICE_Init+0x54>)
 800d7fe:	f7fe fd4d 	bl	800c29c <USBD_Start>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d808:	f7f3 fcde 	bl	80011c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d80c:	bf00      	nop
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	20000368 	.word	0x20000368
 800d814:	20000b6c 	.word	0x20000b6c
 800d818:	200002d4 	.word	0x200002d4
 800d81c:	20000354 	.word	0x20000354

0800d820 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d824:	2200      	movs	r2, #0
 800d826:	4905      	ldr	r1, [pc, #20]	; (800d83c <CDC_Init_FS+0x1c>)
 800d828:	4805      	ldr	r0, [pc, #20]	; (800d840 <CDC_Init_FS+0x20>)
 800d82a:	f7fe fc1b 	bl	800c064 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d82e:	4905      	ldr	r1, [pc, #20]	; (800d844 <CDC_Init_FS+0x24>)
 800d830:	4803      	ldr	r0, [pc, #12]	; (800d840 <CDC_Init_FS+0x20>)
 800d832:	f7fe fc39 	bl	800c0a8 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 800d836:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d838:	4618      	mov	r0, r3
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	20001248 	.word	0x20001248
 800d840:	20000b6c 	.word	0x20000b6c
 800d844:	20000e48 	.word	0x20000e48

0800d848 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d848:	b480      	push	{r7}
 800d84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
	return (USBD_OK);
 800d84c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d84e:	4618      	mov	r0, r3
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	4603      	mov	r3, r0
 800d860:	6039      	str	r1, [r7, #0]
 800d862:	71fb      	strb	r3, [r7, #7]
 800d864:	4613      	mov	r3, r2
 800d866:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	switch (cmd) {
 800d868:	79fb      	ldrb	r3, [r7, #7]
 800d86a:	2b23      	cmp	r3, #35	; 0x23
 800d86c:	d84a      	bhi.n	800d904 <CDC_Control_FS+0xac>
 800d86e:	a201      	add	r2, pc, #4	; (adr r2, 800d874 <CDC_Control_FS+0x1c>)
 800d870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d874:	0800d905 	.word	0x0800d905
 800d878:	0800d905 	.word	0x0800d905
 800d87c:	0800d905 	.word	0x0800d905
 800d880:	0800d905 	.word	0x0800d905
 800d884:	0800d905 	.word	0x0800d905
 800d888:	0800d905 	.word	0x0800d905
 800d88c:	0800d905 	.word	0x0800d905
 800d890:	0800d905 	.word	0x0800d905
 800d894:	0800d905 	.word	0x0800d905
 800d898:	0800d905 	.word	0x0800d905
 800d89c:	0800d905 	.word	0x0800d905
 800d8a0:	0800d905 	.word	0x0800d905
 800d8a4:	0800d905 	.word	0x0800d905
 800d8a8:	0800d905 	.word	0x0800d905
 800d8ac:	0800d905 	.word	0x0800d905
 800d8b0:	0800d905 	.word	0x0800d905
 800d8b4:	0800d905 	.word	0x0800d905
 800d8b8:	0800d905 	.word	0x0800d905
 800d8bc:	0800d905 	.word	0x0800d905
 800d8c0:	0800d905 	.word	0x0800d905
 800d8c4:	0800d905 	.word	0x0800d905
 800d8c8:	0800d905 	.word	0x0800d905
 800d8cc:	0800d905 	.word	0x0800d905
 800d8d0:	0800d905 	.word	0x0800d905
 800d8d4:	0800d905 	.word	0x0800d905
 800d8d8:	0800d905 	.word	0x0800d905
 800d8dc:	0800d905 	.word	0x0800d905
 800d8e0:	0800d905 	.word	0x0800d905
 800d8e4:	0800d905 	.word	0x0800d905
 800d8e8:	0800d905 	.word	0x0800d905
 800d8ec:	0800d905 	.word	0x0800d905
 800d8f0:	0800d905 	.word	0x0800d905
 800d8f4:	0800d905 	.word	0x0800d905
 800d8f8:	0800d905 	.word	0x0800d905
 800d8fc:	0800d905 	.word	0x0800d905
 800d900:	0800d905 	.word	0x0800d905
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800d904:	bf00      	nop
	}

	return (USBD_OK);
 800d906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d908:	4618      	mov	r0, r3
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d91e:	6879      	ldr	r1, [r7, #4]
 800d920:	4810      	ldr	r0, [pc, #64]	; (800d964 <CDC_Receive_FS+0x50>)
 800d922:	f7fe fbc1 	bl	800c0a8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d926:	480f      	ldr	r0, [pc, #60]	; (800d964 <CDC_Receive_FS+0x50>)
 800d928:	f7fe fc1c 	bl	800c164 <USBD_CDC_ReceivePacket>

	Buf[*Len] = '\0'; // C standard string ends with null termination
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	4413      	add	r3, r2
 800d934:	2200      	movs	r2, #0
 800d936:	701a      	strb	r2, [r3, #0]
	strcpy(rxBuff, (char*)Buf); // Copy string to process buffer
 800d938:	6879      	ldr	r1, [r7, #4]
 800d93a:	480b      	ldr	r0, [pc, #44]	; (800d968 <CDC_Receive_FS+0x54>)
 800d93c:	f000 ff1d 	bl	800e77a <strcpy>
	process.computer = (process.scan)^1; // Set process flag
 800d940:	4b0a      	ldr	r3, [pc, #40]	; (800d96c <CDC_Receive_FS+0x58>)
 800d942:	7b9b      	ldrb	r3, [r3, #14]
 800d944:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f083 0301 	eor.w	r3, r3, #1
 800d94e:	b2d9      	uxtb	r1, r3
 800d950:	4a06      	ldr	r2, [pc, #24]	; (800d96c <CDC_Receive_FS+0x58>)
 800d952:	7b93      	ldrb	r3, [r2, #14]
 800d954:	f361 0300 	bfi	r3, r1, #0, #1
 800d958:	7393      	strb	r3, [r2, #14]

	return (USBD_OK);
 800d95a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20000b6c 	.word	0x20000b6c
 800d968:	20000574 	.word	0x20000574
 800d96c:	20000564 	.word	0x20000564

0800d970 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b084      	sub	sp, #16
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	460b      	mov	r3, r1
 800d97a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 800d980:	4b0d      	ldr	r3, [pc, #52]	; (800d9b8 <CDC_Transmit_FS+0x48>)
 800d982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d986:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800d988:	68bb      	ldr	r3, [r7, #8]
 800d98a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 800d992:	2301      	movs	r3, #1
 800d994:	e00b      	b.n	800d9ae <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d996:	887b      	ldrh	r3, [r7, #2]
 800d998:	461a      	mov	r2, r3
 800d99a:	6879      	ldr	r1, [r7, #4]
 800d99c:	4806      	ldr	r0, [pc, #24]	; (800d9b8 <CDC_Transmit_FS+0x48>)
 800d99e:	f7fe fb61 	bl	800c064 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d9a2:	4805      	ldr	r0, [pc, #20]	; (800d9b8 <CDC_Transmit_FS+0x48>)
 800d9a4:	f7fe fb9e 	bl	800c0e4 <USBD_CDC_TransmitPacket>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	bf00      	nop
 800d9b8:	20000b6c 	.word	0x20000b6c

0800d9bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b087      	sub	sp, #28
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	4613      	mov	r3, r2
 800d9c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	371c      	adds	r7, #28
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
	...

0800d9e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	6039      	str	r1, [r7, #0]
 800d9ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	2212      	movs	r2, #18
 800d9f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d9f2:	4b03      	ldr	r3, [pc, #12]	; (800da00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr
 800da00:	20000384 	.word	0x20000384

0800da04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	6039      	str	r1, [r7, #0]
 800da0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	2204      	movs	r2, #4
 800da14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da16:	4b03      	ldr	r3, [pc, #12]	; (800da24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800da18:	4618      	mov	r0, r3
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr
 800da24:	20000398 	.word	0x20000398

0800da28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	4603      	mov	r3, r0
 800da30:	6039      	str	r1, [r7, #0]
 800da32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d105      	bne.n	800da46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da3a:	683a      	ldr	r2, [r7, #0]
 800da3c:	4907      	ldr	r1, [pc, #28]	; (800da5c <USBD_FS_ProductStrDescriptor+0x34>)
 800da3e:	4808      	ldr	r0, [pc, #32]	; (800da60 <USBD_FS_ProductStrDescriptor+0x38>)
 800da40:	f7ff fdde 	bl	800d600 <USBD_GetString>
 800da44:	e004      	b.n	800da50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	4904      	ldr	r1, [pc, #16]	; (800da5c <USBD_FS_ProductStrDescriptor+0x34>)
 800da4a:	4805      	ldr	r0, [pc, #20]	; (800da60 <USBD_FS_ProductStrDescriptor+0x38>)
 800da4c:	f7ff fdd8 	bl	800d600 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da50:	4b02      	ldr	r3, [pc, #8]	; (800da5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20001648 	.word	0x20001648
 800da60:	0800f7c4 	.word	0x0800f7c4

0800da64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	6039      	str	r1, [r7, #0]
 800da6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	4904      	ldr	r1, [pc, #16]	; (800da84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800da74:	4804      	ldr	r0, [pc, #16]	; (800da88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800da76:	f7ff fdc3 	bl	800d600 <USBD_GetString>
  return USBD_StrDesc;
 800da7a:	4b02      	ldr	r3, [pc, #8]	; (800da84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	20001648 	.word	0x20001648
 800da88:	0800f7d4 	.word	0x0800f7d4

0800da8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	4603      	mov	r3, r0
 800da94:	6039      	str	r1, [r7, #0]
 800da96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	221a      	movs	r2, #26
 800da9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800da9e:	f000 f843 	bl	800db28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800daa2:	4b02      	ldr	r3, [pc, #8]	; (800daac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	2000039c 	.word	0x2000039c

0800dab0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	4603      	mov	r3, r0
 800dab8:	6039      	str	r1, [r7, #0]
 800daba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dabc:	79fb      	ldrb	r3, [r7, #7]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d105      	bne.n	800dace <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dac2:	683a      	ldr	r2, [r7, #0]
 800dac4:	4907      	ldr	r1, [pc, #28]	; (800dae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dac6:	4808      	ldr	r0, [pc, #32]	; (800dae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dac8:	f7ff fd9a 	bl	800d600 <USBD_GetString>
 800dacc:	e004      	b.n	800dad8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dace:	683a      	ldr	r2, [r7, #0]
 800dad0:	4904      	ldr	r1, [pc, #16]	; (800dae4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dad2:	4805      	ldr	r0, [pc, #20]	; (800dae8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dad4:	f7ff fd94 	bl	800d600 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dad8:	4b02      	ldr	r3, [pc, #8]	; (800dae4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	20001648 	.word	0x20001648
 800dae8:	0800f7e0 	.word	0x0800f7e0

0800daec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	4603      	mov	r3, r0
 800daf4:	6039      	str	r1, [r7, #0]
 800daf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d105      	bne.n	800db0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dafe:	683a      	ldr	r2, [r7, #0]
 800db00:	4907      	ldr	r1, [pc, #28]	; (800db20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db02:	4808      	ldr	r0, [pc, #32]	; (800db24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db04:	f7ff fd7c 	bl	800d600 <USBD_GetString>
 800db08:	e004      	b.n	800db14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	4904      	ldr	r1, [pc, #16]	; (800db20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800db0e:	4805      	ldr	r0, [pc, #20]	; (800db24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800db10:	f7ff fd76 	bl	800d600 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db14:	4b02      	ldr	r3, [pc, #8]	; (800db20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20001648 	.word	0x20001648
 800db24:	0800f7ec 	.word	0x0800f7ec

0800db28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db2e:	4b0f      	ldr	r3, [pc, #60]	; (800db6c <Get_SerialNum+0x44>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db34:	4b0e      	ldr	r3, [pc, #56]	; (800db70 <Get_SerialNum+0x48>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db3a:	4b0e      	ldr	r3, [pc, #56]	; (800db74 <Get_SerialNum+0x4c>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	4413      	add	r3, r2
 800db46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d009      	beq.n	800db62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db4e:	2208      	movs	r2, #8
 800db50:	4909      	ldr	r1, [pc, #36]	; (800db78 <Get_SerialNum+0x50>)
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f000 f814 	bl	800db80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db58:	2204      	movs	r2, #4
 800db5a:	4908      	ldr	r1, [pc, #32]	; (800db7c <Get_SerialNum+0x54>)
 800db5c:	68b8      	ldr	r0, [r7, #8]
 800db5e:	f000 f80f 	bl	800db80 <IntToUnicode>
  }
}
 800db62:	bf00      	nop
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	1fff7a10 	.word	0x1fff7a10
 800db70:	1fff7a14 	.word	0x1fff7a14
 800db74:	1fff7a18 	.word	0x1fff7a18
 800db78:	2000039e 	.word	0x2000039e
 800db7c:	200003ae 	.word	0x200003ae

0800db80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800db80:	b480      	push	{r7}
 800db82:	b087      	sub	sp, #28
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	4613      	mov	r3, r2
 800db8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800db92:	2300      	movs	r3, #0
 800db94:	75fb      	strb	r3, [r7, #23]
 800db96:	e027      	b.n	800dbe8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	0f1b      	lsrs	r3, r3, #28
 800db9c:	2b09      	cmp	r3, #9
 800db9e:	d80b      	bhi.n	800dbb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	0f1b      	lsrs	r3, r3, #28
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	4619      	mov	r1, r3
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	440b      	add	r3, r1
 800dbb0:	3230      	adds	r2, #48	; 0x30
 800dbb2:	b2d2      	uxtb	r2, r2
 800dbb4:	701a      	strb	r2, [r3, #0]
 800dbb6:	e00a      	b.n	800dbce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	0f1b      	lsrs	r3, r3, #28
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	7dfb      	ldrb	r3, [r7, #23]
 800dbc0:	005b      	lsls	r3, r3, #1
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	440b      	add	r3, r1
 800dbc8:	3237      	adds	r2, #55	; 0x37
 800dbca:	b2d2      	uxtb	r2, r2
 800dbcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	011b      	lsls	r3, r3, #4
 800dbd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dbd4:	7dfb      	ldrb	r3, [r7, #23]
 800dbd6:	005b      	lsls	r3, r3, #1
 800dbd8:	3301      	adds	r3, #1
 800dbda:	68ba      	ldr	r2, [r7, #8]
 800dbdc:	4413      	add	r3, r2
 800dbde:	2200      	movs	r2, #0
 800dbe0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dbe2:	7dfb      	ldrb	r3, [r7, #23]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	75fb      	strb	r3, [r7, #23]
 800dbe8:	7dfa      	ldrb	r2, [r7, #23]
 800dbea:	79fb      	ldrb	r3, [r7, #7]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d3d3      	bcc.n	800db98 <IntToUnicode+0x18>
  }
}
 800dbf0:	bf00      	nop
 800dbf2:	bf00      	nop
 800dbf4:	371c      	adds	r7, #28
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfc:	4770      	bx	lr
	...

0800dc00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b08a      	sub	sp, #40	; 0x28
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dc08:	f107 0314 	add.w	r3, r7, #20
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	601a      	str	r2, [r3, #0]
 800dc10:	605a      	str	r2, [r3, #4]
 800dc12:	609a      	str	r2, [r3, #8]
 800dc14:	60da      	str	r2, [r3, #12]
 800dc16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc20:	d13a      	bne.n	800dc98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dc22:	2300      	movs	r3, #0
 800dc24:	613b      	str	r3, [r7, #16]
 800dc26:	4b1e      	ldr	r3, [pc, #120]	; (800dca0 <HAL_PCD_MspInit+0xa0>)
 800dc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc2a:	4a1d      	ldr	r2, [pc, #116]	; (800dca0 <HAL_PCD_MspInit+0xa0>)
 800dc2c:	f043 0301 	orr.w	r3, r3, #1
 800dc30:	6313      	str	r3, [r2, #48]	; 0x30
 800dc32:	4b1b      	ldr	r3, [pc, #108]	; (800dca0 <HAL_PCD_MspInit+0xa0>)
 800dc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc36:	f003 0301 	and.w	r3, r3, #1
 800dc3a:	613b      	str	r3, [r7, #16]
 800dc3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dc3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dc42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc44:	2302      	movs	r3, #2
 800dc46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dc50:	230a      	movs	r3, #10
 800dc52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc54:	f107 0314 	add.w	r3, r7, #20
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4812      	ldr	r0, [pc, #72]	; (800dca4 <HAL_PCD_MspInit+0xa4>)
 800dc5c:	f7f3 feb0 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dc60:	4b0f      	ldr	r3, [pc, #60]	; (800dca0 <HAL_PCD_MspInit+0xa0>)
 800dc62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc64:	4a0e      	ldr	r2, [pc, #56]	; (800dca0 <HAL_PCD_MspInit+0xa0>)
 800dc66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc6a:	6353      	str	r3, [r2, #52]	; 0x34
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	60fb      	str	r3, [r7, #12]
 800dc70:	4b0b      	ldr	r3, [pc, #44]	; (800dca0 <HAL_PCD_MspInit+0xa0>)
 800dc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc74:	4a0a      	ldr	r2, [pc, #40]	; (800dca0 <HAL_PCD_MspInit+0xa0>)
 800dc76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dc7a:	6453      	str	r3, [r2, #68]	; 0x44
 800dc7c:	4b08      	ldr	r3, [pc, #32]	; (800dca0 <HAL_PCD_MspInit+0xa0>)
 800dc7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc84:	60fb      	str	r3, [r7, #12]
 800dc86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dc88:	2200      	movs	r2, #0
 800dc8a:	2100      	movs	r1, #0
 800dc8c:	2043      	movs	r0, #67	; 0x43
 800dc8e:	f7f3 fe60 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dc92:	2043      	movs	r0, #67	; 0x43
 800dc94:	f7f3 fe79 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dc98:	bf00      	nop
 800dc9a:	3728      	adds	r7, #40	; 0x28
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	40023800 	.word	0x40023800
 800dca4:	40020000 	.word	0x40020000

0800dca8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	f7fe fb39 	bl	800c336 <USBD_LL_SetupStage>
}
 800dcc4:	bf00      	nop
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800dcde:	78fa      	ldrb	r2, [r7, #3]
 800dce0:	6879      	ldr	r1, [r7, #4]
 800dce2:	4613      	mov	r3, r2
 800dce4:	00db      	lsls	r3, r3, #3
 800dce6:	4413      	add	r3, r2
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	440b      	add	r3, r1
 800dcec:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800dcf0:	681a      	ldr	r2, [r3, #0]
 800dcf2:	78fb      	ldrb	r3, [r7, #3]
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	f7fe fb73 	bl	800c3e0 <USBD_LL_DataOutStage>
}
 800dcfa:	bf00      	nop
 800dcfc:	3708      	adds	r7, #8
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b082      	sub	sp, #8
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800dd14:	78fa      	ldrb	r2, [r7, #3]
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	4613      	mov	r3, r2
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	4413      	add	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	440b      	add	r3, r1
 800dd22:	3320      	adds	r3, #32
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	78fb      	ldrb	r3, [r7, #3]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	f7fe fc0c 	bl	800c546 <USBD_LL_DataInStage>
}
 800dd2e:	bf00      	nop
 800dd30:	3708      	adds	r7, #8
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}

0800dd36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd36:	b580      	push	{r7, lr}
 800dd38:	b082      	sub	sp, #8
 800dd3a:	af00      	add	r7, sp, #0
 800dd3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fe fd46 	bl	800c7d6 <USBD_LL_SOF>
}
 800dd4a:	bf00      	nop
 800dd4c:	3708      	adds	r7, #8
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b084      	sub	sp, #16
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	79db      	ldrb	r3, [r3, #7]
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	d001      	beq.n	800dd6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dd66:	f7f3 fa2f 	bl	80011c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dd70:	7bfa      	ldrb	r2, [r7, #15]
 800dd72:	4611      	mov	r1, r2
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fe fcea 	bl	800c74e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fc92 	bl	800c6aa <USBD_LL_Reset>
}
 800dd86:	bf00      	nop
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
	...

0800dd90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7fe fce5 	bl	800c76e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	6812      	ldr	r2, [r2, #0]
 800ddb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ddb6:	f043 0301 	orr.w	r3, r3, #1
 800ddba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7adb      	ldrb	r3, [r3, #11]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d005      	beq.n	800ddd0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddc4:	4b04      	ldr	r3, [pc, #16]	; (800ddd8 <HAL_PCD_SuspendCallback+0x48>)
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	4a03      	ldr	r2, [pc, #12]	; (800ddd8 <HAL_PCD_SuspendCallback+0x48>)
 800ddca:	f043 0306 	orr.w	r3, r3, #6
 800ddce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ddd0:	bf00      	nop
 800ddd2:	3708      	adds	r7, #8
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	e000ed00 	.word	0xe000ed00

0800dddc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fcdb 	bl	800c7a6 <USBD_LL_Resume>
}
 800ddf0:	bf00      	nop
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	460b      	mov	r3, r1
 800de02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800de0a:	78fa      	ldrb	r2, [r7, #3]
 800de0c:	4611      	mov	r1, r2
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe fd33 	bl	800c87a <USBD_LL_IsoOUTIncomplete>
}
 800de14:	bf00      	nop
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800de2e:	78fa      	ldrb	r2, [r7, #3]
 800de30:	4611      	mov	r1, r2
 800de32:	4618      	mov	r0, r3
 800de34:	f7fe fcef 	bl	800c816 <USBD_LL_IsoINIncomplete>
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fe fd45 	bl	800c8de <USBD_LL_DevConnected>
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe fd42 	bl	800c8f4 <USBD_LL_DevDisconnected>
}
 800de70:	bf00      	nop
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d13c      	bne.n	800df02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de88:	4a20      	ldr	r2, [pc, #128]	; (800df0c <USBD_LL_Init+0x94>)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	4a1e      	ldr	r2, [pc, #120]	; (800df0c <USBD_LL_Init+0x94>)
 800de94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de98:	4b1c      	ldr	r3, [pc, #112]	; (800df0c <USBD_LL_Init+0x94>)
 800de9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800de9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800dea0:	4b1a      	ldr	r3, [pc, #104]	; (800df0c <USBD_LL_Init+0x94>)
 800dea2:	2204      	movs	r2, #4
 800dea4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800dea6:	4b19      	ldr	r3, [pc, #100]	; (800df0c <USBD_LL_Init+0x94>)
 800dea8:	2202      	movs	r2, #2
 800deaa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800deac:	4b17      	ldr	r3, [pc, #92]	; (800df0c <USBD_LL_Init+0x94>)
 800deae:	2200      	movs	r2, #0
 800deb0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800deb2:	4b16      	ldr	r3, [pc, #88]	; (800df0c <USBD_LL_Init+0x94>)
 800deb4:	2202      	movs	r2, #2
 800deb6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800deb8:	4b14      	ldr	r3, [pc, #80]	; (800df0c <USBD_LL_Init+0x94>)
 800deba:	2200      	movs	r2, #0
 800debc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800debe:	4b13      	ldr	r3, [pc, #76]	; (800df0c <USBD_LL_Init+0x94>)
 800dec0:	2200      	movs	r2, #0
 800dec2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800dec4:	4b11      	ldr	r3, [pc, #68]	; (800df0c <USBD_LL_Init+0x94>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800deca:	4b10      	ldr	r3, [pc, #64]	; (800df0c <USBD_LL_Init+0x94>)
 800decc:	2200      	movs	r2, #0
 800dece:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ded0:	4b0e      	ldr	r3, [pc, #56]	; (800df0c <USBD_LL_Init+0x94>)
 800ded2:	2200      	movs	r2, #0
 800ded4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ded6:	480d      	ldr	r0, [pc, #52]	; (800df0c <USBD_LL_Init+0x94>)
 800ded8:	f7f4 ff22 	bl	8002d20 <HAL_PCD_Init>
 800dedc:	4603      	mov	r3, r0
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800dee2:	f7f3 f971 	bl	80011c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800dee6:	2180      	movs	r1, #128	; 0x80
 800dee8:	4808      	ldr	r0, [pc, #32]	; (800df0c <USBD_LL_Init+0x94>)
 800deea:	f7f6 f94c 	bl	8004186 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800deee:	2240      	movs	r2, #64	; 0x40
 800def0:	2100      	movs	r1, #0
 800def2:	4806      	ldr	r0, [pc, #24]	; (800df0c <USBD_LL_Init+0x94>)
 800def4:	f7f6 f900 	bl	80040f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800def8:	2280      	movs	r2, #128	; 0x80
 800defa:	2101      	movs	r1, #1
 800defc:	4803      	ldr	r0, [pc, #12]	; (800df0c <USBD_LL_Init+0x94>)
 800defe:	f7f6 f8fb 	bl	80040f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800df02:	2300      	movs	r3, #0
}
 800df04:	4618      	mov	r0, r3
 800df06:	3708      	adds	r7, #8
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	20001848 	.word	0x20001848

0800df10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df18:	2300      	movs	r3, #0
 800df1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df1c:	2300      	movs	r3, #0
 800df1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df26:	4618      	mov	r0, r3
 800df28:	f7f5 f809 	bl	8002f3e <HAL_PCD_Start>
 800df2c:	4603      	mov	r3, r0
 800df2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df30:	7bfb      	ldrb	r3, [r7, #15]
 800df32:	4618      	mov	r0, r3
 800df34:	f000 f942 	bl	800e1bc <USBD_Get_USB_Status>
 800df38:	4603      	mov	r3, r0
 800df3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b084      	sub	sp, #16
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	4608      	mov	r0, r1
 800df50:	4611      	mov	r1, r2
 800df52:	461a      	mov	r2, r3
 800df54:	4603      	mov	r3, r0
 800df56:	70fb      	strb	r3, [r7, #3]
 800df58:	460b      	mov	r3, r1
 800df5a:	70bb      	strb	r3, [r7, #2]
 800df5c:	4613      	mov	r3, r2
 800df5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df64:	2300      	movs	r3, #0
 800df66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df6e:	78bb      	ldrb	r3, [r7, #2]
 800df70:	883a      	ldrh	r2, [r7, #0]
 800df72:	78f9      	ldrb	r1, [r7, #3]
 800df74:	f7f5 fcdd 	bl	8003932 <HAL_PCD_EP_Open>
 800df78:	4603      	mov	r3, r0
 800df7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df7c:	7bfb      	ldrb	r3, [r7, #15]
 800df7e:	4618      	mov	r0, r3
 800df80:	f000 f91c 	bl	800e1bc <USBD_Get_USB_Status>
 800df84:	4603      	mov	r3, r0
 800df86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df88:	7bbb      	ldrb	r3, [r7, #14]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df92:	b580      	push	{r7, lr}
 800df94:	b084      	sub	sp, #16
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
 800df9a:	460b      	mov	r3, r1
 800df9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dfac:	78fa      	ldrb	r2, [r7, #3]
 800dfae:	4611      	mov	r1, r2
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f7f5 fd26 	bl	8003a02 <HAL_PCD_EP_Close>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfba:	7bfb      	ldrb	r3, [r7, #15]
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f000 f8fd 	bl	800e1bc <USBD_Get_USB_Status>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfc6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	460b      	mov	r3, r1
 800dfda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dfea:	78fa      	ldrb	r2, [r7, #3]
 800dfec:	4611      	mov	r1, r2
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7f5 fdde 	bl	8003bb0 <HAL_PCD_EP_SetStall>
 800dff4:	4603      	mov	r3, r0
 800dff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dff8:	7bfb      	ldrb	r3, [r7, #15]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 f8de 	bl	800e1bc <USBD_Get_USB_Status>
 800e000:	4603      	mov	r3, r0
 800e002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e004:	7bbb      	ldrb	r3, [r7, #14]
}
 800e006:	4618      	mov	r0, r3
 800e008:	3710      	adds	r7, #16
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}

0800e00e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e00e:	b580      	push	{r7, lr}
 800e010:	b084      	sub	sp, #16
 800e012:	af00      	add	r7, sp, #0
 800e014:	6078      	str	r0, [r7, #4]
 800e016:	460b      	mov	r3, r1
 800e018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e01a:	2300      	movs	r3, #0
 800e01c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e028:	78fa      	ldrb	r2, [r7, #3]
 800e02a:	4611      	mov	r1, r2
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7f5 fe22 	bl	8003c76 <HAL_PCD_EP_ClrStall>
 800e032:	4603      	mov	r3, r0
 800e034:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e036:	7bfb      	ldrb	r3, [r7, #15]
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 f8bf 	bl	800e1bc <USBD_Get_USB_Status>
 800e03e:	4603      	mov	r3, r0
 800e040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e042:	7bbb      	ldrb	r3, [r7, #14]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e05e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e064:	2b00      	cmp	r3, #0
 800e066:	da0b      	bge.n	800e080 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e06e:	68f9      	ldr	r1, [r7, #12]
 800e070:	4613      	mov	r3, r2
 800e072:	00db      	lsls	r3, r3, #3
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	440b      	add	r3, r1
 800e07a:	3316      	adds	r3, #22
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	e00b      	b.n	800e098 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e080:	78fb      	ldrb	r3, [r7, #3]
 800e082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e086:	68f9      	ldr	r1, [r7, #12]
 800e088:	4613      	mov	r3, r2
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	4413      	add	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	440b      	add	r3, r1
 800e092:	f203 2356 	addw	r3, r3, #598	; 0x256
 800e096:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3714      	adds	r7, #20
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	460b      	mov	r3, r1
 800e0ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0be:	78fa      	ldrb	r2, [r7, #3]
 800e0c0:	4611      	mov	r1, r2
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7f5 fc11 	bl	80038ea <HAL_PCD_SetAddress>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0cc:	7bfb      	ldrb	r3, [r7, #15]
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f000 f874 	bl	800e1bc <USBD_Get_USB_Status>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b086      	sub	sp, #24
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	60f8      	str	r0, [r7, #12]
 800e0ea:	607a      	str	r2, [r7, #4]
 800e0ec:	603b      	str	r3, [r7, #0]
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e100:	7af9      	ldrb	r1, [r7, #11]
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	f7f5 fd19 	bl	8003b3c <HAL_PCD_EP_Transmit>
 800e10a:	4603      	mov	r3, r0
 800e10c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	4618      	mov	r0, r3
 800e112:	f000 f853 	bl	800e1bc <USBD_Get_USB_Status>
 800e116:	4603      	mov	r3, r0
 800e118:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e11a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3718      	adds	r7, #24
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b086      	sub	sp, #24
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	607a      	str	r2, [r7, #4]
 800e12e:	603b      	str	r3, [r7, #0]
 800e130:	460b      	mov	r3, r1
 800e132:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e134:	2300      	movs	r3, #0
 800e136:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e142:	7af9      	ldrb	r1, [r7, #11]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	f7f5 fca5 	bl	8003a96 <HAL_PCD_EP_Receive>
 800e14c:	4603      	mov	r3, r0
 800e14e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e150:	7dfb      	ldrb	r3, [r7, #23]
 800e152:	4618      	mov	r0, r3
 800e154:	f000 f832 	bl	800e1bc <USBD_Get_USB_Status>
 800e158:	4603      	mov	r3, r0
 800e15a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e15c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b082      	sub	sp, #8
 800e16a:	af00      	add	r7, sp, #0
 800e16c:	6078      	str	r0, [r7, #4]
 800e16e:	460b      	mov	r3, r1
 800e170:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e178:	78fa      	ldrb	r2, [r7, #3]
 800e17a:	4611      	mov	r1, r2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7f5 fcc5 	bl	8003b0c <HAL_PCD_EP_GetRxCount>
 800e182:	4603      	mov	r3, r0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e194:	4b03      	ldr	r3, [pc, #12]	; (800e1a4 <USBD_static_malloc+0x18>)
}
 800e196:	4618      	mov	r0, r3
 800e198:	370c      	adds	r7, #12
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr
 800e1a2:	bf00      	nop
 800e1a4:	20001d2c 	.word	0x20001d2c

0800e1a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]

}
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e1ca:	79fb      	ldrb	r3, [r7, #7]
 800e1cc:	2b03      	cmp	r3, #3
 800e1ce:	d817      	bhi.n	800e200 <USBD_Get_USB_Status+0x44>
 800e1d0:	a201      	add	r2, pc, #4	; (adr r2, 800e1d8 <USBD_Get_USB_Status+0x1c>)
 800e1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1d6:	bf00      	nop
 800e1d8:	0800e1e9 	.word	0x0800e1e9
 800e1dc:	0800e1ef 	.word	0x0800e1ef
 800e1e0:	0800e1f5 	.word	0x0800e1f5
 800e1e4:	0800e1fb 	.word	0x0800e1fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e1ec:	e00b      	b.n	800e206 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1ee:	2303      	movs	r3, #3
 800e1f0:	73fb      	strb	r3, [r7, #15]
    break;
 800e1f2:	e008      	b.n	800e206 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800e1f8:	e005      	b.n	800e206 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1fa:	2303      	movs	r3, #3
 800e1fc:	73fb      	strb	r3, [r7, #15]
    break;
 800e1fe:	e002      	b.n	800e206 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e200:	2303      	movs	r3, #3
 800e202:	73fb      	strb	r3, [r7, #15]
    break;
 800e204:	bf00      	nop
  }
  return usb_status;
 800e206:	7bfb      	ldrb	r3, [r7, #15]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3714      	adds	r7, #20
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <atoi>:
 800e214:	220a      	movs	r2, #10
 800e216:	2100      	movs	r1, #0
 800e218:	f000 b882 	b.w	800e320 <strtol>

0800e21c <_strtol_l.constprop.0>:
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e222:	d001      	beq.n	800e228 <_strtol_l.constprop.0+0xc>
 800e224:	2b24      	cmp	r3, #36	; 0x24
 800e226:	d906      	bls.n	800e236 <_strtol_l.constprop.0+0x1a>
 800e228:	f000 fa7a 	bl	800e720 <__errno>
 800e22c:	2316      	movs	r3, #22
 800e22e:	6003      	str	r3, [r0, #0]
 800e230:	2000      	movs	r0, #0
 800e232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e236:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e31c <_strtol_l.constprop.0+0x100>
 800e23a:	460d      	mov	r5, r1
 800e23c:	462e      	mov	r6, r5
 800e23e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e242:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e246:	f017 0708 	ands.w	r7, r7, #8
 800e24a:	d1f7      	bne.n	800e23c <_strtol_l.constprop.0+0x20>
 800e24c:	2c2d      	cmp	r4, #45	; 0x2d
 800e24e:	d132      	bne.n	800e2b6 <_strtol_l.constprop.0+0x9a>
 800e250:	782c      	ldrb	r4, [r5, #0]
 800e252:	2701      	movs	r7, #1
 800e254:	1cb5      	adds	r5, r6, #2
 800e256:	2b00      	cmp	r3, #0
 800e258:	d05b      	beq.n	800e312 <_strtol_l.constprop.0+0xf6>
 800e25a:	2b10      	cmp	r3, #16
 800e25c:	d109      	bne.n	800e272 <_strtol_l.constprop.0+0x56>
 800e25e:	2c30      	cmp	r4, #48	; 0x30
 800e260:	d107      	bne.n	800e272 <_strtol_l.constprop.0+0x56>
 800e262:	782c      	ldrb	r4, [r5, #0]
 800e264:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e268:	2c58      	cmp	r4, #88	; 0x58
 800e26a:	d14d      	bne.n	800e308 <_strtol_l.constprop.0+0xec>
 800e26c:	786c      	ldrb	r4, [r5, #1]
 800e26e:	2310      	movs	r3, #16
 800e270:	3502      	adds	r5, #2
 800e272:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e276:	f108 38ff 	add.w	r8, r8, #4294967295
 800e27a:	f04f 0e00 	mov.w	lr, #0
 800e27e:	fbb8 f9f3 	udiv	r9, r8, r3
 800e282:	4676      	mov	r6, lr
 800e284:	fb03 8a19 	mls	sl, r3, r9, r8
 800e288:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e28c:	f1bc 0f09 	cmp.w	ip, #9
 800e290:	d816      	bhi.n	800e2c0 <_strtol_l.constprop.0+0xa4>
 800e292:	4664      	mov	r4, ip
 800e294:	42a3      	cmp	r3, r4
 800e296:	dd24      	ble.n	800e2e2 <_strtol_l.constprop.0+0xc6>
 800e298:	f1be 3fff 	cmp.w	lr, #4294967295
 800e29c:	d008      	beq.n	800e2b0 <_strtol_l.constprop.0+0x94>
 800e29e:	45b1      	cmp	r9, r6
 800e2a0:	d31c      	bcc.n	800e2dc <_strtol_l.constprop.0+0xc0>
 800e2a2:	d101      	bne.n	800e2a8 <_strtol_l.constprop.0+0x8c>
 800e2a4:	45a2      	cmp	sl, r4
 800e2a6:	db19      	blt.n	800e2dc <_strtol_l.constprop.0+0xc0>
 800e2a8:	fb06 4603 	mla	r6, r6, r3, r4
 800e2ac:	f04f 0e01 	mov.w	lr, #1
 800e2b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2b4:	e7e8      	b.n	800e288 <_strtol_l.constprop.0+0x6c>
 800e2b6:	2c2b      	cmp	r4, #43	; 0x2b
 800e2b8:	bf04      	itt	eq
 800e2ba:	782c      	ldrbeq	r4, [r5, #0]
 800e2bc:	1cb5      	addeq	r5, r6, #2
 800e2be:	e7ca      	b.n	800e256 <_strtol_l.constprop.0+0x3a>
 800e2c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e2c4:	f1bc 0f19 	cmp.w	ip, #25
 800e2c8:	d801      	bhi.n	800e2ce <_strtol_l.constprop.0+0xb2>
 800e2ca:	3c37      	subs	r4, #55	; 0x37
 800e2cc:	e7e2      	b.n	800e294 <_strtol_l.constprop.0+0x78>
 800e2ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e2d2:	f1bc 0f19 	cmp.w	ip, #25
 800e2d6:	d804      	bhi.n	800e2e2 <_strtol_l.constprop.0+0xc6>
 800e2d8:	3c57      	subs	r4, #87	; 0x57
 800e2da:	e7db      	b.n	800e294 <_strtol_l.constprop.0+0x78>
 800e2dc:	f04f 3eff 	mov.w	lr, #4294967295
 800e2e0:	e7e6      	b.n	800e2b0 <_strtol_l.constprop.0+0x94>
 800e2e2:	f1be 3fff 	cmp.w	lr, #4294967295
 800e2e6:	d105      	bne.n	800e2f4 <_strtol_l.constprop.0+0xd8>
 800e2e8:	2322      	movs	r3, #34	; 0x22
 800e2ea:	6003      	str	r3, [r0, #0]
 800e2ec:	4646      	mov	r6, r8
 800e2ee:	b942      	cbnz	r2, 800e302 <_strtol_l.constprop.0+0xe6>
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	e79e      	b.n	800e232 <_strtol_l.constprop.0+0x16>
 800e2f4:	b107      	cbz	r7, 800e2f8 <_strtol_l.constprop.0+0xdc>
 800e2f6:	4276      	negs	r6, r6
 800e2f8:	2a00      	cmp	r2, #0
 800e2fa:	d0f9      	beq.n	800e2f0 <_strtol_l.constprop.0+0xd4>
 800e2fc:	f1be 0f00 	cmp.w	lr, #0
 800e300:	d000      	beq.n	800e304 <_strtol_l.constprop.0+0xe8>
 800e302:	1e69      	subs	r1, r5, #1
 800e304:	6011      	str	r1, [r2, #0]
 800e306:	e7f3      	b.n	800e2f0 <_strtol_l.constprop.0+0xd4>
 800e308:	2430      	movs	r4, #48	; 0x30
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d1b1      	bne.n	800e272 <_strtol_l.constprop.0+0x56>
 800e30e:	2308      	movs	r3, #8
 800e310:	e7af      	b.n	800e272 <_strtol_l.constprop.0+0x56>
 800e312:	2c30      	cmp	r4, #48	; 0x30
 800e314:	d0a5      	beq.n	800e262 <_strtol_l.constprop.0+0x46>
 800e316:	230a      	movs	r3, #10
 800e318:	e7ab      	b.n	800e272 <_strtol_l.constprop.0+0x56>
 800e31a:	bf00      	nop
 800e31c:	0800f815 	.word	0x0800f815

0800e320 <strtol>:
 800e320:	4613      	mov	r3, r2
 800e322:	460a      	mov	r2, r1
 800e324:	4601      	mov	r1, r0
 800e326:	4802      	ldr	r0, [pc, #8]	; (800e330 <strtol+0x10>)
 800e328:	6800      	ldr	r0, [r0, #0]
 800e32a:	f7ff bf77 	b.w	800e21c <_strtol_l.constprop.0>
 800e32e:	bf00      	nop
 800e330:	20000410 	.word	0x20000410

0800e334 <std>:
 800e334:	2300      	movs	r3, #0
 800e336:	b510      	push	{r4, lr}
 800e338:	4604      	mov	r4, r0
 800e33a:	e9c0 3300 	strd	r3, r3, [r0]
 800e33e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e342:	6083      	str	r3, [r0, #8]
 800e344:	8181      	strh	r1, [r0, #12]
 800e346:	6643      	str	r3, [r0, #100]	; 0x64
 800e348:	81c2      	strh	r2, [r0, #14]
 800e34a:	6183      	str	r3, [r0, #24]
 800e34c:	4619      	mov	r1, r3
 800e34e:	2208      	movs	r2, #8
 800e350:	305c      	adds	r0, #92	; 0x5c
 800e352:	f000 f928 	bl	800e5a6 <memset>
 800e356:	4b0d      	ldr	r3, [pc, #52]	; (800e38c <std+0x58>)
 800e358:	6263      	str	r3, [r4, #36]	; 0x24
 800e35a:	4b0d      	ldr	r3, [pc, #52]	; (800e390 <std+0x5c>)
 800e35c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e35e:	4b0d      	ldr	r3, [pc, #52]	; (800e394 <std+0x60>)
 800e360:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e362:	4b0d      	ldr	r3, [pc, #52]	; (800e398 <std+0x64>)
 800e364:	6323      	str	r3, [r4, #48]	; 0x30
 800e366:	4b0d      	ldr	r3, [pc, #52]	; (800e39c <std+0x68>)
 800e368:	6224      	str	r4, [r4, #32]
 800e36a:	429c      	cmp	r4, r3
 800e36c:	d006      	beq.n	800e37c <std+0x48>
 800e36e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e372:	4294      	cmp	r4, r2
 800e374:	d002      	beq.n	800e37c <std+0x48>
 800e376:	33d0      	adds	r3, #208	; 0xd0
 800e378:	429c      	cmp	r4, r3
 800e37a:	d105      	bne.n	800e388 <std+0x54>
 800e37c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e384:	f000 b9f6 	b.w	800e774 <__retarget_lock_init_recursive>
 800e388:	bd10      	pop	{r4, pc}
 800e38a:	bf00      	nop
 800e38c:	0800e521 	.word	0x0800e521
 800e390:	0800e543 	.word	0x0800e543
 800e394:	0800e57b 	.word	0x0800e57b
 800e398:	0800e59f 	.word	0x0800e59f
 800e39c:	20001f4c 	.word	0x20001f4c

0800e3a0 <stdio_exit_handler>:
 800e3a0:	4a02      	ldr	r2, [pc, #8]	; (800e3ac <stdio_exit_handler+0xc>)
 800e3a2:	4903      	ldr	r1, [pc, #12]	; (800e3b0 <stdio_exit_handler+0x10>)
 800e3a4:	4803      	ldr	r0, [pc, #12]	; (800e3b4 <stdio_exit_handler+0x14>)
 800e3a6:	f000 b869 	b.w	800e47c <_fwalk_sglue>
 800e3aa:	bf00      	nop
 800e3ac:	200003b8 	.word	0x200003b8
 800e3b0:	0800f0c1 	.word	0x0800f0c1
 800e3b4:	200003c4 	.word	0x200003c4

0800e3b8 <cleanup_stdio>:
 800e3b8:	6841      	ldr	r1, [r0, #4]
 800e3ba:	4b0c      	ldr	r3, [pc, #48]	; (800e3ec <cleanup_stdio+0x34>)
 800e3bc:	4299      	cmp	r1, r3
 800e3be:	b510      	push	{r4, lr}
 800e3c0:	4604      	mov	r4, r0
 800e3c2:	d001      	beq.n	800e3c8 <cleanup_stdio+0x10>
 800e3c4:	f000 fe7c 	bl	800f0c0 <_fflush_r>
 800e3c8:	68a1      	ldr	r1, [r4, #8]
 800e3ca:	4b09      	ldr	r3, [pc, #36]	; (800e3f0 <cleanup_stdio+0x38>)
 800e3cc:	4299      	cmp	r1, r3
 800e3ce:	d002      	beq.n	800e3d6 <cleanup_stdio+0x1e>
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f000 fe75 	bl	800f0c0 <_fflush_r>
 800e3d6:	68e1      	ldr	r1, [r4, #12]
 800e3d8:	4b06      	ldr	r3, [pc, #24]	; (800e3f4 <cleanup_stdio+0x3c>)
 800e3da:	4299      	cmp	r1, r3
 800e3dc:	d004      	beq.n	800e3e8 <cleanup_stdio+0x30>
 800e3de:	4620      	mov	r0, r4
 800e3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3e4:	f000 be6c 	b.w	800f0c0 <_fflush_r>
 800e3e8:	bd10      	pop	{r4, pc}
 800e3ea:	bf00      	nop
 800e3ec:	20001f4c 	.word	0x20001f4c
 800e3f0:	20001fb4 	.word	0x20001fb4
 800e3f4:	2000201c 	.word	0x2000201c

0800e3f8 <global_stdio_init.part.0>:
 800e3f8:	b510      	push	{r4, lr}
 800e3fa:	4b0b      	ldr	r3, [pc, #44]	; (800e428 <global_stdio_init.part.0+0x30>)
 800e3fc:	4c0b      	ldr	r4, [pc, #44]	; (800e42c <global_stdio_init.part.0+0x34>)
 800e3fe:	4a0c      	ldr	r2, [pc, #48]	; (800e430 <global_stdio_init.part.0+0x38>)
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	4620      	mov	r0, r4
 800e404:	2200      	movs	r2, #0
 800e406:	2104      	movs	r1, #4
 800e408:	f7ff ff94 	bl	800e334 <std>
 800e40c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e410:	2201      	movs	r2, #1
 800e412:	2109      	movs	r1, #9
 800e414:	f7ff ff8e 	bl	800e334 <std>
 800e418:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e41c:	2202      	movs	r2, #2
 800e41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e422:	2112      	movs	r1, #18
 800e424:	f7ff bf86 	b.w	800e334 <std>
 800e428:	20002084 	.word	0x20002084
 800e42c:	20001f4c 	.word	0x20001f4c
 800e430:	0800e3a1 	.word	0x0800e3a1

0800e434 <__sfp_lock_acquire>:
 800e434:	4801      	ldr	r0, [pc, #4]	; (800e43c <__sfp_lock_acquire+0x8>)
 800e436:	f000 b99e 	b.w	800e776 <__retarget_lock_acquire_recursive>
 800e43a:	bf00      	nop
 800e43c:	2000208d 	.word	0x2000208d

0800e440 <__sfp_lock_release>:
 800e440:	4801      	ldr	r0, [pc, #4]	; (800e448 <__sfp_lock_release+0x8>)
 800e442:	f000 b999 	b.w	800e778 <__retarget_lock_release_recursive>
 800e446:	bf00      	nop
 800e448:	2000208d 	.word	0x2000208d

0800e44c <__sinit>:
 800e44c:	b510      	push	{r4, lr}
 800e44e:	4604      	mov	r4, r0
 800e450:	f7ff fff0 	bl	800e434 <__sfp_lock_acquire>
 800e454:	6a23      	ldr	r3, [r4, #32]
 800e456:	b11b      	cbz	r3, 800e460 <__sinit+0x14>
 800e458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e45c:	f7ff bff0 	b.w	800e440 <__sfp_lock_release>
 800e460:	4b04      	ldr	r3, [pc, #16]	; (800e474 <__sinit+0x28>)
 800e462:	6223      	str	r3, [r4, #32]
 800e464:	4b04      	ldr	r3, [pc, #16]	; (800e478 <__sinit+0x2c>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1f5      	bne.n	800e458 <__sinit+0xc>
 800e46c:	f7ff ffc4 	bl	800e3f8 <global_stdio_init.part.0>
 800e470:	e7f2      	b.n	800e458 <__sinit+0xc>
 800e472:	bf00      	nop
 800e474:	0800e3b9 	.word	0x0800e3b9
 800e478:	20002084 	.word	0x20002084

0800e47c <_fwalk_sglue>:
 800e47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e480:	4607      	mov	r7, r0
 800e482:	4688      	mov	r8, r1
 800e484:	4614      	mov	r4, r2
 800e486:	2600      	movs	r6, #0
 800e488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e48c:	f1b9 0901 	subs.w	r9, r9, #1
 800e490:	d505      	bpl.n	800e49e <_fwalk_sglue+0x22>
 800e492:	6824      	ldr	r4, [r4, #0]
 800e494:	2c00      	cmp	r4, #0
 800e496:	d1f7      	bne.n	800e488 <_fwalk_sglue+0xc>
 800e498:	4630      	mov	r0, r6
 800e49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e49e:	89ab      	ldrh	r3, [r5, #12]
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d907      	bls.n	800e4b4 <_fwalk_sglue+0x38>
 800e4a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e4a8:	3301      	adds	r3, #1
 800e4aa:	d003      	beq.n	800e4b4 <_fwalk_sglue+0x38>
 800e4ac:	4629      	mov	r1, r5
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	47c0      	blx	r8
 800e4b2:	4306      	orrs	r6, r0
 800e4b4:	3568      	adds	r5, #104	; 0x68
 800e4b6:	e7e9      	b.n	800e48c <_fwalk_sglue+0x10>

0800e4b8 <sniprintf>:
 800e4b8:	b40c      	push	{r2, r3}
 800e4ba:	b530      	push	{r4, r5, lr}
 800e4bc:	4b17      	ldr	r3, [pc, #92]	; (800e51c <sniprintf+0x64>)
 800e4be:	1e0c      	subs	r4, r1, #0
 800e4c0:	681d      	ldr	r5, [r3, #0]
 800e4c2:	b09d      	sub	sp, #116	; 0x74
 800e4c4:	da08      	bge.n	800e4d8 <sniprintf+0x20>
 800e4c6:	238b      	movs	r3, #139	; 0x8b
 800e4c8:	602b      	str	r3, [r5, #0]
 800e4ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ce:	b01d      	add	sp, #116	; 0x74
 800e4d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4d4:	b002      	add	sp, #8
 800e4d6:	4770      	bx	lr
 800e4d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e4dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e4e0:	bf14      	ite	ne
 800e4e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e4e6:	4623      	moveq	r3, r4
 800e4e8:	9304      	str	r3, [sp, #16]
 800e4ea:	9307      	str	r3, [sp, #28]
 800e4ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4f0:	9002      	str	r0, [sp, #8]
 800e4f2:	9006      	str	r0, [sp, #24]
 800e4f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e4fa:	ab21      	add	r3, sp, #132	; 0x84
 800e4fc:	a902      	add	r1, sp, #8
 800e4fe:	4628      	mov	r0, r5
 800e500:	9301      	str	r3, [sp, #4]
 800e502:	f000 fac9 	bl	800ea98 <_svfiprintf_r>
 800e506:	1c43      	adds	r3, r0, #1
 800e508:	bfbc      	itt	lt
 800e50a:	238b      	movlt	r3, #139	; 0x8b
 800e50c:	602b      	strlt	r3, [r5, #0]
 800e50e:	2c00      	cmp	r4, #0
 800e510:	d0dd      	beq.n	800e4ce <sniprintf+0x16>
 800e512:	9b02      	ldr	r3, [sp, #8]
 800e514:	2200      	movs	r2, #0
 800e516:	701a      	strb	r2, [r3, #0]
 800e518:	e7d9      	b.n	800e4ce <sniprintf+0x16>
 800e51a:	bf00      	nop
 800e51c:	20000410 	.word	0x20000410

0800e520 <__sread>:
 800e520:	b510      	push	{r4, lr}
 800e522:	460c      	mov	r4, r1
 800e524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e528:	f000 f8d6 	bl	800e6d8 <_read_r>
 800e52c:	2800      	cmp	r0, #0
 800e52e:	bfab      	itete	ge
 800e530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e532:	89a3      	ldrhlt	r3, [r4, #12]
 800e534:	181b      	addge	r3, r3, r0
 800e536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e53a:	bfac      	ite	ge
 800e53c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e53e:	81a3      	strhlt	r3, [r4, #12]
 800e540:	bd10      	pop	{r4, pc}

0800e542 <__swrite>:
 800e542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e546:	461f      	mov	r7, r3
 800e548:	898b      	ldrh	r3, [r1, #12]
 800e54a:	05db      	lsls	r3, r3, #23
 800e54c:	4605      	mov	r5, r0
 800e54e:	460c      	mov	r4, r1
 800e550:	4616      	mov	r6, r2
 800e552:	d505      	bpl.n	800e560 <__swrite+0x1e>
 800e554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e558:	2302      	movs	r3, #2
 800e55a:	2200      	movs	r2, #0
 800e55c:	f000 f8aa 	bl	800e6b4 <_lseek_r>
 800e560:	89a3      	ldrh	r3, [r4, #12]
 800e562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e56a:	81a3      	strh	r3, [r4, #12]
 800e56c:	4632      	mov	r2, r6
 800e56e:	463b      	mov	r3, r7
 800e570:	4628      	mov	r0, r5
 800e572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e576:	f000 b8c1 	b.w	800e6fc <_write_r>

0800e57a <__sseek>:
 800e57a:	b510      	push	{r4, lr}
 800e57c:	460c      	mov	r4, r1
 800e57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e582:	f000 f897 	bl	800e6b4 <_lseek_r>
 800e586:	1c43      	adds	r3, r0, #1
 800e588:	89a3      	ldrh	r3, [r4, #12]
 800e58a:	bf15      	itete	ne
 800e58c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e58e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e596:	81a3      	strheq	r3, [r4, #12]
 800e598:	bf18      	it	ne
 800e59a:	81a3      	strhne	r3, [r4, #12]
 800e59c:	bd10      	pop	{r4, pc}

0800e59e <__sclose>:
 800e59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a2:	f000 b877 	b.w	800e694 <_close_r>

0800e5a6 <memset>:
 800e5a6:	4402      	add	r2, r0
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d100      	bne.n	800e5b0 <memset+0xa>
 800e5ae:	4770      	bx	lr
 800e5b0:	f803 1b01 	strb.w	r1, [r3], #1
 800e5b4:	e7f9      	b.n	800e5aa <memset+0x4>

0800e5b6 <strncpy>:
 800e5b6:	b510      	push	{r4, lr}
 800e5b8:	3901      	subs	r1, #1
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	b132      	cbz	r2, 800e5cc <strncpy+0x16>
 800e5be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e5c2:	f803 4b01 	strb.w	r4, [r3], #1
 800e5c6:	3a01      	subs	r2, #1
 800e5c8:	2c00      	cmp	r4, #0
 800e5ca:	d1f7      	bne.n	800e5bc <strncpy+0x6>
 800e5cc:	441a      	add	r2, r3
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d100      	bne.n	800e5d6 <strncpy+0x20>
 800e5d4:	bd10      	pop	{r4, pc}
 800e5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800e5da:	e7f9      	b.n	800e5d0 <strncpy+0x1a>

0800e5dc <strtok>:
 800e5dc:	4b16      	ldr	r3, [pc, #88]	; (800e638 <strtok+0x5c>)
 800e5de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5e0:	681e      	ldr	r6, [r3, #0]
 800e5e2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800e5e4:	4605      	mov	r5, r0
 800e5e6:	b9fc      	cbnz	r4, 800e628 <strtok+0x4c>
 800e5e8:	2050      	movs	r0, #80	; 0x50
 800e5ea:	9101      	str	r1, [sp, #4]
 800e5ec:	f000 f946 	bl	800e87c <malloc>
 800e5f0:	9901      	ldr	r1, [sp, #4]
 800e5f2:	6470      	str	r0, [r6, #68]	; 0x44
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	b920      	cbnz	r0, 800e602 <strtok+0x26>
 800e5f8:	4b10      	ldr	r3, [pc, #64]	; (800e63c <strtok+0x60>)
 800e5fa:	4811      	ldr	r0, [pc, #68]	; (800e640 <strtok+0x64>)
 800e5fc:	215b      	movs	r1, #91	; 0x5b
 800e5fe:	f000 f8d3 	bl	800e7a8 <__assert_func>
 800e602:	e9c0 4400 	strd	r4, r4, [r0]
 800e606:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e60a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e60e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e612:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e616:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e61a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e61e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e622:	6184      	str	r4, [r0, #24]
 800e624:	7704      	strb	r4, [r0, #28]
 800e626:	6244      	str	r4, [r0, #36]	; 0x24
 800e628:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800e62a:	2301      	movs	r3, #1
 800e62c:	4628      	mov	r0, r5
 800e62e:	b002      	add	sp, #8
 800e630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e634:	f000 b806 	b.w	800e644 <__strtok_r>
 800e638:	20000410 	.word	0x20000410
 800e63c:	0800f915 	.word	0x0800f915
 800e640:	0800f92c 	.word	0x0800f92c

0800e644 <__strtok_r>:
 800e644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e646:	b908      	cbnz	r0, 800e64c <__strtok_r+0x8>
 800e648:	6810      	ldr	r0, [r2, #0]
 800e64a:	b188      	cbz	r0, 800e670 <__strtok_r+0x2c>
 800e64c:	4604      	mov	r4, r0
 800e64e:	4620      	mov	r0, r4
 800e650:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e654:	460f      	mov	r7, r1
 800e656:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e65a:	b91e      	cbnz	r6, 800e664 <__strtok_r+0x20>
 800e65c:	b965      	cbnz	r5, 800e678 <__strtok_r+0x34>
 800e65e:	6015      	str	r5, [r2, #0]
 800e660:	4628      	mov	r0, r5
 800e662:	e005      	b.n	800e670 <__strtok_r+0x2c>
 800e664:	42b5      	cmp	r5, r6
 800e666:	d1f6      	bne.n	800e656 <__strtok_r+0x12>
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1f0      	bne.n	800e64e <__strtok_r+0xa>
 800e66c:	6014      	str	r4, [r2, #0]
 800e66e:	7003      	strb	r3, [r0, #0]
 800e670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e672:	461c      	mov	r4, r3
 800e674:	e00c      	b.n	800e690 <__strtok_r+0x4c>
 800e676:	b915      	cbnz	r5, 800e67e <__strtok_r+0x3a>
 800e678:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e67c:	460e      	mov	r6, r1
 800e67e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e682:	42ab      	cmp	r3, r5
 800e684:	d1f7      	bne.n	800e676 <__strtok_r+0x32>
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0f3      	beq.n	800e672 <__strtok_r+0x2e>
 800e68a:	2300      	movs	r3, #0
 800e68c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e690:	6014      	str	r4, [r2, #0]
 800e692:	e7ed      	b.n	800e670 <__strtok_r+0x2c>

0800e694 <_close_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4d06      	ldr	r5, [pc, #24]	; (800e6b0 <_close_r+0x1c>)
 800e698:	2300      	movs	r3, #0
 800e69a:	4604      	mov	r4, r0
 800e69c:	4608      	mov	r0, r1
 800e69e:	602b      	str	r3, [r5, #0]
 800e6a0:	f7f2 ff3f 	bl	8001522 <_close>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_close_r+0x1a>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_close_r+0x1a>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	20002088 	.word	0x20002088

0800e6b4 <_lseek_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4d07      	ldr	r5, [pc, #28]	; (800e6d4 <_lseek_r+0x20>)
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	4608      	mov	r0, r1
 800e6bc:	4611      	mov	r1, r2
 800e6be:	2200      	movs	r2, #0
 800e6c0:	602a      	str	r2, [r5, #0]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	f7f2 ff54 	bl	8001570 <_lseek>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	d102      	bne.n	800e6d2 <_lseek_r+0x1e>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	b103      	cbz	r3, 800e6d2 <_lseek_r+0x1e>
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	20002088 	.word	0x20002088

0800e6d8 <_read_r>:
 800e6d8:	b538      	push	{r3, r4, r5, lr}
 800e6da:	4d07      	ldr	r5, [pc, #28]	; (800e6f8 <_read_r+0x20>)
 800e6dc:	4604      	mov	r4, r0
 800e6de:	4608      	mov	r0, r1
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	602a      	str	r2, [r5, #0]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	f7f2 fee2 	bl	80014b0 <_read>
 800e6ec:	1c43      	adds	r3, r0, #1
 800e6ee:	d102      	bne.n	800e6f6 <_read_r+0x1e>
 800e6f0:	682b      	ldr	r3, [r5, #0]
 800e6f2:	b103      	cbz	r3, 800e6f6 <_read_r+0x1e>
 800e6f4:	6023      	str	r3, [r4, #0]
 800e6f6:	bd38      	pop	{r3, r4, r5, pc}
 800e6f8:	20002088 	.word	0x20002088

0800e6fc <_write_r>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	4d07      	ldr	r5, [pc, #28]	; (800e71c <_write_r+0x20>)
 800e700:	4604      	mov	r4, r0
 800e702:	4608      	mov	r0, r1
 800e704:	4611      	mov	r1, r2
 800e706:	2200      	movs	r2, #0
 800e708:	602a      	str	r2, [r5, #0]
 800e70a:	461a      	mov	r2, r3
 800e70c:	f7f2 feed 	bl	80014ea <_write>
 800e710:	1c43      	adds	r3, r0, #1
 800e712:	d102      	bne.n	800e71a <_write_r+0x1e>
 800e714:	682b      	ldr	r3, [r5, #0]
 800e716:	b103      	cbz	r3, 800e71a <_write_r+0x1e>
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	bd38      	pop	{r3, r4, r5, pc}
 800e71c:	20002088 	.word	0x20002088

0800e720 <__errno>:
 800e720:	4b01      	ldr	r3, [pc, #4]	; (800e728 <__errno+0x8>)
 800e722:	6818      	ldr	r0, [r3, #0]
 800e724:	4770      	bx	lr
 800e726:	bf00      	nop
 800e728:	20000410 	.word	0x20000410

0800e72c <__libc_init_array>:
 800e72c:	b570      	push	{r4, r5, r6, lr}
 800e72e:	4d0d      	ldr	r5, [pc, #52]	; (800e764 <__libc_init_array+0x38>)
 800e730:	4c0d      	ldr	r4, [pc, #52]	; (800e768 <__libc_init_array+0x3c>)
 800e732:	1b64      	subs	r4, r4, r5
 800e734:	10a4      	asrs	r4, r4, #2
 800e736:	2600      	movs	r6, #0
 800e738:	42a6      	cmp	r6, r4
 800e73a:	d109      	bne.n	800e750 <__libc_init_array+0x24>
 800e73c:	4d0b      	ldr	r5, [pc, #44]	; (800e76c <__libc_init_array+0x40>)
 800e73e:	4c0c      	ldr	r4, [pc, #48]	; (800e770 <__libc_init_array+0x44>)
 800e740:	f001 f802 	bl	800f748 <_init>
 800e744:	1b64      	subs	r4, r4, r5
 800e746:	10a4      	asrs	r4, r4, #2
 800e748:	2600      	movs	r6, #0
 800e74a:	42a6      	cmp	r6, r4
 800e74c:	d105      	bne.n	800e75a <__libc_init_array+0x2e>
 800e74e:	bd70      	pop	{r4, r5, r6, pc}
 800e750:	f855 3b04 	ldr.w	r3, [r5], #4
 800e754:	4798      	blx	r3
 800e756:	3601      	adds	r6, #1
 800e758:	e7ee      	b.n	800e738 <__libc_init_array+0xc>
 800e75a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e75e:	4798      	blx	r3
 800e760:	3601      	adds	r6, #1
 800e762:	e7f2      	b.n	800e74a <__libc_init_array+0x1e>
 800e764:	0800fa00 	.word	0x0800fa00
 800e768:	0800fa00 	.word	0x0800fa00
 800e76c:	0800fa00 	.word	0x0800fa00
 800e770:	0800fa04 	.word	0x0800fa04

0800e774 <__retarget_lock_init_recursive>:
 800e774:	4770      	bx	lr

0800e776 <__retarget_lock_acquire_recursive>:
 800e776:	4770      	bx	lr

0800e778 <__retarget_lock_release_recursive>:
 800e778:	4770      	bx	lr

0800e77a <strcpy>:
 800e77a:	4603      	mov	r3, r0
 800e77c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e780:	f803 2b01 	strb.w	r2, [r3], #1
 800e784:	2a00      	cmp	r2, #0
 800e786:	d1f9      	bne.n	800e77c <strcpy+0x2>
 800e788:	4770      	bx	lr

0800e78a <memcpy>:
 800e78a:	440a      	add	r2, r1
 800e78c:	4291      	cmp	r1, r2
 800e78e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e792:	d100      	bne.n	800e796 <memcpy+0xc>
 800e794:	4770      	bx	lr
 800e796:	b510      	push	{r4, lr}
 800e798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e79c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7a0:	4291      	cmp	r1, r2
 800e7a2:	d1f9      	bne.n	800e798 <memcpy+0xe>
 800e7a4:	bd10      	pop	{r4, pc}
	...

0800e7a8 <__assert_func>:
 800e7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7aa:	4614      	mov	r4, r2
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	4b09      	ldr	r3, [pc, #36]	; (800e7d4 <__assert_func+0x2c>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4605      	mov	r5, r0
 800e7b4:	68d8      	ldr	r0, [r3, #12]
 800e7b6:	b14c      	cbz	r4, 800e7cc <__assert_func+0x24>
 800e7b8:	4b07      	ldr	r3, [pc, #28]	; (800e7d8 <__assert_func+0x30>)
 800e7ba:	9100      	str	r1, [sp, #0]
 800e7bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7c0:	4906      	ldr	r1, [pc, #24]	; (800e7dc <__assert_func+0x34>)
 800e7c2:	462b      	mov	r3, r5
 800e7c4:	f000 fca4 	bl	800f110 <fiprintf>
 800e7c8:	f000 fcde 	bl	800f188 <abort>
 800e7cc:	4b04      	ldr	r3, [pc, #16]	; (800e7e0 <__assert_func+0x38>)
 800e7ce:	461c      	mov	r4, r3
 800e7d0:	e7f3      	b.n	800e7ba <__assert_func+0x12>
 800e7d2:	bf00      	nop
 800e7d4:	20000410 	.word	0x20000410
 800e7d8:	0800f986 	.word	0x0800f986
 800e7dc:	0800f993 	.word	0x0800f993
 800e7e0:	0800f9c1 	.word	0x0800f9c1

0800e7e4 <_free_r>:
 800e7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7e6:	2900      	cmp	r1, #0
 800e7e8:	d044      	beq.n	800e874 <_free_r+0x90>
 800e7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7ee:	9001      	str	r0, [sp, #4]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f1a1 0404 	sub.w	r4, r1, #4
 800e7f6:	bfb8      	it	lt
 800e7f8:	18e4      	addlt	r4, r4, r3
 800e7fa:	f000 f8e7 	bl	800e9cc <__malloc_lock>
 800e7fe:	4a1e      	ldr	r2, [pc, #120]	; (800e878 <_free_r+0x94>)
 800e800:	9801      	ldr	r0, [sp, #4]
 800e802:	6813      	ldr	r3, [r2, #0]
 800e804:	b933      	cbnz	r3, 800e814 <_free_r+0x30>
 800e806:	6063      	str	r3, [r4, #4]
 800e808:	6014      	str	r4, [r2, #0]
 800e80a:	b003      	add	sp, #12
 800e80c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e810:	f000 b8e2 	b.w	800e9d8 <__malloc_unlock>
 800e814:	42a3      	cmp	r3, r4
 800e816:	d908      	bls.n	800e82a <_free_r+0x46>
 800e818:	6825      	ldr	r5, [r4, #0]
 800e81a:	1961      	adds	r1, r4, r5
 800e81c:	428b      	cmp	r3, r1
 800e81e:	bf01      	itttt	eq
 800e820:	6819      	ldreq	r1, [r3, #0]
 800e822:	685b      	ldreq	r3, [r3, #4]
 800e824:	1949      	addeq	r1, r1, r5
 800e826:	6021      	streq	r1, [r4, #0]
 800e828:	e7ed      	b.n	800e806 <_free_r+0x22>
 800e82a:	461a      	mov	r2, r3
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	b10b      	cbz	r3, 800e834 <_free_r+0x50>
 800e830:	42a3      	cmp	r3, r4
 800e832:	d9fa      	bls.n	800e82a <_free_r+0x46>
 800e834:	6811      	ldr	r1, [r2, #0]
 800e836:	1855      	adds	r5, r2, r1
 800e838:	42a5      	cmp	r5, r4
 800e83a:	d10b      	bne.n	800e854 <_free_r+0x70>
 800e83c:	6824      	ldr	r4, [r4, #0]
 800e83e:	4421      	add	r1, r4
 800e840:	1854      	adds	r4, r2, r1
 800e842:	42a3      	cmp	r3, r4
 800e844:	6011      	str	r1, [r2, #0]
 800e846:	d1e0      	bne.n	800e80a <_free_r+0x26>
 800e848:	681c      	ldr	r4, [r3, #0]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	6053      	str	r3, [r2, #4]
 800e84e:	440c      	add	r4, r1
 800e850:	6014      	str	r4, [r2, #0]
 800e852:	e7da      	b.n	800e80a <_free_r+0x26>
 800e854:	d902      	bls.n	800e85c <_free_r+0x78>
 800e856:	230c      	movs	r3, #12
 800e858:	6003      	str	r3, [r0, #0]
 800e85a:	e7d6      	b.n	800e80a <_free_r+0x26>
 800e85c:	6825      	ldr	r5, [r4, #0]
 800e85e:	1961      	adds	r1, r4, r5
 800e860:	428b      	cmp	r3, r1
 800e862:	bf04      	itt	eq
 800e864:	6819      	ldreq	r1, [r3, #0]
 800e866:	685b      	ldreq	r3, [r3, #4]
 800e868:	6063      	str	r3, [r4, #4]
 800e86a:	bf04      	itt	eq
 800e86c:	1949      	addeq	r1, r1, r5
 800e86e:	6021      	streq	r1, [r4, #0]
 800e870:	6054      	str	r4, [r2, #4]
 800e872:	e7ca      	b.n	800e80a <_free_r+0x26>
 800e874:	b003      	add	sp, #12
 800e876:	bd30      	pop	{r4, r5, pc}
 800e878:	20002090 	.word	0x20002090

0800e87c <malloc>:
 800e87c:	4b02      	ldr	r3, [pc, #8]	; (800e888 <malloc+0xc>)
 800e87e:	4601      	mov	r1, r0
 800e880:	6818      	ldr	r0, [r3, #0]
 800e882:	f000 b823 	b.w	800e8cc <_malloc_r>
 800e886:	bf00      	nop
 800e888:	20000410 	.word	0x20000410

0800e88c <sbrk_aligned>:
 800e88c:	b570      	push	{r4, r5, r6, lr}
 800e88e:	4e0e      	ldr	r6, [pc, #56]	; (800e8c8 <sbrk_aligned+0x3c>)
 800e890:	460c      	mov	r4, r1
 800e892:	6831      	ldr	r1, [r6, #0]
 800e894:	4605      	mov	r5, r0
 800e896:	b911      	cbnz	r1, 800e89e <sbrk_aligned+0x12>
 800e898:	f000 fc66 	bl	800f168 <_sbrk_r>
 800e89c:	6030      	str	r0, [r6, #0]
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	f000 fc61 	bl	800f168 <_sbrk_r>
 800e8a6:	1c43      	adds	r3, r0, #1
 800e8a8:	d00a      	beq.n	800e8c0 <sbrk_aligned+0x34>
 800e8aa:	1cc4      	adds	r4, r0, #3
 800e8ac:	f024 0403 	bic.w	r4, r4, #3
 800e8b0:	42a0      	cmp	r0, r4
 800e8b2:	d007      	beq.n	800e8c4 <sbrk_aligned+0x38>
 800e8b4:	1a21      	subs	r1, r4, r0
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	f000 fc56 	bl	800f168 <_sbrk_r>
 800e8bc:	3001      	adds	r0, #1
 800e8be:	d101      	bne.n	800e8c4 <sbrk_aligned+0x38>
 800e8c0:	f04f 34ff 	mov.w	r4, #4294967295
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	bd70      	pop	{r4, r5, r6, pc}
 800e8c8:	20002094 	.word	0x20002094

0800e8cc <_malloc_r>:
 800e8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8d0:	1ccd      	adds	r5, r1, #3
 800e8d2:	f025 0503 	bic.w	r5, r5, #3
 800e8d6:	3508      	adds	r5, #8
 800e8d8:	2d0c      	cmp	r5, #12
 800e8da:	bf38      	it	cc
 800e8dc:	250c      	movcc	r5, #12
 800e8de:	2d00      	cmp	r5, #0
 800e8e0:	4607      	mov	r7, r0
 800e8e2:	db01      	blt.n	800e8e8 <_malloc_r+0x1c>
 800e8e4:	42a9      	cmp	r1, r5
 800e8e6:	d905      	bls.n	800e8f4 <_malloc_r+0x28>
 800e8e8:	230c      	movs	r3, #12
 800e8ea:	603b      	str	r3, [r7, #0]
 800e8ec:	2600      	movs	r6, #0
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e9c8 <_malloc_r+0xfc>
 800e8f8:	f000 f868 	bl	800e9cc <__malloc_lock>
 800e8fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e900:	461c      	mov	r4, r3
 800e902:	bb5c      	cbnz	r4, 800e95c <_malloc_r+0x90>
 800e904:	4629      	mov	r1, r5
 800e906:	4638      	mov	r0, r7
 800e908:	f7ff ffc0 	bl	800e88c <sbrk_aligned>
 800e90c:	1c43      	adds	r3, r0, #1
 800e90e:	4604      	mov	r4, r0
 800e910:	d155      	bne.n	800e9be <_malloc_r+0xf2>
 800e912:	f8d8 4000 	ldr.w	r4, [r8]
 800e916:	4626      	mov	r6, r4
 800e918:	2e00      	cmp	r6, #0
 800e91a:	d145      	bne.n	800e9a8 <_malloc_r+0xdc>
 800e91c:	2c00      	cmp	r4, #0
 800e91e:	d048      	beq.n	800e9b2 <_malloc_r+0xe6>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	4631      	mov	r1, r6
 800e924:	4638      	mov	r0, r7
 800e926:	eb04 0903 	add.w	r9, r4, r3
 800e92a:	f000 fc1d 	bl	800f168 <_sbrk_r>
 800e92e:	4581      	cmp	r9, r0
 800e930:	d13f      	bne.n	800e9b2 <_malloc_r+0xe6>
 800e932:	6821      	ldr	r1, [r4, #0]
 800e934:	1a6d      	subs	r5, r5, r1
 800e936:	4629      	mov	r1, r5
 800e938:	4638      	mov	r0, r7
 800e93a:	f7ff ffa7 	bl	800e88c <sbrk_aligned>
 800e93e:	3001      	adds	r0, #1
 800e940:	d037      	beq.n	800e9b2 <_malloc_r+0xe6>
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	442b      	add	r3, r5
 800e946:	6023      	str	r3, [r4, #0]
 800e948:	f8d8 3000 	ldr.w	r3, [r8]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d038      	beq.n	800e9c2 <_malloc_r+0xf6>
 800e950:	685a      	ldr	r2, [r3, #4]
 800e952:	42a2      	cmp	r2, r4
 800e954:	d12b      	bne.n	800e9ae <_malloc_r+0xe2>
 800e956:	2200      	movs	r2, #0
 800e958:	605a      	str	r2, [r3, #4]
 800e95a:	e00f      	b.n	800e97c <_malloc_r+0xb0>
 800e95c:	6822      	ldr	r2, [r4, #0]
 800e95e:	1b52      	subs	r2, r2, r5
 800e960:	d41f      	bmi.n	800e9a2 <_malloc_r+0xd6>
 800e962:	2a0b      	cmp	r2, #11
 800e964:	d917      	bls.n	800e996 <_malloc_r+0xca>
 800e966:	1961      	adds	r1, r4, r5
 800e968:	42a3      	cmp	r3, r4
 800e96a:	6025      	str	r5, [r4, #0]
 800e96c:	bf18      	it	ne
 800e96e:	6059      	strne	r1, [r3, #4]
 800e970:	6863      	ldr	r3, [r4, #4]
 800e972:	bf08      	it	eq
 800e974:	f8c8 1000 	streq.w	r1, [r8]
 800e978:	5162      	str	r2, [r4, r5]
 800e97a:	604b      	str	r3, [r1, #4]
 800e97c:	4638      	mov	r0, r7
 800e97e:	f104 060b 	add.w	r6, r4, #11
 800e982:	f000 f829 	bl	800e9d8 <__malloc_unlock>
 800e986:	f026 0607 	bic.w	r6, r6, #7
 800e98a:	1d23      	adds	r3, r4, #4
 800e98c:	1af2      	subs	r2, r6, r3
 800e98e:	d0ae      	beq.n	800e8ee <_malloc_r+0x22>
 800e990:	1b9b      	subs	r3, r3, r6
 800e992:	50a3      	str	r3, [r4, r2]
 800e994:	e7ab      	b.n	800e8ee <_malloc_r+0x22>
 800e996:	42a3      	cmp	r3, r4
 800e998:	6862      	ldr	r2, [r4, #4]
 800e99a:	d1dd      	bne.n	800e958 <_malloc_r+0x8c>
 800e99c:	f8c8 2000 	str.w	r2, [r8]
 800e9a0:	e7ec      	b.n	800e97c <_malloc_r+0xb0>
 800e9a2:	4623      	mov	r3, r4
 800e9a4:	6864      	ldr	r4, [r4, #4]
 800e9a6:	e7ac      	b.n	800e902 <_malloc_r+0x36>
 800e9a8:	4634      	mov	r4, r6
 800e9aa:	6876      	ldr	r6, [r6, #4]
 800e9ac:	e7b4      	b.n	800e918 <_malloc_r+0x4c>
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	e7cc      	b.n	800e94c <_malloc_r+0x80>
 800e9b2:	230c      	movs	r3, #12
 800e9b4:	603b      	str	r3, [r7, #0]
 800e9b6:	4638      	mov	r0, r7
 800e9b8:	f000 f80e 	bl	800e9d8 <__malloc_unlock>
 800e9bc:	e797      	b.n	800e8ee <_malloc_r+0x22>
 800e9be:	6025      	str	r5, [r4, #0]
 800e9c0:	e7dc      	b.n	800e97c <_malloc_r+0xb0>
 800e9c2:	605b      	str	r3, [r3, #4]
 800e9c4:	deff      	udf	#255	; 0xff
 800e9c6:	bf00      	nop
 800e9c8:	20002090 	.word	0x20002090

0800e9cc <__malloc_lock>:
 800e9cc:	4801      	ldr	r0, [pc, #4]	; (800e9d4 <__malloc_lock+0x8>)
 800e9ce:	f7ff bed2 	b.w	800e776 <__retarget_lock_acquire_recursive>
 800e9d2:	bf00      	nop
 800e9d4:	2000208c 	.word	0x2000208c

0800e9d8 <__malloc_unlock>:
 800e9d8:	4801      	ldr	r0, [pc, #4]	; (800e9e0 <__malloc_unlock+0x8>)
 800e9da:	f7ff becd 	b.w	800e778 <__retarget_lock_release_recursive>
 800e9de:	bf00      	nop
 800e9e0:	2000208c 	.word	0x2000208c

0800e9e4 <__ssputs_r>:
 800e9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e8:	688e      	ldr	r6, [r1, #8]
 800e9ea:	461f      	mov	r7, r3
 800e9ec:	42be      	cmp	r6, r7
 800e9ee:	680b      	ldr	r3, [r1, #0]
 800e9f0:	4682      	mov	sl, r0
 800e9f2:	460c      	mov	r4, r1
 800e9f4:	4690      	mov	r8, r2
 800e9f6:	d82c      	bhi.n	800ea52 <__ssputs_r+0x6e>
 800e9f8:	898a      	ldrh	r2, [r1, #12]
 800e9fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9fe:	d026      	beq.n	800ea4e <__ssputs_r+0x6a>
 800ea00:	6965      	ldr	r5, [r4, #20]
 800ea02:	6909      	ldr	r1, [r1, #16]
 800ea04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea08:	eba3 0901 	sub.w	r9, r3, r1
 800ea0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea10:	1c7b      	adds	r3, r7, #1
 800ea12:	444b      	add	r3, r9
 800ea14:	106d      	asrs	r5, r5, #1
 800ea16:	429d      	cmp	r5, r3
 800ea18:	bf38      	it	cc
 800ea1a:	461d      	movcc	r5, r3
 800ea1c:	0553      	lsls	r3, r2, #21
 800ea1e:	d527      	bpl.n	800ea70 <__ssputs_r+0x8c>
 800ea20:	4629      	mov	r1, r5
 800ea22:	f7ff ff53 	bl	800e8cc <_malloc_r>
 800ea26:	4606      	mov	r6, r0
 800ea28:	b360      	cbz	r0, 800ea84 <__ssputs_r+0xa0>
 800ea2a:	6921      	ldr	r1, [r4, #16]
 800ea2c:	464a      	mov	r2, r9
 800ea2e:	f7ff feac 	bl	800e78a <memcpy>
 800ea32:	89a3      	ldrh	r3, [r4, #12]
 800ea34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea3c:	81a3      	strh	r3, [r4, #12]
 800ea3e:	6126      	str	r6, [r4, #16]
 800ea40:	6165      	str	r5, [r4, #20]
 800ea42:	444e      	add	r6, r9
 800ea44:	eba5 0509 	sub.w	r5, r5, r9
 800ea48:	6026      	str	r6, [r4, #0]
 800ea4a:	60a5      	str	r5, [r4, #8]
 800ea4c:	463e      	mov	r6, r7
 800ea4e:	42be      	cmp	r6, r7
 800ea50:	d900      	bls.n	800ea54 <__ssputs_r+0x70>
 800ea52:	463e      	mov	r6, r7
 800ea54:	6820      	ldr	r0, [r4, #0]
 800ea56:	4632      	mov	r2, r6
 800ea58:	4641      	mov	r1, r8
 800ea5a:	f000 fb6b 	bl	800f134 <memmove>
 800ea5e:	68a3      	ldr	r3, [r4, #8]
 800ea60:	1b9b      	subs	r3, r3, r6
 800ea62:	60a3      	str	r3, [r4, #8]
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	4433      	add	r3, r6
 800ea68:	6023      	str	r3, [r4, #0]
 800ea6a:	2000      	movs	r0, #0
 800ea6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea70:	462a      	mov	r2, r5
 800ea72:	f000 fb90 	bl	800f196 <_realloc_r>
 800ea76:	4606      	mov	r6, r0
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d1e0      	bne.n	800ea3e <__ssputs_r+0x5a>
 800ea7c:	6921      	ldr	r1, [r4, #16]
 800ea7e:	4650      	mov	r0, sl
 800ea80:	f7ff feb0 	bl	800e7e4 <_free_r>
 800ea84:	230c      	movs	r3, #12
 800ea86:	f8ca 3000 	str.w	r3, [sl]
 800ea8a:	89a3      	ldrh	r3, [r4, #12]
 800ea8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea90:	81a3      	strh	r3, [r4, #12]
 800ea92:	f04f 30ff 	mov.w	r0, #4294967295
 800ea96:	e7e9      	b.n	800ea6c <__ssputs_r+0x88>

0800ea98 <_svfiprintf_r>:
 800ea98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9c:	4698      	mov	r8, r3
 800ea9e:	898b      	ldrh	r3, [r1, #12]
 800eaa0:	061b      	lsls	r3, r3, #24
 800eaa2:	b09d      	sub	sp, #116	; 0x74
 800eaa4:	4607      	mov	r7, r0
 800eaa6:	460d      	mov	r5, r1
 800eaa8:	4614      	mov	r4, r2
 800eaaa:	d50e      	bpl.n	800eaca <_svfiprintf_r+0x32>
 800eaac:	690b      	ldr	r3, [r1, #16]
 800eaae:	b963      	cbnz	r3, 800eaca <_svfiprintf_r+0x32>
 800eab0:	2140      	movs	r1, #64	; 0x40
 800eab2:	f7ff ff0b 	bl	800e8cc <_malloc_r>
 800eab6:	6028      	str	r0, [r5, #0]
 800eab8:	6128      	str	r0, [r5, #16]
 800eaba:	b920      	cbnz	r0, 800eac6 <_svfiprintf_r+0x2e>
 800eabc:	230c      	movs	r3, #12
 800eabe:	603b      	str	r3, [r7, #0]
 800eac0:	f04f 30ff 	mov.w	r0, #4294967295
 800eac4:	e0d0      	b.n	800ec68 <_svfiprintf_r+0x1d0>
 800eac6:	2340      	movs	r3, #64	; 0x40
 800eac8:	616b      	str	r3, [r5, #20]
 800eaca:	2300      	movs	r3, #0
 800eacc:	9309      	str	r3, [sp, #36]	; 0x24
 800eace:	2320      	movs	r3, #32
 800ead0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ead4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ead8:	2330      	movs	r3, #48	; 0x30
 800eada:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ec80 <_svfiprintf_r+0x1e8>
 800eade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eae2:	f04f 0901 	mov.w	r9, #1
 800eae6:	4623      	mov	r3, r4
 800eae8:	469a      	mov	sl, r3
 800eaea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eaee:	b10a      	cbz	r2, 800eaf4 <_svfiprintf_r+0x5c>
 800eaf0:	2a25      	cmp	r2, #37	; 0x25
 800eaf2:	d1f9      	bne.n	800eae8 <_svfiprintf_r+0x50>
 800eaf4:	ebba 0b04 	subs.w	fp, sl, r4
 800eaf8:	d00b      	beq.n	800eb12 <_svfiprintf_r+0x7a>
 800eafa:	465b      	mov	r3, fp
 800eafc:	4622      	mov	r2, r4
 800eafe:	4629      	mov	r1, r5
 800eb00:	4638      	mov	r0, r7
 800eb02:	f7ff ff6f 	bl	800e9e4 <__ssputs_r>
 800eb06:	3001      	adds	r0, #1
 800eb08:	f000 80a9 	beq.w	800ec5e <_svfiprintf_r+0x1c6>
 800eb0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb0e:	445a      	add	r2, fp
 800eb10:	9209      	str	r2, [sp, #36]	; 0x24
 800eb12:	f89a 3000 	ldrb.w	r3, [sl]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f000 80a1 	beq.w	800ec5e <_svfiprintf_r+0x1c6>
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb26:	f10a 0a01 	add.w	sl, sl, #1
 800eb2a:	9304      	str	r3, [sp, #16]
 800eb2c:	9307      	str	r3, [sp, #28]
 800eb2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb32:	931a      	str	r3, [sp, #104]	; 0x68
 800eb34:	4654      	mov	r4, sl
 800eb36:	2205      	movs	r2, #5
 800eb38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb3c:	4850      	ldr	r0, [pc, #320]	; (800ec80 <_svfiprintf_r+0x1e8>)
 800eb3e:	f7f1 fb57 	bl	80001f0 <memchr>
 800eb42:	9a04      	ldr	r2, [sp, #16]
 800eb44:	b9d8      	cbnz	r0, 800eb7e <_svfiprintf_r+0xe6>
 800eb46:	06d0      	lsls	r0, r2, #27
 800eb48:	bf44      	itt	mi
 800eb4a:	2320      	movmi	r3, #32
 800eb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb50:	0711      	lsls	r1, r2, #28
 800eb52:	bf44      	itt	mi
 800eb54:	232b      	movmi	r3, #43	; 0x2b
 800eb56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb5a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb5e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb60:	d015      	beq.n	800eb8e <_svfiprintf_r+0xf6>
 800eb62:	9a07      	ldr	r2, [sp, #28]
 800eb64:	4654      	mov	r4, sl
 800eb66:	2000      	movs	r0, #0
 800eb68:	f04f 0c0a 	mov.w	ip, #10
 800eb6c:	4621      	mov	r1, r4
 800eb6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb72:	3b30      	subs	r3, #48	; 0x30
 800eb74:	2b09      	cmp	r3, #9
 800eb76:	d94d      	bls.n	800ec14 <_svfiprintf_r+0x17c>
 800eb78:	b1b0      	cbz	r0, 800eba8 <_svfiprintf_r+0x110>
 800eb7a:	9207      	str	r2, [sp, #28]
 800eb7c:	e014      	b.n	800eba8 <_svfiprintf_r+0x110>
 800eb7e:	eba0 0308 	sub.w	r3, r0, r8
 800eb82:	fa09 f303 	lsl.w	r3, r9, r3
 800eb86:	4313      	orrs	r3, r2
 800eb88:	9304      	str	r3, [sp, #16]
 800eb8a:	46a2      	mov	sl, r4
 800eb8c:	e7d2      	b.n	800eb34 <_svfiprintf_r+0x9c>
 800eb8e:	9b03      	ldr	r3, [sp, #12]
 800eb90:	1d19      	adds	r1, r3, #4
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	9103      	str	r1, [sp, #12]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	bfbb      	ittet	lt
 800eb9a:	425b      	neglt	r3, r3
 800eb9c:	f042 0202 	orrlt.w	r2, r2, #2
 800eba0:	9307      	strge	r3, [sp, #28]
 800eba2:	9307      	strlt	r3, [sp, #28]
 800eba4:	bfb8      	it	lt
 800eba6:	9204      	strlt	r2, [sp, #16]
 800eba8:	7823      	ldrb	r3, [r4, #0]
 800ebaa:	2b2e      	cmp	r3, #46	; 0x2e
 800ebac:	d10c      	bne.n	800ebc8 <_svfiprintf_r+0x130>
 800ebae:	7863      	ldrb	r3, [r4, #1]
 800ebb0:	2b2a      	cmp	r3, #42	; 0x2a
 800ebb2:	d134      	bne.n	800ec1e <_svfiprintf_r+0x186>
 800ebb4:	9b03      	ldr	r3, [sp, #12]
 800ebb6:	1d1a      	adds	r2, r3, #4
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	9203      	str	r2, [sp, #12]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	bfb8      	it	lt
 800ebc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebc4:	3402      	adds	r4, #2
 800ebc6:	9305      	str	r3, [sp, #20]
 800ebc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ec90 <_svfiprintf_r+0x1f8>
 800ebcc:	7821      	ldrb	r1, [r4, #0]
 800ebce:	2203      	movs	r2, #3
 800ebd0:	4650      	mov	r0, sl
 800ebd2:	f7f1 fb0d 	bl	80001f0 <memchr>
 800ebd6:	b138      	cbz	r0, 800ebe8 <_svfiprintf_r+0x150>
 800ebd8:	9b04      	ldr	r3, [sp, #16]
 800ebda:	eba0 000a 	sub.w	r0, r0, sl
 800ebde:	2240      	movs	r2, #64	; 0x40
 800ebe0:	4082      	lsls	r2, r0
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	3401      	adds	r4, #1
 800ebe6:	9304      	str	r3, [sp, #16]
 800ebe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebec:	4825      	ldr	r0, [pc, #148]	; (800ec84 <_svfiprintf_r+0x1ec>)
 800ebee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebf2:	2206      	movs	r2, #6
 800ebf4:	f7f1 fafc 	bl	80001f0 <memchr>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d038      	beq.n	800ec6e <_svfiprintf_r+0x1d6>
 800ebfc:	4b22      	ldr	r3, [pc, #136]	; (800ec88 <_svfiprintf_r+0x1f0>)
 800ebfe:	bb1b      	cbnz	r3, 800ec48 <_svfiprintf_r+0x1b0>
 800ec00:	9b03      	ldr	r3, [sp, #12]
 800ec02:	3307      	adds	r3, #7
 800ec04:	f023 0307 	bic.w	r3, r3, #7
 800ec08:	3308      	adds	r3, #8
 800ec0a:	9303      	str	r3, [sp, #12]
 800ec0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec0e:	4433      	add	r3, r6
 800ec10:	9309      	str	r3, [sp, #36]	; 0x24
 800ec12:	e768      	b.n	800eae6 <_svfiprintf_r+0x4e>
 800ec14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec18:	460c      	mov	r4, r1
 800ec1a:	2001      	movs	r0, #1
 800ec1c:	e7a6      	b.n	800eb6c <_svfiprintf_r+0xd4>
 800ec1e:	2300      	movs	r3, #0
 800ec20:	3401      	adds	r4, #1
 800ec22:	9305      	str	r3, [sp, #20]
 800ec24:	4619      	mov	r1, r3
 800ec26:	f04f 0c0a 	mov.w	ip, #10
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec30:	3a30      	subs	r2, #48	; 0x30
 800ec32:	2a09      	cmp	r2, #9
 800ec34:	d903      	bls.n	800ec3e <_svfiprintf_r+0x1a6>
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d0c6      	beq.n	800ebc8 <_svfiprintf_r+0x130>
 800ec3a:	9105      	str	r1, [sp, #20]
 800ec3c:	e7c4      	b.n	800ebc8 <_svfiprintf_r+0x130>
 800ec3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec42:	4604      	mov	r4, r0
 800ec44:	2301      	movs	r3, #1
 800ec46:	e7f0      	b.n	800ec2a <_svfiprintf_r+0x192>
 800ec48:	ab03      	add	r3, sp, #12
 800ec4a:	9300      	str	r3, [sp, #0]
 800ec4c:	462a      	mov	r2, r5
 800ec4e:	4b0f      	ldr	r3, [pc, #60]	; (800ec8c <_svfiprintf_r+0x1f4>)
 800ec50:	a904      	add	r1, sp, #16
 800ec52:	4638      	mov	r0, r7
 800ec54:	f3af 8000 	nop.w
 800ec58:	1c42      	adds	r2, r0, #1
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	d1d6      	bne.n	800ec0c <_svfiprintf_r+0x174>
 800ec5e:	89ab      	ldrh	r3, [r5, #12]
 800ec60:	065b      	lsls	r3, r3, #25
 800ec62:	f53f af2d 	bmi.w	800eac0 <_svfiprintf_r+0x28>
 800ec66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec68:	b01d      	add	sp, #116	; 0x74
 800ec6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec6e:	ab03      	add	r3, sp, #12
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	462a      	mov	r2, r5
 800ec74:	4b05      	ldr	r3, [pc, #20]	; (800ec8c <_svfiprintf_r+0x1f4>)
 800ec76:	a904      	add	r1, sp, #16
 800ec78:	4638      	mov	r0, r7
 800ec7a:	f000 f879 	bl	800ed70 <_printf_i>
 800ec7e:	e7eb      	b.n	800ec58 <_svfiprintf_r+0x1c0>
 800ec80:	0800f9c2 	.word	0x0800f9c2
 800ec84:	0800f9cc 	.word	0x0800f9cc
 800ec88:	00000000 	.word	0x00000000
 800ec8c:	0800e9e5 	.word	0x0800e9e5
 800ec90:	0800f9c8 	.word	0x0800f9c8

0800ec94 <_printf_common>:
 800ec94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec98:	4616      	mov	r6, r2
 800ec9a:	4699      	mov	r9, r3
 800ec9c:	688a      	ldr	r2, [r1, #8]
 800ec9e:	690b      	ldr	r3, [r1, #16]
 800eca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eca4:	4293      	cmp	r3, r2
 800eca6:	bfb8      	it	lt
 800eca8:	4613      	movlt	r3, r2
 800ecaa:	6033      	str	r3, [r6, #0]
 800ecac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecb0:	4607      	mov	r7, r0
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	b10a      	cbz	r2, 800ecba <_printf_common+0x26>
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	6033      	str	r3, [r6, #0]
 800ecba:	6823      	ldr	r3, [r4, #0]
 800ecbc:	0699      	lsls	r1, r3, #26
 800ecbe:	bf42      	ittt	mi
 800ecc0:	6833      	ldrmi	r3, [r6, #0]
 800ecc2:	3302      	addmi	r3, #2
 800ecc4:	6033      	strmi	r3, [r6, #0]
 800ecc6:	6825      	ldr	r5, [r4, #0]
 800ecc8:	f015 0506 	ands.w	r5, r5, #6
 800eccc:	d106      	bne.n	800ecdc <_printf_common+0x48>
 800ecce:	f104 0a19 	add.w	sl, r4, #25
 800ecd2:	68e3      	ldr	r3, [r4, #12]
 800ecd4:	6832      	ldr	r2, [r6, #0]
 800ecd6:	1a9b      	subs	r3, r3, r2
 800ecd8:	42ab      	cmp	r3, r5
 800ecda:	dc26      	bgt.n	800ed2a <_printf_common+0x96>
 800ecdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ece0:	1e13      	subs	r3, r2, #0
 800ece2:	6822      	ldr	r2, [r4, #0]
 800ece4:	bf18      	it	ne
 800ece6:	2301      	movne	r3, #1
 800ece8:	0692      	lsls	r2, r2, #26
 800ecea:	d42b      	bmi.n	800ed44 <_printf_common+0xb0>
 800ecec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	4638      	mov	r0, r7
 800ecf4:	47c0      	blx	r8
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	d01e      	beq.n	800ed38 <_printf_common+0xa4>
 800ecfa:	6823      	ldr	r3, [r4, #0]
 800ecfc:	6922      	ldr	r2, [r4, #16]
 800ecfe:	f003 0306 	and.w	r3, r3, #6
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	bf02      	ittt	eq
 800ed06:	68e5      	ldreq	r5, [r4, #12]
 800ed08:	6833      	ldreq	r3, [r6, #0]
 800ed0a:	1aed      	subeq	r5, r5, r3
 800ed0c:	68a3      	ldr	r3, [r4, #8]
 800ed0e:	bf0c      	ite	eq
 800ed10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed14:	2500      	movne	r5, #0
 800ed16:	4293      	cmp	r3, r2
 800ed18:	bfc4      	itt	gt
 800ed1a:	1a9b      	subgt	r3, r3, r2
 800ed1c:	18ed      	addgt	r5, r5, r3
 800ed1e:	2600      	movs	r6, #0
 800ed20:	341a      	adds	r4, #26
 800ed22:	42b5      	cmp	r5, r6
 800ed24:	d11a      	bne.n	800ed5c <_printf_common+0xc8>
 800ed26:	2000      	movs	r0, #0
 800ed28:	e008      	b.n	800ed3c <_printf_common+0xa8>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	4652      	mov	r2, sl
 800ed2e:	4649      	mov	r1, r9
 800ed30:	4638      	mov	r0, r7
 800ed32:	47c0      	blx	r8
 800ed34:	3001      	adds	r0, #1
 800ed36:	d103      	bne.n	800ed40 <_printf_common+0xac>
 800ed38:	f04f 30ff 	mov.w	r0, #4294967295
 800ed3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed40:	3501      	adds	r5, #1
 800ed42:	e7c6      	b.n	800ecd2 <_printf_common+0x3e>
 800ed44:	18e1      	adds	r1, r4, r3
 800ed46:	1c5a      	adds	r2, r3, #1
 800ed48:	2030      	movs	r0, #48	; 0x30
 800ed4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed4e:	4422      	add	r2, r4
 800ed50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed58:	3302      	adds	r3, #2
 800ed5a:	e7c7      	b.n	800ecec <_printf_common+0x58>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	4622      	mov	r2, r4
 800ed60:	4649      	mov	r1, r9
 800ed62:	4638      	mov	r0, r7
 800ed64:	47c0      	blx	r8
 800ed66:	3001      	adds	r0, #1
 800ed68:	d0e6      	beq.n	800ed38 <_printf_common+0xa4>
 800ed6a:	3601      	adds	r6, #1
 800ed6c:	e7d9      	b.n	800ed22 <_printf_common+0x8e>
	...

0800ed70 <_printf_i>:
 800ed70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed74:	7e0f      	ldrb	r7, [r1, #24]
 800ed76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed78:	2f78      	cmp	r7, #120	; 0x78
 800ed7a:	4691      	mov	r9, r2
 800ed7c:	4680      	mov	r8, r0
 800ed7e:	460c      	mov	r4, r1
 800ed80:	469a      	mov	sl, r3
 800ed82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed86:	d807      	bhi.n	800ed98 <_printf_i+0x28>
 800ed88:	2f62      	cmp	r7, #98	; 0x62
 800ed8a:	d80a      	bhi.n	800eda2 <_printf_i+0x32>
 800ed8c:	2f00      	cmp	r7, #0
 800ed8e:	f000 80d4 	beq.w	800ef3a <_printf_i+0x1ca>
 800ed92:	2f58      	cmp	r7, #88	; 0x58
 800ed94:	f000 80c0 	beq.w	800ef18 <_printf_i+0x1a8>
 800ed98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eda0:	e03a      	b.n	800ee18 <_printf_i+0xa8>
 800eda2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eda6:	2b15      	cmp	r3, #21
 800eda8:	d8f6      	bhi.n	800ed98 <_printf_i+0x28>
 800edaa:	a101      	add	r1, pc, #4	; (adr r1, 800edb0 <_printf_i+0x40>)
 800edac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edb0:	0800ee09 	.word	0x0800ee09
 800edb4:	0800ee1d 	.word	0x0800ee1d
 800edb8:	0800ed99 	.word	0x0800ed99
 800edbc:	0800ed99 	.word	0x0800ed99
 800edc0:	0800ed99 	.word	0x0800ed99
 800edc4:	0800ed99 	.word	0x0800ed99
 800edc8:	0800ee1d 	.word	0x0800ee1d
 800edcc:	0800ed99 	.word	0x0800ed99
 800edd0:	0800ed99 	.word	0x0800ed99
 800edd4:	0800ed99 	.word	0x0800ed99
 800edd8:	0800ed99 	.word	0x0800ed99
 800eddc:	0800ef21 	.word	0x0800ef21
 800ede0:	0800ee49 	.word	0x0800ee49
 800ede4:	0800eedb 	.word	0x0800eedb
 800ede8:	0800ed99 	.word	0x0800ed99
 800edec:	0800ed99 	.word	0x0800ed99
 800edf0:	0800ef43 	.word	0x0800ef43
 800edf4:	0800ed99 	.word	0x0800ed99
 800edf8:	0800ee49 	.word	0x0800ee49
 800edfc:	0800ed99 	.word	0x0800ed99
 800ee00:	0800ed99 	.word	0x0800ed99
 800ee04:	0800eee3 	.word	0x0800eee3
 800ee08:	682b      	ldr	r3, [r5, #0]
 800ee0a:	1d1a      	adds	r2, r3, #4
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	602a      	str	r2, [r5, #0]
 800ee10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee18:	2301      	movs	r3, #1
 800ee1a:	e09f      	b.n	800ef5c <_printf_i+0x1ec>
 800ee1c:	6820      	ldr	r0, [r4, #0]
 800ee1e:	682b      	ldr	r3, [r5, #0]
 800ee20:	0607      	lsls	r7, r0, #24
 800ee22:	f103 0104 	add.w	r1, r3, #4
 800ee26:	6029      	str	r1, [r5, #0]
 800ee28:	d501      	bpl.n	800ee2e <_printf_i+0xbe>
 800ee2a:	681e      	ldr	r6, [r3, #0]
 800ee2c:	e003      	b.n	800ee36 <_printf_i+0xc6>
 800ee2e:	0646      	lsls	r6, r0, #25
 800ee30:	d5fb      	bpl.n	800ee2a <_printf_i+0xba>
 800ee32:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ee36:	2e00      	cmp	r6, #0
 800ee38:	da03      	bge.n	800ee42 <_printf_i+0xd2>
 800ee3a:	232d      	movs	r3, #45	; 0x2d
 800ee3c:	4276      	negs	r6, r6
 800ee3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee42:	485a      	ldr	r0, [pc, #360]	; (800efac <_printf_i+0x23c>)
 800ee44:	230a      	movs	r3, #10
 800ee46:	e012      	b.n	800ee6e <_printf_i+0xfe>
 800ee48:	682b      	ldr	r3, [r5, #0]
 800ee4a:	6820      	ldr	r0, [r4, #0]
 800ee4c:	1d19      	adds	r1, r3, #4
 800ee4e:	6029      	str	r1, [r5, #0]
 800ee50:	0605      	lsls	r5, r0, #24
 800ee52:	d501      	bpl.n	800ee58 <_printf_i+0xe8>
 800ee54:	681e      	ldr	r6, [r3, #0]
 800ee56:	e002      	b.n	800ee5e <_printf_i+0xee>
 800ee58:	0641      	lsls	r1, r0, #25
 800ee5a:	d5fb      	bpl.n	800ee54 <_printf_i+0xe4>
 800ee5c:	881e      	ldrh	r6, [r3, #0]
 800ee5e:	4853      	ldr	r0, [pc, #332]	; (800efac <_printf_i+0x23c>)
 800ee60:	2f6f      	cmp	r7, #111	; 0x6f
 800ee62:	bf0c      	ite	eq
 800ee64:	2308      	moveq	r3, #8
 800ee66:	230a      	movne	r3, #10
 800ee68:	2100      	movs	r1, #0
 800ee6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee6e:	6865      	ldr	r5, [r4, #4]
 800ee70:	60a5      	str	r5, [r4, #8]
 800ee72:	2d00      	cmp	r5, #0
 800ee74:	bfa2      	ittt	ge
 800ee76:	6821      	ldrge	r1, [r4, #0]
 800ee78:	f021 0104 	bicge.w	r1, r1, #4
 800ee7c:	6021      	strge	r1, [r4, #0]
 800ee7e:	b90e      	cbnz	r6, 800ee84 <_printf_i+0x114>
 800ee80:	2d00      	cmp	r5, #0
 800ee82:	d04b      	beq.n	800ef1c <_printf_i+0x1ac>
 800ee84:	4615      	mov	r5, r2
 800ee86:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee8a:	fb03 6711 	mls	r7, r3, r1, r6
 800ee8e:	5dc7      	ldrb	r7, [r0, r7]
 800ee90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee94:	4637      	mov	r7, r6
 800ee96:	42bb      	cmp	r3, r7
 800ee98:	460e      	mov	r6, r1
 800ee9a:	d9f4      	bls.n	800ee86 <_printf_i+0x116>
 800ee9c:	2b08      	cmp	r3, #8
 800ee9e:	d10b      	bne.n	800eeb8 <_printf_i+0x148>
 800eea0:	6823      	ldr	r3, [r4, #0]
 800eea2:	07de      	lsls	r6, r3, #31
 800eea4:	d508      	bpl.n	800eeb8 <_printf_i+0x148>
 800eea6:	6923      	ldr	r3, [r4, #16]
 800eea8:	6861      	ldr	r1, [r4, #4]
 800eeaa:	4299      	cmp	r1, r3
 800eeac:	bfde      	ittt	le
 800eeae:	2330      	movle	r3, #48	; 0x30
 800eeb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eeb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eeb8:	1b52      	subs	r2, r2, r5
 800eeba:	6122      	str	r2, [r4, #16]
 800eebc:	f8cd a000 	str.w	sl, [sp]
 800eec0:	464b      	mov	r3, r9
 800eec2:	aa03      	add	r2, sp, #12
 800eec4:	4621      	mov	r1, r4
 800eec6:	4640      	mov	r0, r8
 800eec8:	f7ff fee4 	bl	800ec94 <_printf_common>
 800eecc:	3001      	adds	r0, #1
 800eece:	d14a      	bne.n	800ef66 <_printf_i+0x1f6>
 800eed0:	f04f 30ff 	mov.w	r0, #4294967295
 800eed4:	b004      	add	sp, #16
 800eed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeda:	6823      	ldr	r3, [r4, #0]
 800eedc:	f043 0320 	orr.w	r3, r3, #32
 800eee0:	6023      	str	r3, [r4, #0]
 800eee2:	4833      	ldr	r0, [pc, #204]	; (800efb0 <_printf_i+0x240>)
 800eee4:	2778      	movs	r7, #120	; 0x78
 800eee6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	6829      	ldr	r1, [r5, #0]
 800eeee:	061f      	lsls	r7, r3, #24
 800eef0:	f851 6b04 	ldr.w	r6, [r1], #4
 800eef4:	d402      	bmi.n	800eefc <_printf_i+0x18c>
 800eef6:	065f      	lsls	r7, r3, #25
 800eef8:	bf48      	it	mi
 800eefa:	b2b6      	uxthmi	r6, r6
 800eefc:	07df      	lsls	r7, r3, #31
 800eefe:	bf48      	it	mi
 800ef00:	f043 0320 	orrmi.w	r3, r3, #32
 800ef04:	6029      	str	r1, [r5, #0]
 800ef06:	bf48      	it	mi
 800ef08:	6023      	strmi	r3, [r4, #0]
 800ef0a:	b91e      	cbnz	r6, 800ef14 <_printf_i+0x1a4>
 800ef0c:	6823      	ldr	r3, [r4, #0]
 800ef0e:	f023 0320 	bic.w	r3, r3, #32
 800ef12:	6023      	str	r3, [r4, #0]
 800ef14:	2310      	movs	r3, #16
 800ef16:	e7a7      	b.n	800ee68 <_printf_i+0xf8>
 800ef18:	4824      	ldr	r0, [pc, #144]	; (800efac <_printf_i+0x23c>)
 800ef1a:	e7e4      	b.n	800eee6 <_printf_i+0x176>
 800ef1c:	4615      	mov	r5, r2
 800ef1e:	e7bd      	b.n	800ee9c <_printf_i+0x12c>
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	6826      	ldr	r6, [r4, #0]
 800ef24:	6961      	ldr	r1, [r4, #20]
 800ef26:	1d18      	adds	r0, r3, #4
 800ef28:	6028      	str	r0, [r5, #0]
 800ef2a:	0635      	lsls	r5, r6, #24
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	d501      	bpl.n	800ef34 <_printf_i+0x1c4>
 800ef30:	6019      	str	r1, [r3, #0]
 800ef32:	e002      	b.n	800ef3a <_printf_i+0x1ca>
 800ef34:	0670      	lsls	r0, r6, #25
 800ef36:	d5fb      	bpl.n	800ef30 <_printf_i+0x1c0>
 800ef38:	8019      	strh	r1, [r3, #0]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	6123      	str	r3, [r4, #16]
 800ef3e:	4615      	mov	r5, r2
 800ef40:	e7bc      	b.n	800eebc <_printf_i+0x14c>
 800ef42:	682b      	ldr	r3, [r5, #0]
 800ef44:	1d1a      	adds	r2, r3, #4
 800ef46:	602a      	str	r2, [r5, #0]
 800ef48:	681d      	ldr	r5, [r3, #0]
 800ef4a:	6862      	ldr	r2, [r4, #4]
 800ef4c:	2100      	movs	r1, #0
 800ef4e:	4628      	mov	r0, r5
 800ef50:	f7f1 f94e 	bl	80001f0 <memchr>
 800ef54:	b108      	cbz	r0, 800ef5a <_printf_i+0x1ea>
 800ef56:	1b40      	subs	r0, r0, r5
 800ef58:	6060      	str	r0, [r4, #4]
 800ef5a:	6863      	ldr	r3, [r4, #4]
 800ef5c:	6123      	str	r3, [r4, #16]
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef64:	e7aa      	b.n	800eebc <_printf_i+0x14c>
 800ef66:	6923      	ldr	r3, [r4, #16]
 800ef68:	462a      	mov	r2, r5
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	47d0      	blx	sl
 800ef70:	3001      	adds	r0, #1
 800ef72:	d0ad      	beq.n	800eed0 <_printf_i+0x160>
 800ef74:	6823      	ldr	r3, [r4, #0]
 800ef76:	079b      	lsls	r3, r3, #30
 800ef78:	d413      	bmi.n	800efa2 <_printf_i+0x232>
 800ef7a:	68e0      	ldr	r0, [r4, #12]
 800ef7c:	9b03      	ldr	r3, [sp, #12]
 800ef7e:	4298      	cmp	r0, r3
 800ef80:	bfb8      	it	lt
 800ef82:	4618      	movlt	r0, r3
 800ef84:	e7a6      	b.n	800eed4 <_printf_i+0x164>
 800ef86:	2301      	movs	r3, #1
 800ef88:	4632      	mov	r2, r6
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	4640      	mov	r0, r8
 800ef8e:	47d0      	blx	sl
 800ef90:	3001      	adds	r0, #1
 800ef92:	d09d      	beq.n	800eed0 <_printf_i+0x160>
 800ef94:	3501      	adds	r5, #1
 800ef96:	68e3      	ldr	r3, [r4, #12]
 800ef98:	9903      	ldr	r1, [sp, #12]
 800ef9a:	1a5b      	subs	r3, r3, r1
 800ef9c:	42ab      	cmp	r3, r5
 800ef9e:	dcf2      	bgt.n	800ef86 <_printf_i+0x216>
 800efa0:	e7eb      	b.n	800ef7a <_printf_i+0x20a>
 800efa2:	2500      	movs	r5, #0
 800efa4:	f104 0619 	add.w	r6, r4, #25
 800efa8:	e7f5      	b.n	800ef96 <_printf_i+0x226>
 800efaa:	bf00      	nop
 800efac:	0800f9d3 	.word	0x0800f9d3
 800efb0:	0800f9e4 	.word	0x0800f9e4

0800efb4 <__sflush_r>:
 800efb4:	898a      	ldrh	r2, [r1, #12]
 800efb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efba:	4605      	mov	r5, r0
 800efbc:	0710      	lsls	r0, r2, #28
 800efbe:	460c      	mov	r4, r1
 800efc0:	d458      	bmi.n	800f074 <__sflush_r+0xc0>
 800efc2:	684b      	ldr	r3, [r1, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	dc05      	bgt.n	800efd4 <__sflush_r+0x20>
 800efc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efca:	2b00      	cmp	r3, #0
 800efcc:	dc02      	bgt.n	800efd4 <__sflush_r+0x20>
 800efce:	2000      	movs	r0, #0
 800efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efd6:	2e00      	cmp	r6, #0
 800efd8:	d0f9      	beq.n	800efce <__sflush_r+0x1a>
 800efda:	2300      	movs	r3, #0
 800efdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efe0:	682f      	ldr	r7, [r5, #0]
 800efe2:	6a21      	ldr	r1, [r4, #32]
 800efe4:	602b      	str	r3, [r5, #0]
 800efe6:	d032      	beq.n	800f04e <__sflush_r+0x9a>
 800efe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efea:	89a3      	ldrh	r3, [r4, #12]
 800efec:	075a      	lsls	r2, r3, #29
 800efee:	d505      	bpl.n	800effc <__sflush_r+0x48>
 800eff0:	6863      	ldr	r3, [r4, #4]
 800eff2:	1ac0      	subs	r0, r0, r3
 800eff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eff6:	b10b      	cbz	r3, 800effc <__sflush_r+0x48>
 800eff8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800effa:	1ac0      	subs	r0, r0, r3
 800effc:	2300      	movs	r3, #0
 800effe:	4602      	mov	r2, r0
 800f000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f002:	6a21      	ldr	r1, [r4, #32]
 800f004:	4628      	mov	r0, r5
 800f006:	47b0      	blx	r6
 800f008:	1c43      	adds	r3, r0, #1
 800f00a:	89a3      	ldrh	r3, [r4, #12]
 800f00c:	d106      	bne.n	800f01c <__sflush_r+0x68>
 800f00e:	6829      	ldr	r1, [r5, #0]
 800f010:	291d      	cmp	r1, #29
 800f012:	d82b      	bhi.n	800f06c <__sflush_r+0xb8>
 800f014:	4a29      	ldr	r2, [pc, #164]	; (800f0bc <__sflush_r+0x108>)
 800f016:	410a      	asrs	r2, r1
 800f018:	07d6      	lsls	r6, r2, #31
 800f01a:	d427      	bmi.n	800f06c <__sflush_r+0xb8>
 800f01c:	2200      	movs	r2, #0
 800f01e:	6062      	str	r2, [r4, #4]
 800f020:	04d9      	lsls	r1, r3, #19
 800f022:	6922      	ldr	r2, [r4, #16]
 800f024:	6022      	str	r2, [r4, #0]
 800f026:	d504      	bpl.n	800f032 <__sflush_r+0x7e>
 800f028:	1c42      	adds	r2, r0, #1
 800f02a:	d101      	bne.n	800f030 <__sflush_r+0x7c>
 800f02c:	682b      	ldr	r3, [r5, #0]
 800f02e:	b903      	cbnz	r3, 800f032 <__sflush_r+0x7e>
 800f030:	6560      	str	r0, [r4, #84]	; 0x54
 800f032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f034:	602f      	str	r7, [r5, #0]
 800f036:	2900      	cmp	r1, #0
 800f038:	d0c9      	beq.n	800efce <__sflush_r+0x1a>
 800f03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f03e:	4299      	cmp	r1, r3
 800f040:	d002      	beq.n	800f048 <__sflush_r+0x94>
 800f042:	4628      	mov	r0, r5
 800f044:	f7ff fbce 	bl	800e7e4 <_free_r>
 800f048:	2000      	movs	r0, #0
 800f04a:	6360      	str	r0, [r4, #52]	; 0x34
 800f04c:	e7c0      	b.n	800efd0 <__sflush_r+0x1c>
 800f04e:	2301      	movs	r3, #1
 800f050:	4628      	mov	r0, r5
 800f052:	47b0      	blx	r6
 800f054:	1c41      	adds	r1, r0, #1
 800f056:	d1c8      	bne.n	800efea <__sflush_r+0x36>
 800f058:	682b      	ldr	r3, [r5, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d0c5      	beq.n	800efea <__sflush_r+0x36>
 800f05e:	2b1d      	cmp	r3, #29
 800f060:	d001      	beq.n	800f066 <__sflush_r+0xb2>
 800f062:	2b16      	cmp	r3, #22
 800f064:	d101      	bne.n	800f06a <__sflush_r+0xb6>
 800f066:	602f      	str	r7, [r5, #0]
 800f068:	e7b1      	b.n	800efce <__sflush_r+0x1a>
 800f06a:	89a3      	ldrh	r3, [r4, #12]
 800f06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f070:	81a3      	strh	r3, [r4, #12]
 800f072:	e7ad      	b.n	800efd0 <__sflush_r+0x1c>
 800f074:	690f      	ldr	r7, [r1, #16]
 800f076:	2f00      	cmp	r7, #0
 800f078:	d0a9      	beq.n	800efce <__sflush_r+0x1a>
 800f07a:	0793      	lsls	r3, r2, #30
 800f07c:	680e      	ldr	r6, [r1, #0]
 800f07e:	bf08      	it	eq
 800f080:	694b      	ldreq	r3, [r1, #20]
 800f082:	600f      	str	r7, [r1, #0]
 800f084:	bf18      	it	ne
 800f086:	2300      	movne	r3, #0
 800f088:	eba6 0807 	sub.w	r8, r6, r7
 800f08c:	608b      	str	r3, [r1, #8]
 800f08e:	f1b8 0f00 	cmp.w	r8, #0
 800f092:	dd9c      	ble.n	800efce <__sflush_r+0x1a>
 800f094:	6a21      	ldr	r1, [r4, #32]
 800f096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f098:	4643      	mov	r3, r8
 800f09a:	463a      	mov	r2, r7
 800f09c:	4628      	mov	r0, r5
 800f09e:	47b0      	blx	r6
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	dc06      	bgt.n	800f0b2 <__sflush_r+0xfe>
 800f0a4:	89a3      	ldrh	r3, [r4, #12]
 800f0a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0aa:	81a3      	strh	r3, [r4, #12]
 800f0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b0:	e78e      	b.n	800efd0 <__sflush_r+0x1c>
 800f0b2:	4407      	add	r7, r0
 800f0b4:	eba8 0800 	sub.w	r8, r8, r0
 800f0b8:	e7e9      	b.n	800f08e <__sflush_r+0xda>
 800f0ba:	bf00      	nop
 800f0bc:	dfbffffe 	.word	0xdfbffffe

0800f0c0 <_fflush_r>:
 800f0c0:	b538      	push	{r3, r4, r5, lr}
 800f0c2:	690b      	ldr	r3, [r1, #16]
 800f0c4:	4605      	mov	r5, r0
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	b913      	cbnz	r3, 800f0d0 <_fflush_r+0x10>
 800f0ca:	2500      	movs	r5, #0
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	b118      	cbz	r0, 800f0da <_fflush_r+0x1a>
 800f0d2:	6a03      	ldr	r3, [r0, #32]
 800f0d4:	b90b      	cbnz	r3, 800f0da <_fflush_r+0x1a>
 800f0d6:	f7ff f9b9 	bl	800e44c <__sinit>
 800f0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d0f3      	beq.n	800f0ca <_fflush_r+0xa>
 800f0e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0e4:	07d0      	lsls	r0, r2, #31
 800f0e6:	d404      	bmi.n	800f0f2 <_fflush_r+0x32>
 800f0e8:	0599      	lsls	r1, r3, #22
 800f0ea:	d402      	bmi.n	800f0f2 <_fflush_r+0x32>
 800f0ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0ee:	f7ff fb42 	bl	800e776 <__retarget_lock_acquire_recursive>
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	4621      	mov	r1, r4
 800f0f6:	f7ff ff5d 	bl	800efb4 <__sflush_r>
 800f0fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0fc:	07da      	lsls	r2, r3, #31
 800f0fe:	4605      	mov	r5, r0
 800f100:	d4e4      	bmi.n	800f0cc <_fflush_r+0xc>
 800f102:	89a3      	ldrh	r3, [r4, #12]
 800f104:	059b      	lsls	r3, r3, #22
 800f106:	d4e1      	bmi.n	800f0cc <_fflush_r+0xc>
 800f108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f10a:	f7ff fb35 	bl	800e778 <__retarget_lock_release_recursive>
 800f10e:	e7dd      	b.n	800f0cc <_fflush_r+0xc>

0800f110 <fiprintf>:
 800f110:	b40e      	push	{r1, r2, r3}
 800f112:	b503      	push	{r0, r1, lr}
 800f114:	4601      	mov	r1, r0
 800f116:	ab03      	add	r3, sp, #12
 800f118:	4805      	ldr	r0, [pc, #20]	; (800f130 <fiprintf+0x20>)
 800f11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f11e:	6800      	ldr	r0, [r0, #0]
 800f120:	9301      	str	r3, [sp, #4]
 800f122:	f000 f891 	bl	800f248 <_vfiprintf_r>
 800f126:	b002      	add	sp, #8
 800f128:	f85d eb04 	ldr.w	lr, [sp], #4
 800f12c:	b003      	add	sp, #12
 800f12e:	4770      	bx	lr
 800f130:	20000410 	.word	0x20000410

0800f134 <memmove>:
 800f134:	4288      	cmp	r0, r1
 800f136:	b510      	push	{r4, lr}
 800f138:	eb01 0402 	add.w	r4, r1, r2
 800f13c:	d902      	bls.n	800f144 <memmove+0x10>
 800f13e:	4284      	cmp	r4, r0
 800f140:	4623      	mov	r3, r4
 800f142:	d807      	bhi.n	800f154 <memmove+0x20>
 800f144:	1e43      	subs	r3, r0, #1
 800f146:	42a1      	cmp	r1, r4
 800f148:	d008      	beq.n	800f15c <memmove+0x28>
 800f14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f152:	e7f8      	b.n	800f146 <memmove+0x12>
 800f154:	4402      	add	r2, r0
 800f156:	4601      	mov	r1, r0
 800f158:	428a      	cmp	r2, r1
 800f15a:	d100      	bne.n	800f15e <memmove+0x2a>
 800f15c:	bd10      	pop	{r4, pc}
 800f15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f166:	e7f7      	b.n	800f158 <memmove+0x24>

0800f168 <_sbrk_r>:
 800f168:	b538      	push	{r3, r4, r5, lr}
 800f16a:	4d06      	ldr	r5, [pc, #24]	; (800f184 <_sbrk_r+0x1c>)
 800f16c:	2300      	movs	r3, #0
 800f16e:	4604      	mov	r4, r0
 800f170:	4608      	mov	r0, r1
 800f172:	602b      	str	r3, [r5, #0]
 800f174:	f7f2 fa0a 	bl	800158c <_sbrk>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d102      	bne.n	800f182 <_sbrk_r+0x1a>
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	b103      	cbz	r3, 800f182 <_sbrk_r+0x1a>
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	bd38      	pop	{r3, r4, r5, pc}
 800f184:	20002088 	.word	0x20002088

0800f188 <abort>:
 800f188:	b508      	push	{r3, lr}
 800f18a:	2006      	movs	r0, #6
 800f18c:	f000 fa34 	bl	800f5f8 <raise>
 800f190:	2001      	movs	r0, #1
 800f192:	f7f2 f983 	bl	800149c <_exit>

0800f196 <_realloc_r>:
 800f196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f19a:	4680      	mov	r8, r0
 800f19c:	4614      	mov	r4, r2
 800f19e:	460e      	mov	r6, r1
 800f1a0:	b921      	cbnz	r1, 800f1ac <_realloc_r+0x16>
 800f1a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a6:	4611      	mov	r1, r2
 800f1a8:	f7ff bb90 	b.w	800e8cc <_malloc_r>
 800f1ac:	b92a      	cbnz	r2, 800f1ba <_realloc_r+0x24>
 800f1ae:	f7ff fb19 	bl	800e7e4 <_free_r>
 800f1b2:	4625      	mov	r5, r4
 800f1b4:	4628      	mov	r0, r5
 800f1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1ba:	f000 fa39 	bl	800f630 <_malloc_usable_size_r>
 800f1be:	4284      	cmp	r4, r0
 800f1c0:	4607      	mov	r7, r0
 800f1c2:	d802      	bhi.n	800f1ca <_realloc_r+0x34>
 800f1c4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f1c8:	d812      	bhi.n	800f1f0 <_realloc_r+0x5a>
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	f7ff fb7d 	bl	800e8cc <_malloc_r>
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	d0ed      	beq.n	800f1b4 <_realloc_r+0x1e>
 800f1d8:	42bc      	cmp	r4, r7
 800f1da:	4622      	mov	r2, r4
 800f1dc:	4631      	mov	r1, r6
 800f1de:	bf28      	it	cs
 800f1e0:	463a      	movcs	r2, r7
 800f1e2:	f7ff fad2 	bl	800e78a <memcpy>
 800f1e6:	4631      	mov	r1, r6
 800f1e8:	4640      	mov	r0, r8
 800f1ea:	f7ff fafb 	bl	800e7e4 <_free_r>
 800f1ee:	e7e1      	b.n	800f1b4 <_realloc_r+0x1e>
 800f1f0:	4635      	mov	r5, r6
 800f1f2:	e7df      	b.n	800f1b4 <_realloc_r+0x1e>

0800f1f4 <__sfputc_r>:
 800f1f4:	6893      	ldr	r3, [r2, #8]
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	b410      	push	{r4}
 800f1fc:	6093      	str	r3, [r2, #8]
 800f1fe:	da08      	bge.n	800f212 <__sfputc_r+0x1e>
 800f200:	6994      	ldr	r4, [r2, #24]
 800f202:	42a3      	cmp	r3, r4
 800f204:	db01      	blt.n	800f20a <__sfputc_r+0x16>
 800f206:	290a      	cmp	r1, #10
 800f208:	d103      	bne.n	800f212 <__sfputc_r+0x1e>
 800f20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f20e:	f000 b935 	b.w	800f47c <__swbuf_r>
 800f212:	6813      	ldr	r3, [r2, #0]
 800f214:	1c58      	adds	r0, r3, #1
 800f216:	6010      	str	r0, [r2, #0]
 800f218:	7019      	strb	r1, [r3, #0]
 800f21a:	4608      	mov	r0, r1
 800f21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f220:	4770      	bx	lr

0800f222 <__sfputs_r>:
 800f222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f224:	4606      	mov	r6, r0
 800f226:	460f      	mov	r7, r1
 800f228:	4614      	mov	r4, r2
 800f22a:	18d5      	adds	r5, r2, r3
 800f22c:	42ac      	cmp	r4, r5
 800f22e:	d101      	bne.n	800f234 <__sfputs_r+0x12>
 800f230:	2000      	movs	r0, #0
 800f232:	e007      	b.n	800f244 <__sfputs_r+0x22>
 800f234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f238:	463a      	mov	r2, r7
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7ff ffda 	bl	800f1f4 <__sfputc_r>
 800f240:	1c43      	adds	r3, r0, #1
 800f242:	d1f3      	bne.n	800f22c <__sfputs_r+0xa>
 800f244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f248 <_vfiprintf_r>:
 800f248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f24c:	460d      	mov	r5, r1
 800f24e:	b09d      	sub	sp, #116	; 0x74
 800f250:	4614      	mov	r4, r2
 800f252:	4698      	mov	r8, r3
 800f254:	4606      	mov	r6, r0
 800f256:	b118      	cbz	r0, 800f260 <_vfiprintf_r+0x18>
 800f258:	6a03      	ldr	r3, [r0, #32]
 800f25a:	b90b      	cbnz	r3, 800f260 <_vfiprintf_r+0x18>
 800f25c:	f7ff f8f6 	bl	800e44c <__sinit>
 800f260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f262:	07d9      	lsls	r1, r3, #31
 800f264:	d405      	bmi.n	800f272 <_vfiprintf_r+0x2a>
 800f266:	89ab      	ldrh	r3, [r5, #12]
 800f268:	059a      	lsls	r2, r3, #22
 800f26a:	d402      	bmi.n	800f272 <_vfiprintf_r+0x2a>
 800f26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f26e:	f7ff fa82 	bl	800e776 <__retarget_lock_acquire_recursive>
 800f272:	89ab      	ldrh	r3, [r5, #12]
 800f274:	071b      	lsls	r3, r3, #28
 800f276:	d501      	bpl.n	800f27c <_vfiprintf_r+0x34>
 800f278:	692b      	ldr	r3, [r5, #16]
 800f27a:	b99b      	cbnz	r3, 800f2a4 <_vfiprintf_r+0x5c>
 800f27c:	4629      	mov	r1, r5
 800f27e:	4630      	mov	r0, r6
 800f280:	f000 f93a 	bl	800f4f8 <__swsetup_r>
 800f284:	b170      	cbz	r0, 800f2a4 <_vfiprintf_r+0x5c>
 800f286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f288:	07dc      	lsls	r4, r3, #31
 800f28a:	d504      	bpl.n	800f296 <_vfiprintf_r+0x4e>
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295
 800f290:	b01d      	add	sp, #116	; 0x74
 800f292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f296:	89ab      	ldrh	r3, [r5, #12]
 800f298:	0598      	lsls	r0, r3, #22
 800f29a:	d4f7      	bmi.n	800f28c <_vfiprintf_r+0x44>
 800f29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f29e:	f7ff fa6b 	bl	800e778 <__retarget_lock_release_recursive>
 800f2a2:	e7f3      	b.n	800f28c <_vfiprintf_r+0x44>
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a8:	2320      	movs	r3, #32
 800f2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2b2:	2330      	movs	r3, #48	; 0x30
 800f2b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f468 <_vfiprintf_r+0x220>
 800f2b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2bc:	f04f 0901 	mov.w	r9, #1
 800f2c0:	4623      	mov	r3, r4
 800f2c2:	469a      	mov	sl, r3
 800f2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2c8:	b10a      	cbz	r2, 800f2ce <_vfiprintf_r+0x86>
 800f2ca:	2a25      	cmp	r2, #37	; 0x25
 800f2cc:	d1f9      	bne.n	800f2c2 <_vfiprintf_r+0x7a>
 800f2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800f2d2:	d00b      	beq.n	800f2ec <_vfiprintf_r+0xa4>
 800f2d4:	465b      	mov	r3, fp
 800f2d6:	4622      	mov	r2, r4
 800f2d8:	4629      	mov	r1, r5
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f7ff ffa1 	bl	800f222 <__sfputs_r>
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	f000 80a9 	beq.w	800f438 <_vfiprintf_r+0x1f0>
 800f2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2e8:	445a      	add	r2, fp
 800f2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800f2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 80a1 	beq.w	800f438 <_vfiprintf_r+0x1f0>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f300:	f10a 0a01 	add.w	sl, sl, #1
 800f304:	9304      	str	r3, [sp, #16]
 800f306:	9307      	str	r3, [sp, #28]
 800f308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f30c:	931a      	str	r3, [sp, #104]	; 0x68
 800f30e:	4654      	mov	r4, sl
 800f310:	2205      	movs	r2, #5
 800f312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f316:	4854      	ldr	r0, [pc, #336]	; (800f468 <_vfiprintf_r+0x220>)
 800f318:	f7f0 ff6a 	bl	80001f0 <memchr>
 800f31c:	9a04      	ldr	r2, [sp, #16]
 800f31e:	b9d8      	cbnz	r0, 800f358 <_vfiprintf_r+0x110>
 800f320:	06d1      	lsls	r1, r2, #27
 800f322:	bf44      	itt	mi
 800f324:	2320      	movmi	r3, #32
 800f326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f32a:	0713      	lsls	r3, r2, #28
 800f32c:	bf44      	itt	mi
 800f32e:	232b      	movmi	r3, #43	; 0x2b
 800f330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f334:	f89a 3000 	ldrb.w	r3, [sl]
 800f338:	2b2a      	cmp	r3, #42	; 0x2a
 800f33a:	d015      	beq.n	800f368 <_vfiprintf_r+0x120>
 800f33c:	9a07      	ldr	r2, [sp, #28]
 800f33e:	4654      	mov	r4, sl
 800f340:	2000      	movs	r0, #0
 800f342:	f04f 0c0a 	mov.w	ip, #10
 800f346:	4621      	mov	r1, r4
 800f348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f34c:	3b30      	subs	r3, #48	; 0x30
 800f34e:	2b09      	cmp	r3, #9
 800f350:	d94d      	bls.n	800f3ee <_vfiprintf_r+0x1a6>
 800f352:	b1b0      	cbz	r0, 800f382 <_vfiprintf_r+0x13a>
 800f354:	9207      	str	r2, [sp, #28]
 800f356:	e014      	b.n	800f382 <_vfiprintf_r+0x13a>
 800f358:	eba0 0308 	sub.w	r3, r0, r8
 800f35c:	fa09 f303 	lsl.w	r3, r9, r3
 800f360:	4313      	orrs	r3, r2
 800f362:	9304      	str	r3, [sp, #16]
 800f364:	46a2      	mov	sl, r4
 800f366:	e7d2      	b.n	800f30e <_vfiprintf_r+0xc6>
 800f368:	9b03      	ldr	r3, [sp, #12]
 800f36a:	1d19      	adds	r1, r3, #4
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	9103      	str	r1, [sp, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	bfbb      	ittet	lt
 800f374:	425b      	neglt	r3, r3
 800f376:	f042 0202 	orrlt.w	r2, r2, #2
 800f37a:	9307      	strge	r3, [sp, #28]
 800f37c:	9307      	strlt	r3, [sp, #28]
 800f37e:	bfb8      	it	lt
 800f380:	9204      	strlt	r2, [sp, #16]
 800f382:	7823      	ldrb	r3, [r4, #0]
 800f384:	2b2e      	cmp	r3, #46	; 0x2e
 800f386:	d10c      	bne.n	800f3a2 <_vfiprintf_r+0x15a>
 800f388:	7863      	ldrb	r3, [r4, #1]
 800f38a:	2b2a      	cmp	r3, #42	; 0x2a
 800f38c:	d134      	bne.n	800f3f8 <_vfiprintf_r+0x1b0>
 800f38e:	9b03      	ldr	r3, [sp, #12]
 800f390:	1d1a      	adds	r2, r3, #4
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	9203      	str	r2, [sp, #12]
 800f396:	2b00      	cmp	r3, #0
 800f398:	bfb8      	it	lt
 800f39a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f39e:	3402      	adds	r4, #2
 800f3a0:	9305      	str	r3, [sp, #20]
 800f3a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f478 <_vfiprintf_r+0x230>
 800f3a6:	7821      	ldrb	r1, [r4, #0]
 800f3a8:	2203      	movs	r2, #3
 800f3aa:	4650      	mov	r0, sl
 800f3ac:	f7f0 ff20 	bl	80001f0 <memchr>
 800f3b0:	b138      	cbz	r0, 800f3c2 <_vfiprintf_r+0x17a>
 800f3b2:	9b04      	ldr	r3, [sp, #16]
 800f3b4:	eba0 000a 	sub.w	r0, r0, sl
 800f3b8:	2240      	movs	r2, #64	; 0x40
 800f3ba:	4082      	lsls	r2, r0
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	3401      	adds	r4, #1
 800f3c0:	9304      	str	r3, [sp, #16]
 800f3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3c6:	4829      	ldr	r0, [pc, #164]	; (800f46c <_vfiprintf_r+0x224>)
 800f3c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3cc:	2206      	movs	r2, #6
 800f3ce:	f7f0 ff0f 	bl	80001f0 <memchr>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	d03f      	beq.n	800f456 <_vfiprintf_r+0x20e>
 800f3d6:	4b26      	ldr	r3, [pc, #152]	; (800f470 <_vfiprintf_r+0x228>)
 800f3d8:	bb1b      	cbnz	r3, 800f422 <_vfiprintf_r+0x1da>
 800f3da:	9b03      	ldr	r3, [sp, #12]
 800f3dc:	3307      	adds	r3, #7
 800f3de:	f023 0307 	bic.w	r3, r3, #7
 800f3e2:	3308      	adds	r3, #8
 800f3e4:	9303      	str	r3, [sp, #12]
 800f3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3e8:	443b      	add	r3, r7
 800f3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800f3ec:	e768      	b.n	800f2c0 <_vfiprintf_r+0x78>
 800f3ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	2001      	movs	r0, #1
 800f3f6:	e7a6      	b.n	800f346 <_vfiprintf_r+0xfe>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	3401      	adds	r4, #1
 800f3fc:	9305      	str	r3, [sp, #20]
 800f3fe:	4619      	mov	r1, r3
 800f400:	f04f 0c0a 	mov.w	ip, #10
 800f404:	4620      	mov	r0, r4
 800f406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f40a:	3a30      	subs	r2, #48	; 0x30
 800f40c:	2a09      	cmp	r2, #9
 800f40e:	d903      	bls.n	800f418 <_vfiprintf_r+0x1d0>
 800f410:	2b00      	cmp	r3, #0
 800f412:	d0c6      	beq.n	800f3a2 <_vfiprintf_r+0x15a>
 800f414:	9105      	str	r1, [sp, #20]
 800f416:	e7c4      	b.n	800f3a2 <_vfiprintf_r+0x15a>
 800f418:	fb0c 2101 	mla	r1, ip, r1, r2
 800f41c:	4604      	mov	r4, r0
 800f41e:	2301      	movs	r3, #1
 800f420:	e7f0      	b.n	800f404 <_vfiprintf_r+0x1bc>
 800f422:	ab03      	add	r3, sp, #12
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	462a      	mov	r2, r5
 800f428:	4b12      	ldr	r3, [pc, #72]	; (800f474 <_vfiprintf_r+0x22c>)
 800f42a:	a904      	add	r1, sp, #16
 800f42c:	4630      	mov	r0, r6
 800f42e:	f3af 8000 	nop.w
 800f432:	4607      	mov	r7, r0
 800f434:	1c78      	adds	r0, r7, #1
 800f436:	d1d6      	bne.n	800f3e6 <_vfiprintf_r+0x19e>
 800f438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f43a:	07d9      	lsls	r1, r3, #31
 800f43c:	d405      	bmi.n	800f44a <_vfiprintf_r+0x202>
 800f43e:	89ab      	ldrh	r3, [r5, #12]
 800f440:	059a      	lsls	r2, r3, #22
 800f442:	d402      	bmi.n	800f44a <_vfiprintf_r+0x202>
 800f444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f446:	f7ff f997 	bl	800e778 <__retarget_lock_release_recursive>
 800f44a:	89ab      	ldrh	r3, [r5, #12]
 800f44c:	065b      	lsls	r3, r3, #25
 800f44e:	f53f af1d 	bmi.w	800f28c <_vfiprintf_r+0x44>
 800f452:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f454:	e71c      	b.n	800f290 <_vfiprintf_r+0x48>
 800f456:	ab03      	add	r3, sp, #12
 800f458:	9300      	str	r3, [sp, #0]
 800f45a:	462a      	mov	r2, r5
 800f45c:	4b05      	ldr	r3, [pc, #20]	; (800f474 <_vfiprintf_r+0x22c>)
 800f45e:	a904      	add	r1, sp, #16
 800f460:	4630      	mov	r0, r6
 800f462:	f7ff fc85 	bl	800ed70 <_printf_i>
 800f466:	e7e4      	b.n	800f432 <_vfiprintf_r+0x1ea>
 800f468:	0800f9c2 	.word	0x0800f9c2
 800f46c:	0800f9cc 	.word	0x0800f9cc
 800f470:	00000000 	.word	0x00000000
 800f474:	0800f223 	.word	0x0800f223
 800f478:	0800f9c8 	.word	0x0800f9c8

0800f47c <__swbuf_r>:
 800f47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47e:	460e      	mov	r6, r1
 800f480:	4614      	mov	r4, r2
 800f482:	4605      	mov	r5, r0
 800f484:	b118      	cbz	r0, 800f48e <__swbuf_r+0x12>
 800f486:	6a03      	ldr	r3, [r0, #32]
 800f488:	b90b      	cbnz	r3, 800f48e <__swbuf_r+0x12>
 800f48a:	f7fe ffdf 	bl	800e44c <__sinit>
 800f48e:	69a3      	ldr	r3, [r4, #24]
 800f490:	60a3      	str	r3, [r4, #8]
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	071a      	lsls	r2, r3, #28
 800f496:	d525      	bpl.n	800f4e4 <__swbuf_r+0x68>
 800f498:	6923      	ldr	r3, [r4, #16]
 800f49a:	b31b      	cbz	r3, 800f4e4 <__swbuf_r+0x68>
 800f49c:	6823      	ldr	r3, [r4, #0]
 800f49e:	6922      	ldr	r2, [r4, #16]
 800f4a0:	1a98      	subs	r0, r3, r2
 800f4a2:	6963      	ldr	r3, [r4, #20]
 800f4a4:	b2f6      	uxtb	r6, r6
 800f4a6:	4283      	cmp	r3, r0
 800f4a8:	4637      	mov	r7, r6
 800f4aa:	dc04      	bgt.n	800f4b6 <__swbuf_r+0x3a>
 800f4ac:	4621      	mov	r1, r4
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	f7ff fe06 	bl	800f0c0 <_fflush_r>
 800f4b4:	b9e0      	cbnz	r0, 800f4f0 <__swbuf_r+0x74>
 800f4b6:	68a3      	ldr	r3, [r4, #8]
 800f4b8:	3b01      	subs	r3, #1
 800f4ba:	60a3      	str	r3, [r4, #8]
 800f4bc:	6823      	ldr	r3, [r4, #0]
 800f4be:	1c5a      	adds	r2, r3, #1
 800f4c0:	6022      	str	r2, [r4, #0]
 800f4c2:	701e      	strb	r6, [r3, #0]
 800f4c4:	6962      	ldr	r2, [r4, #20]
 800f4c6:	1c43      	adds	r3, r0, #1
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d004      	beq.n	800f4d6 <__swbuf_r+0x5a>
 800f4cc:	89a3      	ldrh	r3, [r4, #12]
 800f4ce:	07db      	lsls	r3, r3, #31
 800f4d0:	d506      	bpl.n	800f4e0 <__swbuf_r+0x64>
 800f4d2:	2e0a      	cmp	r6, #10
 800f4d4:	d104      	bne.n	800f4e0 <__swbuf_r+0x64>
 800f4d6:	4621      	mov	r1, r4
 800f4d8:	4628      	mov	r0, r5
 800f4da:	f7ff fdf1 	bl	800f0c0 <_fflush_r>
 800f4de:	b938      	cbnz	r0, 800f4f0 <__swbuf_r+0x74>
 800f4e0:	4638      	mov	r0, r7
 800f4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f000 f806 	bl	800f4f8 <__swsetup_r>
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d0d5      	beq.n	800f49c <__swbuf_r+0x20>
 800f4f0:	f04f 37ff 	mov.w	r7, #4294967295
 800f4f4:	e7f4      	b.n	800f4e0 <__swbuf_r+0x64>
	...

0800f4f8 <__swsetup_r>:
 800f4f8:	b538      	push	{r3, r4, r5, lr}
 800f4fa:	4b2a      	ldr	r3, [pc, #168]	; (800f5a4 <__swsetup_r+0xac>)
 800f4fc:	4605      	mov	r5, r0
 800f4fe:	6818      	ldr	r0, [r3, #0]
 800f500:	460c      	mov	r4, r1
 800f502:	b118      	cbz	r0, 800f50c <__swsetup_r+0x14>
 800f504:	6a03      	ldr	r3, [r0, #32]
 800f506:	b90b      	cbnz	r3, 800f50c <__swsetup_r+0x14>
 800f508:	f7fe ffa0 	bl	800e44c <__sinit>
 800f50c:	89a3      	ldrh	r3, [r4, #12]
 800f50e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f512:	0718      	lsls	r0, r3, #28
 800f514:	d422      	bmi.n	800f55c <__swsetup_r+0x64>
 800f516:	06d9      	lsls	r1, r3, #27
 800f518:	d407      	bmi.n	800f52a <__swsetup_r+0x32>
 800f51a:	2309      	movs	r3, #9
 800f51c:	602b      	str	r3, [r5, #0]
 800f51e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f522:	81a3      	strh	r3, [r4, #12]
 800f524:	f04f 30ff 	mov.w	r0, #4294967295
 800f528:	e034      	b.n	800f594 <__swsetup_r+0x9c>
 800f52a:	0758      	lsls	r0, r3, #29
 800f52c:	d512      	bpl.n	800f554 <__swsetup_r+0x5c>
 800f52e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f530:	b141      	cbz	r1, 800f544 <__swsetup_r+0x4c>
 800f532:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f536:	4299      	cmp	r1, r3
 800f538:	d002      	beq.n	800f540 <__swsetup_r+0x48>
 800f53a:	4628      	mov	r0, r5
 800f53c:	f7ff f952 	bl	800e7e4 <_free_r>
 800f540:	2300      	movs	r3, #0
 800f542:	6363      	str	r3, [r4, #52]	; 0x34
 800f544:	89a3      	ldrh	r3, [r4, #12]
 800f546:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f54a:	81a3      	strh	r3, [r4, #12]
 800f54c:	2300      	movs	r3, #0
 800f54e:	6063      	str	r3, [r4, #4]
 800f550:	6923      	ldr	r3, [r4, #16]
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	89a3      	ldrh	r3, [r4, #12]
 800f556:	f043 0308 	orr.w	r3, r3, #8
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	6923      	ldr	r3, [r4, #16]
 800f55e:	b94b      	cbnz	r3, 800f574 <__swsetup_r+0x7c>
 800f560:	89a3      	ldrh	r3, [r4, #12]
 800f562:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f56a:	d003      	beq.n	800f574 <__swsetup_r+0x7c>
 800f56c:	4621      	mov	r1, r4
 800f56e:	4628      	mov	r0, r5
 800f570:	f000 f88c 	bl	800f68c <__smakebuf_r>
 800f574:	89a0      	ldrh	r0, [r4, #12]
 800f576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f57a:	f010 0301 	ands.w	r3, r0, #1
 800f57e:	d00a      	beq.n	800f596 <__swsetup_r+0x9e>
 800f580:	2300      	movs	r3, #0
 800f582:	60a3      	str	r3, [r4, #8]
 800f584:	6963      	ldr	r3, [r4, #20]
 800f586:	425b      	negs	r3, r3
 800f588:	61a3      	str	r3, [r4, #24]
 800f58a:	6923      	ldr	r3, [r4, #16]
 800f58c:	b943      	cbnz	r3, 800f5a0 <__swsetup_r+0xa8>
 800f58e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f592:	d1c4      	bne.n	800f51e <__swsetup_r+0x26>
 800f594:	bd38      	pop	{r3, r4, r5, pc}
 800f596:	0781      	lsls	r1, r0, #30
 800f598:	bf58      	it	pl
 800f59a:	6963      	ldrpl	r3, [r4, #20]
 800f59c:	60a3      	str	r3, [r4, #8]
 800f59e:	e7f4      	b.n	800f58a <__swsetup_r+0x92>
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	e7f7      	b.n	800f594 <__swsetup_r+0x9c>
 800f5a4:	20000410 	.word	0x20000410

0800f5a8 <_raise_r>:
 800f5a8:	291f      	cmp	r1, #31
 800f5aa:	b538      	push	{r3, r4, r5, lr}
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	460d      	mov	r5, r1
 800f5b0:	d904      	bls.n	800f5bc <_raise_r+0x14>
 800f5b2:	2316      	movs	r3, #22
 800f5b4:	6003      	str	r3, [r0, #0]
 800f5b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
 800f5bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f5be:	b112      	cbz	r2, 800f5c6 <_raise_r+0x1e>
 800f5c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5c4:	b94b      	cbnz	r3, 800f5da <_raise_r+0x32>
 800f5c6:	4620      	mov	r0, r4
 800f5c8:	f000 f830 	bl	800f62c <_getpid_r>
 800f5cc:	462a      	mov	r2, r5
 800f5ce:	4601      	mov	r1, r0
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5d6:	f000 b817 	b.w	800f608 <_kill_r>
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d00a      	beq.n	800f5f4 <_raise_r+0x4c>
 800f5de:	1c59      	adds	r1, r3, #1
 800f5e0:	d103      	bne.n	800f5ea <_raise_r+0x42>
 800f5e2:	2316      	movs	r3, #22
 800f5e4:	6003      	str	r3, [r0, #0]
 800f5e6:	2001      	movs	r0, #1
 800f5e8:	e7e7      	b.n	800f5ba <_raise_r+0x12>
 800f5ea:	2400      	movs	r4, #0
 800f5ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	4798      	blx	r3
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	e7e0      	b.n	800f5ba <_raise_r+0x12>

0800f5f8 <raise>:
 800f5f8:	4b02      	ldr	r3, [pc, #8]	; (800f604 <raise+0xc>)
 800f5fa:	4601      	mov	r1, r0
 800f5fc:	6818      	ldr	r0, [r3, #0]
 800f5fe:	f7ff bfd3 	b.w	800f5a8 <_raise_r>
 800f602:	bf00      	nop
 800f604:	20000410 	.word	0x20000410

0800f608 <_kill_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d07      	ldr	r5, [pc, #28]	; (800f628 <_kill_r+0x20>)
 800f60c:	2300      	movs	r3, #0
 800f60e:	4604      	mov	r4, r0
 800f610:	4608      	mov	r0, r1
 800f612:	4611      	mov	r1, r2
 800f614:	602b      	str	r3, [r5, #0]
 800f616:	f7f1 ff31 	bl	800147c <_kill>
 800f61a:	1c43      	adds	r3, r0, #1
 800f61c:	d102      	bne.n	800f624 <_kill_r+0x1c>
 800f61e:	682b      	ldr	r3, [r5, #0]
 800f620:	b103      	cbz	r3, 800f624 <_kill_r+0x1c>
 800f622:	6023      	str	r3, [r4, #0]
 800f624:	bd38      	pop	{r3, r4, r5, pc}
 800f626:	bf00      	nop
 800f628:	20002088 	.word	0x20002088

0800f62c <_getpid_r>:
 800f62c:	f7f1 bf1e 	b.w	800146c <_getpid>

0800f630 <_malloc_usable_size_r>:
 800f630:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f634:	1f18      	subs	r0, r3, #4
 800f636:	2b00      	cmp	r3, #0
 800f638:	bfbc      	itt	lt
 800f63a:	580b      	ldrlt	r3, [r1, r0]
 800f63c:	18c0      	addlt	r0, r0, r3
 800f63e:	4770      	bx	lr

0800f640 <__swhatbuf_r>:
 800f640:	b570      	push	{r4, r5, r6, lr}
 800f642:	460c      	mov	r4, r1
 800f644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f648:	2900      	cmp	r1, #0
 800f64a:	b096      	sub	sp, #88	; 0x58
 800f64c:	4615      	mov	r5, r2
 800f64e:	461e      	mov	r6, r3
 800f650:	da0d      	bge.n	800f66e <__swhatbuf_r+0x2e>
 800f652:	89a3      	ldrh	r3, [r4, #12]
 800f654:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f658:	f04f 0100 	mov.w	r1, #0
 800f65c:	bf0c      	ite	eq
 800f65e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f662:	2340      	movne	r3, #64	; 0x40
 800f664:	2000      	movs	r0, #0
 800f666:	6031      	str	r1, [r6, #0]
 800f668:	602b      	str	r3, [r5, #0]
 800f66a:	b016      	add	sp, #88	; 0x58
 800f66c:	bd70      	pop	{r4, r5, r6, pc}
 800f66e:	466a      	mov	r2, sp
 800f670:	f000 f848 	bl	800f704 <_fstat_r>
 800f674:	2800      	cmp	r0, #0
 800f676:	dbec      	blt.n	800f652 <__swhatbuf_r+0x12>
 800f678:	9901      	ldr	r1, [sp, #4]
 800f67a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f67e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f682:	4259      	negs	r1, r3
 800f684:	4159      	adcs	r1, r3
 800f686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f68a:	e7eb      	b.n	800f664 <__swhatbuf_r+0x24>

0800f68c <__smakebuf_r>:
 800f68c:	898b      	ldrh	r3, [r1, #12]
 800f68e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f690:	079d      	lsls	r5, r3, #30
 800f692:	4606      	mov	r6, r0
 800f694:	460c      	mov	r4, r1
 800f696:	d507      	bpl.n	800f6a8 <__smakebuf_r+0x1c>
 800f698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f69c:	6023      	str	r3, [r4, #0]
 800f69e:	6123      	str	r3, [r4, #16]
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	6163      	str	r3, [r4, #20]
 800f6a4:	b002      	add	sp, #8
 800f6a6:	bd70      	pop	{r4, r5, r6, pc}
 800f6a8:	ab01      	add	r3, sp, #4
 800f6aa:	466a      	mov	r2, sp
 800f6ac:	f7ff ffc8 	bl	800f640 <__swhatbuf_r>
 800f6b0:	9900      	ldr	r1, [sp, #0]
 800f6b2:	4605      	mov	r5, r0
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	f7ff f909 	bl	800e8cc <_malloc_r>
 800f6ba:	b948      	cbnz	r0, 800f6d0 <__smakebuf_r+0x44>
 800f6bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6c0:	059a      	lsls	r2, r3, #22
 800f6c2:	d4ef      	bmi.n	800f6a4 <__smakebuf_r+0x18>
 800f6c4:	f023 0303 	bic.w	r3, r3, #3
 800f6c8:	f043 0302 	orr.w	r3, r3, #2
 800f6cc:	81a3      	strh	r3, [r4, #12]
 800f6ce:	e7e3      	b.n	800f698 <__smakebuf_r+0xc>
 800f6d0:	89a3      	ldrh	r3, [r4, #12]
 800f6d2:	6020      	str	r0, [r4, #0]
 800f6d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6d8:	81a3      	strh	r3, [r4, #12]
 800f6da:	9b00      	ldr	r3, [sp, #0]
 800f6dc:	6163      	str	r3, [r4, #20]
 800f6de:	9b01      	ldr	r3, [sp, #4]
 800f6e0:	6120      	str	r0, [r4, #16]
 800f6e2:	b15b      	cbz	r3, 800f6fc <__smakebuf_r+0x70>
 800f6e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6e8:	4630      	mov	r0, r6
 800f6ea:	f000 f81d 	bl	800f728 <_isatty_r>
 800f6ee:	b128      	cbz	r0, 800f6fc <__smakebuf_r+0x70>
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	f023 0303 	bic.w	r3, r3, #3
 800f6f6:	f043 0301 	orr.w	r3, r3, #1
 800f6fa:	81a3      	strh	r3, [r4, #12]
 800f6fc:	89a3      	ldrh	r3, [r4, #12]
 800f6fe:	431d      	orrs	r5, r3
 800f700:	81a5      	strh	r5, [r4, #12]
 800f702:	e7cf      	b.n	800f6a4 <__smakebuf_r+0x18>

0800f704 <_fstat_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4d07      	ldr	r5, [pc, #28]	; (800f724 <_fstat_r+0x20>)
 800f708:	2300      	movs	r3, #0
 800f70a:	4604      	mov	r4, r0
 800f70c:	4608      	mov	r0, r1
 800f70e:	4611      	mov	r1, r2
 800f710:	602b      	str	r3, [r5, #0]
 800f712:	f7f1 ff12 	bl	800153a <_fstat>
 800f716:	1c43      	adds	r3, r0, #1
 800f718:	d102      	bne.n	800f720 <_fstat_r+0x1c>
 800f71a:	682b      	ldr	r3, [r5, #0]
 800f71c:	b103      	cbz	r3, 800f720 <_fstat_r+0x1c>
 800f71e:	6023      	str	r3, [r4, #0]
 800f720:	bd38      	pop	{r3, r4, r5, pc}
 800f722:	bf00      	nop
 800f724:	20002088 	.word	0x20002088

0800f728 <_isatty_r>:
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	4d06      	ldr	r5, [pc, #24]	; (800f744 <_isatty_r+0x1c>)
 800f72c:	2300      	movs	r3, #0
 800f72e:	4604      	mov	r4, r0
 800f730:	4608      	mov	r0, r1
 800f732:	602b      	str	r3, [r5, #0]
 800f734:	f7f1 ff11 	bl	800155a <_isatty>
 800f738:	1c43      	adds	r3, r0, #1
 800f73a:	d102      	bne.n	800f742 <_isatty_r+0x1a>
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	b103      	cbz	r3, 800f742 <_isatty_r+0x1a>
 800f740:	6023      	str	r3, [r4, #0]
 800f742:	bd38      	pop	{r3, r4, r5, pc}
 800f744:	20002088 	.word	0x20002088

0800f748 <_init>:
 800f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f74a:	bf00      	nop
 800f74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f74e:	bc08      	pop	{r3}
 800f750:	469e      	mov	lr, r3
 800f752:	4770      	bx	lr

0800f754 <_fini>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	bf00      	nop
 800f758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75a:	bc08      	pop	{r3}
 800f75c:	469e      	mov	lr, r3
 800f75e:	4770      	bx	lr
